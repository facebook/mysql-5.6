--let $rpl_topology= 1->2,1->3
--source include/rpl_init.inc
--source include/rpl_default_connections.inc

--let $rpl_connection_name= slave2
--let $rpl_server_number= 3
--source include/rpl_connect.inc

call mtr.add_suppression("A message intended for a client cannot be sent there as no client-session is attached");
call mtr.add_suppression("Semi-sync master: Received an ACK from an unrecognized slave with UUID");
call mtr.add_suppression("Semi-sync master failed on net_flush.. before waiting for slave reply");
call mtr.add_suppression("Run function 'transmit_start' in plugin 'rpl_semi_sync_master' failed");
call mtr.add_suppression("Failed to register slave to semi-sync ACK receiver thread.*");
call mtr.add_suppression("Slave I/O for channel '': Master command COM_REGISTER_SLAVE failed: failed registering on master");
call mtr.add_suppression("Slave I/O for channel '': SET @master_heartbeat_period");
call mtr.add_suppression("Read semi-sync reply magic number error");

--source include/rpl_connection_master.inc
--let $saved_rpl_semi_sync_master_whitelist = `select @@global.rpl_semi_sync_master_whitelist`

# Check if things work by default
create table t1(a int) engine=innodb;
insert into t1 values(0);

--let $sync_slave_connection= slave1
--source include/sync_slave_sql_with_master.inc
--source include/rpl_connection_master.inc
--let $sync_slave_connection= slave2
--source include/sync_slave_sql_with_master.inc

--source include/rpl_connection_slave1.inc
--let $assert_text= The t1 table should have 1 row
--let $assert_cond= count(*) = 1 from t1
--source include/assert.inc

--source include/rpl_connection_slave2.inc
--let $assert_text= The t1 table should have 1 row
--let $assert_cond= count(*) = 1 from t1
--source include/assert.inc


# Save slave UUIDs
--source include/rpl_connection_slave1.inc
let $slave1_uuid = `select @@global.server_uuid`;
--source include/rpl_connection_slave2.inc
let $slave2_uuid = `select @@global.server_uuid`;

# Set whitelist on master
--source include/rpl_connection_master.inc
--replace_result $slave1_uuid slave1_uuid $slave2_uuid slave2_uuid
--eval set @@persist.rpl_semi_sync_master_whitelist = "$slave1_uuid,$slave2_uuid"

# Check if setting correct UUID works
--source include/rpl_connection_master.inc
insert into t1 values(1);
insert into t1 values(2);

--let $assert_text= The t1 table should have 3 rows
--let $assert_cond= count(*) = 3 from t1
--source include/assert.inc

--let $sync_slave_connection= slave1
--source include/sync_slave_sql_with_master.inc
--source include/rpl_connection_master.inc
--let $sync_slave_connection= slave2
--source include/sync_slave_sql_with_master.inc

--source include/rpl_connection_slave1.inc
--let $assert_text= The t1 table should have 3 rows
--let $assert_cond= count(*) = 3 from t1
--source include/assert.inc

--source include/rpl_connection_slave2.inc
--let $assert_text= The t1 table should have 3 rows
--let $assert_cond= count(*) = 3 from t1
--source include/assert.inc


# Check if things works if only one of the slaves ACK
--source include/rpl_connection_slave1.inc
--source include/stop_slave.inc
--source include/rpl_connection_master.inc
insert into t1 values(3);
insert into t1 values(4);

--let $assert_text= The t1 table should have 5 rows
--let $assert_cond= count(*) = 5 from t1
--source include/assert.inc

--let $sync_slave_connection= slave2
--source include/sync_slave_sql_with_master.inc
--let $assert_text= The t1 table should have 5 rows
--let $assert_cond= count(*) = 5 from t1
--source include/assert.inc

--source include/rpl_connection_slave1.inc
--source include/start_slave.inc

--source include/rpl_connection_master.inc
--let $sync_slave_connection= slave1
--source include/sync_slave_sql_with_master.inc
--let $assert_text= The t1 table should have 5 rows
--let $assert_cond= count(*) = 5 from t1
--source include/assert.inc


# Check if value persists across restarts
--source include/rpl_stop_slaves.inc
--source include/rpl_connection_master.inc
--let $rpl_server_number= 1
--source include/rpl_restart_server.inc
--source include/rpl_start_slaves.inc

--source include/rpl_connection_master.inc
replace_result $slave1_uuid slave1_uuid $slave2_uuid slave2_uuid;
select @@global.rpl_semi_sync_master_whitelist;


# Check if trx fails when nobody from whitelist ACKs
# stop all ackers
--source include/rpl_connection_slave1.inc
--source include/stop_slave.inc
--source include/rpl_connection_slave2.inc
--source include/stop_slave.inc
--source include/rpl_connection_master1.inc
send insert into t1 values(5);

--source include/rpl_connection_master.inc
--let $wait_timeout= 20  # binlog dump thread will be killed after 30 seconds timeout
--let $wait_condition= select count(*) = 1 from information_schema.processlist where state = "Waiting for semi-sync ACK from slave"
--source include/wait_condition.inc

--let $assert_text= The t1 table should have 5 rows
--let $assert_cond= count(*) = 5 from t1
--source include/assert.inc

# start ackers
--source include/rpl_connection_slave1.inc
--source include/start_slave.inc
--source include/rpl_connection_slave2.inc
--source include/start_slave.inc

--source include/rpl_connection_master1.inc
reap; # wait for insert to complete

--let $assert_text= The t1 table should have 6 rows
--let $assert_cond= count(*) = 6 from t1
--source include/assert.inc

--source include/rpl_connection_master.inc
--let $sync_slave_connection= slave1
--source include/sync_slave_sql_with_master.inc
--let $assert_text= The t1 table should have 6 rows
--let $assert_cond= count(*) = 6 from t1
--source include/assert.inc

--source include/rpl_connection_master.inc
--let $sync_slave_connection= slave2
--source include/sync_slave_sql_with_master.inc
--let $assert_text= The t1 table should have 6 rows
--let $assert_cond= count(*) = 6 from t1
--source include/assert.inc


# Check if dump thread closes if a non-whitelisted slave acks
--source include/rpl_connection_master.inc
--let $wait_timeout= 20
--let $wait_condition= select count(*) = 2 from information_schema.processlist where command = "Binlog Dump"
--source include/wait_condition.inc

# remove slave2 from whitelist
--replace_result $slave1_uuid slave1_uuid $slave2_uuid slave2_uuid
--eval set @@global.rpl_semi_sync_master_whitelist='-$slave2_uuid'

# stop the valid semi-sync slave so that the ACK is received from invalid slave
--source include/rpl_connection_slave1.inc
--source include/stop_slave.inc

--source include/rpl_connection_master1.inc
send insert into t1 values(6); # apply a trx

--source include/rpl_connection_master.inc
# wait for the dump thread's death
--let $wait_timeout= 20
--let $wait_condition= select count(*) <= 1 from information_schema.processlist where command = "Binlog Dump"
--source include/wait_condition.inc

# start the valid slave
--source include/rpl_connection_slave1.inc
--source include/start_slave.inc

# wait for insert to commit
--source include/rpl_connection_master1.inc
reap;

# add slave2 back to the whitelist
replace_result $slave1_uuid slave1_uuid $slave2_uuid slave2_uuid;
eval set @@global.rpl_semi_sync_master_whitelist='+$slave2_uuid';

# wait for the dump thread to come back
--let $wait_timeout= 20
--let $wait_condition= select count(*) = 2 from information_schema.processlist where Command = "Binlog Dump"
--source include/wait_condition.inc

--let $assert_text= The t1 table should have 7 rows
--let $assert_cond= count(*) = 7 from t1
--source include/assert.inc

--source include/rpl_connection_master.inc
--let $sync_slave_connection= slave1
--source include/sync_slave_sql_with_master.inc
--let $assert_text= The t1 table should have 7 rows
--let $assert_cond= count(*) = 7 from t1
--source include/assert.inc

--source include/rpl_connection_master.inc
--let $sync_slave_connection= slave2
--source include/sync_slave_sql_with_master.inc
--let $assert_text= The t1 table should have 7 rows
--let $assert_cond= count(*) = 7 from t1
--source include/assert.inc


# Check if 2 dump threads close with empty whitelist
--source include/rpl_connection_master.inc
--let $wait_timeout= 20
--let $wait_condition= select count(*) = 2 from information_schema.processlist where command = "Binlog Dump"
--source include/wait_condition.inc

# remove all slaves from whitelist
--eval set @@global.rpl_semi_sync_master_whitelist=''

--source include/rpl_connection_master1.inc
send insert into t1 values(7); # apply a trx

--source include/rpl_connection_master.inc
# wait for the death of 2 dump threads
--let $wait_timeout= 20
--let $wait_condition= select count(*) = 0 from information_schema.processlist where command = "Binlog Dump"
--source include/wait_condition.inc

# add slave1 and slave2 back to the whitelist
--replace_result $slave1_uuid slave1_uuid $slave2_uuid slave2_uuid
--eval set @@global.rpl_semi_sync_master_whitelist = "$slave1_uuid,$slave2_uuid"

# wait for insert to commit
--source include/rpl_connection_master1.inc
reap;

# wait for dump threads to come back
--let $wait_timeout= 20
--let $wait_condition= select count(*) = 2 from information_schema.processlist where Command = "Binlog Dump"
--source include/wait_condition.inc

--let $assert_text= The t1 table should have 8 rows
--let $assert_cond= count(*) = 8 from t1
--source include/assert.inc

--source include/rpl_connection_master.inc
--let $sync_slave_connection= slave1
--source include/sync_slave_sql_with_master.inc
--let $assert_text= The t1 table should have 8 rows
--let $assert_cond= count(*) = 8 from t1
--source include/assert.inc

--source include/rpl_connection_master.inc
--let $sync_slave_connection= slave2
--source include/sync_slave_sql_with_master.inc
--let $assert_text= The t1 table should have 8 rows
--let $assert_cond= count(*) = 8 from t1
--source include/assert.inc


# Cleanup
--source include/rpl_connection_master.inc
drop table t1;
--eval set @@global.rpl_semi_sync_master_whitelist = $saved_rpl_semi_sync_master_whitelist
reset persist rpl_semi_sync_master_whitelist;

--let $rpl_only_running_threads= 1
--source include/rpl_end.inc
