DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
id INT,
fake_id INT,
bigfield VARCHAR(4096),
PRIMARY KEY (id),
KEY bf (bigfield(32)),
KEY fid (fake_id, bigfield(32))
) ENGINE=rocksdb;
INSERT INTO t1 VALUES (1, 1001, REPEAT('a', 1)),
(8, 1008, REPEAT('b', 8)),
(24, 1024, REPEAT('c', 24)),
(31, 1031, REPEAT('d', 31)),
(32, 1032, REPEAT('x', 32)),
(33, 1033, REPEAT('y', 33)),
(128, 1128, REPEAT('z', 128));
SELECT * FROM t1;
id	fake_id	bigfield
1	1001	a
8	1008	bbbbbbbb
24	1024	cccccccccccccccccccccccc
31	1031	ddddddddddddddddddddddddddddddd
32	1032	xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
33	1033	yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
128	1128	zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
# Baseline sanity check
no-op query
no-op query
include/assert.inc [Baseline sanity check: 0 rocksdb_covered_secondary_key_lookups]
# Eligible for optimization.
id	bigfield
31	ddddddddddddddddddddddddddddddd
include/assert.inc [Eligible for optimization.: 2 rocksdb_covered_secondary_key_lookups]
# Eligible for optimization, access via fake_id only
id	bigfield
31	ddddddddddddddddddddddddddddddd
include/assert.inc [Eligible for optimization, access via fake_id only: 2 rocksdb_covered_secondary_key_lookups]
# Not eligible for optimization, access via fake_id of big row.
id	bigfield
33	yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
include/assert.inc [Not eligible for optimization, access via fake_id of big row.: 0 rocksdb_covered_secondary_key_lookups]
# Eligible for optimization.
id	bigfield
32	xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
include/assert.inc [Eligible for optimization.: 1 rocksdb_covered_secondary_key_lookups]
# Not eligible for optimization.
id	bigfield
33	yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
include/assert.inc [Not eligible for optimization.: 0 rocksdb_covered_secondary_key_lookups]
# Eligible for optimization.
id	bigfield
8	bbbbbbbb
include/assert.inc [Eligible for optimization.: 2 rocksdb_covered_secondary_key_lookups]
# Eligible for optimization.
id	bigfield
24	cccccccccccccccccccccccc
include/assert.inc [Eligible for optimization.: 2 rocksdb_covered_secondary_key_lookups]
# Not eligible for optimization.
id	bigfield
128	zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
include/assert.inc [Not eligible for optimization.: 0 rocksdb_covered_secondary_key_lookups]
#
# Test that multi-byte charsets are handled correctly
#
# Charset record obviously shorter than the prefix
a	b
1	a
include/assert.inc [Charset record obviously shorter than the prefix: 2 rocksdb_covered_secondary_key_lookups]
# Charset record shorter than prefix
a	b
2	cc
include/assert.inc [Charset record shorter than prefix: 2 rocksdb_covered_secondary_key_lookups]
# Charset record with glyphs shorter than prefix
a	b
3	ŽŽ
include/assert.inc [Charset record with glyphs shorter than prefix: 1 rocksdb_covered_secondary_key_lookups]
# Charset record longer than prefix
a	b
4	žžžž
include/assert.inc [Charset record longer than prefix: 0 rocksdb_covered_secondary_key_lookups]
