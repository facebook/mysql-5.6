create table t0(a int primary key) engine=rocksdb;
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (
pk1 int,
pk2 int,
a int not null,
b int,
primary key (pk1, pk2),
key     key1(pk1, a) comment 'partial_group_keyparts=1;partial_group_threshold=5'
) engine=rocksdb;
insert into t1 select
1,
A.a,
100 + A.a,
123456
from t0 A;
select * from t1 force index (key1) where pk1=1;
pk1	pk2	a	b
1	0	100	123456
1	1	101	123456
1	2	102	123456
1	3	103	123456
1	4	104	123456
1	5	105	123456
1	6	106	123456
1	7	107	123456
1	8	108	123456
1	9	109	123456
insert into t1 select
2,
A.a,
100 + A.a,
123456
from t0 A limit 3;
insert into t1 select
10000 + A.a +10 *B.a +100*C.a,
A.a,
100 + A.a,
123456
from t0 A, t0 B, t0 C;
create table t3(pk int primary key);
connect  con2,localhost,root,,;
connection con2;
begin;
insert into t3 values(3333333);
connection default;
#
# First, test a query with range lock
#
explain
select * from t1 force index (key1) where pk1>=1 and pk1<=10;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	key1	key1	4	NULL	#	100.00	Using index condition
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`pk1` AS `pk1`,`test`.`t1`.`pk2` AS `pk2`,`test`.`t1`.`a` AS `a`,`test`.`t1`.`b` AS `b` from `test`.`t1` FORCE INDEX (`key1`) where ((`test`.`t1`.`pk1` >= 1) and (`test`.`t1`.`pk1` <= 10))
connect  con1,localhost,root,,;
connection con1;
begin;
# Allocate a snapshot
select * from t0 where a=3;
a
3
connection default;
#  Make some modifications not visible in the snapshot
insert into t1 values (1,11, 99999, 99999);
insert into t1 values (2,11, 99999, 99999);
connection con1;
# This doesn't see the modifications
select * from t1 force index (key1) where pk1>=1 and pk1<=10;
pk1	pk2	a	b
1	0	100	123456
1	1	101	123456
1	2	102	123456
1	3	103	123456
1	4	104	123456
1	5	105	123456
1	6	106	123456
1	7	107	123456
1	8	108	123456
1	9	109	123456
2	0	100	123456
2	1	101	123456
2	2	102	123456
# This DOES see the modifications
select * from t1 force index (key1) where pk1>=1 and pk1<=10 for update;
pk1	pk2	a	b
1	0	100	123456
1	1	101	123456
1	2	102	123456
1	3	103	123456
1	4	104	123456
1	5	105	123456
1	6	106	123456
1	7	107	123456
1	8	108	123456
1	9	109	123456
1	11	99999	99999
2	0	100	123456
2	1	101	123456
2	2	102	123456
2	11	99999	99999
# select * from information_schema.rocksdb_locks; # With replacements by select_from_is_rowlocks.inc
COLUMN_FAMILY_ID	TRANSACTION_ID	KEY	mode
$cf2_id	$trx_id	${indexnr2}80000001-${indexnr2}8000000a:1	X
$cf_id	$trx_id	${indexnr}8000000180000000	X
$cf_id	$trx_id	${indexnr}8000000180000001	X
$cf_id	$trx_id	${indexnr}8000000180000002	X
$cf_id	$trx_id	${indexnr}8000000180000003	X
$cf_id	$trx_id	${indexnr}8000000180000004	X
$cf_id	$trx_id	${indexnr}8000000180000005	X
$cf_id	$trx_id	${indexnr}8000000180000006	X
$cf_id	$trx_id	${indexnr}8000000180000007	X
$cf_id	$trx_id	${indexnr}8000000180000008	X
$cf_id	$trx_id	${indexnr}8000000180000009	X
$cf_id	$trx_id	${indexnr}800000018000000b	X
$cf_id	$trx_id	${indexnr}8000000280000000	X
$cf_id	$trx_id	${indexnr}8000000280000001	X
$cf_id	$trx_id	${indexnr}8000000280000002	X
$cf_id	$trx_id	${indexnr}800000028000000b	X
rollback;
#
# Now, test a query with LockingIterator
#
delete from t1 where b=99999;
begin;
# Allocate a snapshot
select * from t0 where a=3;
a
3
connection default;
#  Make some modifications not visible in the snapshot
insert into t1 values (1,11, 99999, 99999);
insert into t1 values (2,11, 99999, 99999);
connection con1;
# This doesn't see the modifications:
select * from t1 force index (key1) where pk1>=1 order by pk1 limit 15;
pk1	pk2	a	b
1	0	100	123456
1	1	101	123456
1	2	102	123456
1	3	103	123456
1	4	104	123456
1	5	105	123456
1	6	106	123456
1	7	107	123456
1	8	108	123456
1	9	109	123456
2	0	100	123456
2	1	101	123456
2	2	102	123456
10000	0	100	123456
10001	1	101	123456
# This DOES see the modifications:
select * from t1 force index (key1) where pk1>=1 order by pk1 limit 15 for update;
pk1	pk2	a	b
1	0	100	123456
1	1	101	123456
1	2	102	123456
1	3	103	123456
1	4	104	123456
1	5	105	123456
1	6	106	123456
1	7	107	123456
1	8	108	123456
1	9	109	123456
1	11	99999	99999
2	0	100	123456
2	1	101	123456
2	2	102	123456
2	11	99999	99999
# select * from information_schema.rocksdb_locks; # With replacements by select_from_is_rowlocks.inc
COLUMN_FAMILY_ID	TRANSACTION_ID	KEY	mode
$cf2_id	$trx_id	${indexnr2}80000001	X
$cf2_id	$trx_id	${indexnr2}80000001-${indexnr2}800000018000006480000000	X
$cf2_id	$trx_id	${indexnr2}800000018000006480000000-${indexnr2}800000018000006580000001	X
$cf2_id	$trx_id	${indexnr2}800000018000006580000001-${indexnr2}800000018000006680000002	X
$cf2_id	$trx_id	${indexnr2}800000018000006680000002-${indexnr2}800000018000006780000003	X
$cf2_id	$trx_id	${indexnr2}800000018000006780000003-${indexnr2}800000018000006880000004	X
$cf2_id	$trx_id	${indexnr2}800000018000006880000004-${indexnr2}800000018000006980000005	X
$cf2_id	$trx_id	${indexnr2}800000018000006980000005-${indexnr2}800000018000006a80000006	X
$cf2_id	$trx_id	${indexnr2}800000018000006a80000006-${indexnr2}800000018000006b80000007	X
$cf2_id	$trx_id	${indexnr2}800000018000006b80000007-${indexnr2}800000018000006c80000008	X
$cf2_id	$trx_id	${indexnr2}800000018000006c80000008-${indexnr2}800000018000006d80000009	X
$cf2_id	$trx_id	${indexnr2}800000018000006d80000009-${indexnr2}800000018001869f8000000b	X
$cf2_id	$trx_id	${indexnr2}800000018001869f8000000b-${indexnr2+1}	X
$cf_id	$trx_id	${indexnr}8000000180000000	X
$cf_id	$trx_id	${indexnr}8000000180000001	X
$cf_id	$trx_id	${indexnr}8000000180000002	X
$cf_id	$trx_id	${indexnr}8000000180000003	X
$cf_id	$trx_id	${indexnr}8000000180000004	X
$cf_id	$trx_id	${indexnr}8000000180000005	X
$cf_id	$trx_id	${indexnr}8000000180000006	X
$cf_id	$trx_id	${indexnr}8000000180000007	X
$cf_id	$trx_id	${indexnr}8000000180000008	X
$cf_id	$trx_id	${indexnr}8000000180000009	X
$cf_id	$trx_id	${indexnr}800000018000000b	X
$cf_id	$trx_id	${indexnr}80000002-${indexnr}8000271080000000	X
rollback;
disconnect con1;
connection default;
disconnect con2;
drop table t0, t1,t3;
