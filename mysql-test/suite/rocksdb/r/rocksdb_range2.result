create table t1 (id1 bigint, id2 bigint, c1 bigint, c2 bigint, c3 bigint, c4 bigint, c5 bigint, c6 bigint, c7 bigint, primary key (id1, id2), index i(c1, c2));
analyze table t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
select count(*) from t1;
count(*)
10000
explain select c1 from t1 where c1 > 5 limit 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	i	i	9	NULL	#	Using where; Using index
drop table t1;
#
# Issue #1052: ha_rocksdb::records_in_range() vastly overestimates the number of rows in certain ranges
#
CREATE TABLE t1 (
part_id smallint(5) unsigned NOT NULL,
oid bigint(20) unsigned NOT NULL,
tid bigint(20) unsigned NOT NULL,
filler char(32),
KEY tid (part_id,tid,oid)
) ENGINE=ROCKSDB;
create table t2(a int primary key);
insert into t2 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t3(a int primary key);
insert into t3 select A.a + B.a* 10 + C.a * 100 from t2 A, t2 B, t2 C;
set rocksdb_max_row_locks=1000000;
insert into t1
select 
0, 
A.a + 1000*B.a,
A.a + 1000*B.a,
'filler-data'
from t2 A, t3 B;
insert into t1
select 
1,
A.a + 1000*B.a,
A.a + 1000*B.a,
'filler-data'
from t2 A, t3 B;
set global rocksdb_force_flush_memtable_now=1;
explain select * from t1 where part_id=0 and tid>100000000;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	tid	tid	10	NULL	#	Using index condition
# We can't check "rows" in EXPLAIN output directly as that value tends
# to change a bit. Instead, check that the value is sufficiently low
select @a < 10 as "MUST BE 1";
MUST BE 1
1
drop table t2,t3,t1;
