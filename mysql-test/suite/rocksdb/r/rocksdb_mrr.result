create table t0(a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1(a int);
insert into t1 select A.a + B.a* 10 + C.a * 100 from t0 A, t0 B, t0 C;
create table t2 (
pk int primary key,
col1 int,
filler char(32)
) engine=rocksdb;
insert into t2 select a,a,a from t1;
set global rocksdb_force_flush_memtable_now=1;
set @save_optimizer_switch=@@optimizer_switch;
set optimizer_switch='mrr=on,mrr_cost_based=off,batched_key_access=on';
explain 
select * from t2,t0 where t2.pk=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t2	eq_ref	PRIMARY	PRIMARY	4	test.t0.a	1	Using join buffer (Batched Key Access)
select * from t2,t0 where t2.pk=t0.a;
pk	col1	filler	a
0	0	0	0
1	1	1	1
2	2	2	2
3	3	3	3
4	4	4	4
5	5	5	5
6	6	6	6
7	7	7	7
8	8	8	8
9	9	9	9
# Check the counters
create temporary table t10 as 
select * from information_schema.global_status
where variable_name like 'rocksdb_num%' or variable_name='rocksdb_rows_read';
flush status;
select * from t2,t0 where t2.pk=t0.a;
pk	col1	filler	a
0	0	0	0
1	1	1	1
2	2	2	2
3	3	3	3
4	4	4	4
5	5	5	5
6	6	6	6
7	7	7	7
8	8	8	8
9	9	9	9
show status like 'Handler_mrr_init';
Variable_name	Value
Handler_mrr_init	1
create temporary table t11 as 
select * from information_schema.global_status
where variable_name like 'rocksdb_num%' or variable_name='rocksdb_rows_read';
select 
variable_name, 
t11.variable_value - t10.variable_value as DIFF 
from 
t10 join t11 using (VARIABLE_NAME)
having
DIFF>0;
variable_name	DIFF
ROCKSDB_ROWS_READ	20
ROCKSDB_NUMBER_DB_NEXT	10
ROCKSDB_NUMBER_DB_NEXT_FOUND	9
ROCKSDB_NUMBER_DB_SEEK	1
ROCKSDB_NUMBER_DB_SEEK_FOUND	1
ROCKSDB_NUMBER_MULTIGET_BYTES_READ	370
ROCKSDB_NUMBER_MULTIGET_GET	1
ROCKSDB_NUMBER_MULTIGET_KEYS_READ	10
drop table t10, t11;
# This will use MRR:
explain select * from t2 where pk in (1,2,3,4,5);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	range	PRIMARY	PRIMARY	4	NULL	5	Using where; Using MRR
# Check how optimizer_switch flags effect it:
set optimizer_switch='mrr_cost_based=on';
# No MRR/BKA:
explain select * from t2,t0 where t2.pk=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t2	eq_ref	PRIMARY	PRIMARY	4	test.t0.a	1	NULL
explain select * from t2 where pk in (1,2,3,4,5);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	range	PRIMARY	PRIMARY	4	NULL	5	Using where
set optimizer_switch='mrr_cost_based=off,mrr=off';
# No MRR/BKA:
explain select * from t2,t0 where t2.pk=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t2	eq_ref	PRIMARY	PRIMARY	4	test.t0.a	1	NULL
explain select * from t2 where pk in (1,2,3,4,5);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	range	PRIMARY	PRIMARY	4	NULL	5	Using where
set optimizer_switch='mrr_cost_based=off,mrr=on';
# Have MRR/BKA:
explain select * from t2,t0 where t2.pk=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t2	eq_ref	PRIMARY	PRIMARY	4	test.t0.a	1	Using join buffer (Batched Key Access)
explain select * from t2 where pk in (1,2,3,4,5);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	range	PRIMARY	PRIMARY	4	NULL	5	Using where; Using MRR
# This will not use MRR, as one of the ranges is a non-singlepoint:
explain select * from t2 where pk in (1,2,3,4,5) or pk between 6 and 8;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	range	PRIMARY	PRIMARY	4	NULL	6	Using where
create table t3 (
pk1 int,
pk2 int,
col1 int,
filler char(32),
primary key(pk1, pk2),
key(col1)
) engine=rocksdb;
insert into t3 select a,a, a,a from t1;
set global rocksdb_force_flush_memtable_now=1;
# This must not use BKA as it uses key prefix:
explain 
select * from t3,t0 where t3.pk1=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t3	ref	PRIMARY	PRIMARY	4	test.t0.a	2	NULL
# This will use BKA as it uses full key:
explain 
select * from t3,t0 where t3.pk1=t0.a and t3.pk2=t0.a+1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t3	eq_ref	PRIMARY	PRIMARY	8	test.t0.a,func	1	Using where; Using join buffer (Batched Key Access)
# This will use MRR as it uses full key:
explain select * from t3 where pk1 in (1,2,3,4,5) and pk2 in (3,4,5);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t3	range	PRIMARY	PRIMARY	8	NULL	15	Using where; Using MRR
# This will not use MRR as there are non-singlepoint ranges:
explain select * from t3 where (pk1 in (1,2,4,5) and pk2 in (4,5)) or pk1=3;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t3	range	PRIMARY	PRIMARY	8	NULL	9	Using where
# Due to HA_MRR_SUPPORT_SORTED, the following will use MRR, and not require filesort:
explain select * from t3 where pk1 in (1,2,3,4,5) and pk2 in (3,4,5) order by pk1, pk2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t3	range	PRIMARY	PRIMARY	8	NULL	15	Using where; Using MRR
# Test for lookups returning nothing
delete from t2 where pk in (3,5,7,9,10) or pk between 100 and 200;
explain
select * from t2,t0 where t2.pk=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t2	eq_ref	PRIMARY	PRIMARY	4	test.t0.a	1	Using join buffer (Batched Key Access)
select * from t2,t0 where t2.pk=t0.a;
pk	col1	filler	a
0	0	0	0
1	1	1	1
2	2	2	2
4	4	4	4
6	6	6	6
8	8	8	8
# Test for a scan returning nothing at all:
explain
select * from t2,t0 where t2.pk=t0.a+500100;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	NULL
1	SIMPLE	t2	eq_ref	PRIMARY	PRIMARY	4	func	1	Using where; Using join buffer (Batched Key Access)
select * from t2,t0 where t2.pk=t0.a+500100;
pk	col1	filler	a
# Make the scan finish before it has returned all the data:
select * from t2,t0 where t2.pk=t0.a limit 1;
pk	col1	filler	a
0	0	0	0
# Re-execute MRR scan in a subquery:
create table t4(a int primary key);
insert into t4 values (4),(6),(8);
explain
select a ,
(select concat(t0.a,'-',t2.pk) 
from t2,t0 
where t2.pk=t0.a and t2.col1>=t4.a
limit 1) as SUBQ
from t4;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t4	index	NULL	PRIMARY	4	NULL	#	Using index
2	DEPENDENT SUBQUERY	t0	ALL	NULL	NULL	NULL	NULL	#	Using where
2	DEPENDENT SUBQUERY	t2	eq_ref	PRIMARY	PRIMARY	4	test.t0.a	#	Using where; Using join buffer (Batched Key Access)
select a ,
(select concat(t0.a,'-',t2.pk) 
from t2,t0 
where t2.pk=t0.a and t2.col1>=t4.a
limit 1) as SUBQ
from t4;
a	SUBQ
4	4-4
6	6-6
8	8-8
#
# MRR/BKA on secondary keys
#
# This won't use BKA because it's an index-only scan:
explain
select t3.col1 from t3,t0 where t3.col1=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t3	ref	col1	col1	5	test.t0.a	4	Using index
# This will use BKA: 
explain
select * from t3,t0 where t3.col1=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t3	ref	col1	col1	5	test.t0.a	4	Using join buffer (Batched Key Access)
select * from t3,t0 where t3.col1=t0.a;
pk1	pk2	col1	filler	a
0	0	0	0	0
1	1	1	1	1
2	2	2	2	2
3	3	3	3	3
4	4	4	4	4
5	5	5	5	5
6	6	6	6	6
7	7	7	7	7
8	8	8	8	8
9	9	9	9	9
# Now, run the query and check the counters
create temporary table t11 as
select * from information_schema.global_status 
where variable_name like 'rocksdb_num%' or variable_name='rocksdb_rows_read';
select * from t3,t0 where t3.col1=t0.a;
pk1	pk2	col1	filler	a
0	0	0	0	0
1	1	1	1	1
2	2	2	2	2
3	3	3	3	3
4	4	4	4	4
5	5	5	5	5
6	6	6	6	6
7	7	7	7	7
8	8	8	8	8
9	9	9	9	9
create temporary table t12 as
select * from information_schema.global_status 
where variable_name like 'rocksdb_num%' or variable_name='rocksdb_rows_read';
select 
variable_name, 
t12.variable_value - t11.variable_value as DIFF 
from 
t11 join t12 using (VARIABLE_NAME)
having
DIFF>0;
variable_name	DIFF
ROCKSDB_ROWS_READ	20
ROCKSDB_NUMBER_DB_NEXT	20
ROCKSDB_NUMBER_DB_NEXT_FOUND	9
ROCKSDB_NUMBER_DB_SEEK	11
ROCKSDB_NUMBER_DB_SEEK_FOUND	11
ROCKSDB_NUMBER_MULTIGET_BYTES_READ	370
ROCKSDB_NUMBER_MULTIGET_GET	1
ROCKSDB_NUMBER_MULTIGET_KEYS_READ	10
drop table t11,t12;
#
# Check the userstat counters
#
set optimizer_switch='mrr=off';
flush statistics;
select * from t3,t0 where t3.col1=t0.a;
pk1	pk2	col1	filler	a
0	0	0	0	0
1	1	1	1	1
2	2	2	2	2
3	3	3	3	3
4	4	4	4	4
5	5	5	5	5
6	6	6	6	6
7	7	7	7	7
8	8	8	8	8
9	9	9	9	9
# COUNTERS FOR: mrr=OFF, secondary index lookups
select
rows_inserted, rows_updated, rows_deleted, rows_read, rows_requested
from
information_schema.table_statistics
where table_name = 't3';
rows_inserted	0
rows_updated	0
rows_deleted	0
rows_read	10
rows_requested	20
set optimizer_switch='mrr=on';
flush statistics;
select * from t3,t0 where t3.col1=t0.a;
pk1	pk2	col1	filler	a
0	0	0	0	0
1	1	1	1	1
2	2	2	2	2
3	3	3	3	3
4	4	4	4	4
5	5	5	5	5
6	6	6	6	6
7	7	7	7	7
8	8	8	8	8
9	9	9	9	9
# COUNTERS FOR: mrr=ON, secondary index lookups
select
rows_inserted, rows_updated, rows_deleted, rows_read, rows_requested
from
information_schema.table_statistics
where table_name = 't3';
rows_inserted	0
rows_updated	0
rows_deleted	0
rows_read	10
rows_requested	20
set optimizer_switch='mrr=off';
flush statistics;
explain
select * from t3,t0 where t3.pk1=t0.a and t3.pk2=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t3	eq_ref	PRIMARY	PRIMARY	8	test.t0.a,test.t0.a	1	NULL
select * from t3,t0 where t3.pk1=t0.a and t3.pk2=t0.a;
pk1	pk2	col1	filler	a
0	0	0	0	0
1	1	1	1	1
2	2	2	2	2
3	3	3	3	3
4	4	4	4	4
5	5	5	5	5
6	6	6	6	6
7	7	7	7	7
8	8	8	8	8
9	9	9	9	9
# COUNTERS FOR: mrr=OFF, primary index lookups
select
rows_inserted, rows_updated, rows_deleted, rows_read, rows_requested
from
information_schema.table_statistics
where table_name = 't3';
rows_inserted	0
rows_updated	0
rows_deleted	0
rows_read	10
rows_requested	10
set optimizer_switch='mrr=on';
flush statistics;
explain
select * from t3,t0 where t3.pk1=t0.a and t3.pk2=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t3	eq_ref	PRIMARY	PRIMARY	8	test.t0.a,test.t0.a	1	Using join buffer (Batched Key Access)
select * from t3,t0 where t3.pk1=t0.a and t3.pk2=t0.a;
pk1	pk2	col1	filler	a
0	0	0	0	0
1	1	1	1	1
2	2	2	2	2
3	3	3	3	3
4	4	4	4	4
5	5	5	5	5
6	6	6	6	6
7	7	7	7	7
8	8	8	8	8
9	9	9	9	9
# COUNTERS FOR: mrr=ON, primary index lookups
select
rows_inserted, rows_updated, rows_deleted, rows_read, rows_requested
from
information_schema.table_statistics
where table_name = 't3';
rows_inserted	0
rows_updated	0
rows_deleted	0
rows_read	10
rows_requested	10
#
# Check how the counters are incremented when SQL
# layer doesn't read all of the MultiGet results
#
create table t20 (a int);
insert into t20 values (1);
set global rocksdb_force_flush_memtable_now=1;
explain
select a, a+20 in (select t2.filler from t2,t0 where t2.pk=t0.a+20) from t20;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t20	ALL	NULL	NULL	NULL	NULL	1	NULL
2	DEPENDENT SUBQUERY	t0	ALL	NULL	NULL	NULL	NULL	10	NULL
2	DEPENDENT SUBQUERY	t2	eq_ref	PRIMARY	PRIMARY	4	func	1	Using where; Using join buffer (Batched Key Access)
create temporary table t10 as 
select * from information_schema.global_status
where variable_name like 'rocksdb_num%' or variable_name='rocksdb_rows_read';
flush statistics;
select a, a+20 in (select t2.filler from t2,t0 where t2.pk=t0.a+20) from t20;
a	a+20 in (select t2.filler from t2,t0 where t2.pk=t0.a+20)
1	1
create temporary table t11 as 
select * from information_schema.global_status
where variable_name like 'rocksdb_num%' or variable_name='rocksdb_rows_read';
# The below shows ROCKSDB_ROWS_READ=13. 
#  1 is from table t20
# 10 are from table t0, BKA reads all its rows into buffer
#  2 are from table t2.  BKA code reads two rows before it figures that
#    the subquery has a match and no more rows are needed.
#    (note that MultiGet call has read all 10 rows, but SQL layer only has read 2)
select 
variable_name, 
t11.variable_value - t10.variable_value as DIFF 
from 
t10 join t11 using (VARIABLE_NAME)
having
DIFF>0;
variable_name	DIFF
ROCKSDB_ROWS_READ	13
ROCKSDB_NUMBER_DB_NEXT	11
ROCKSDB_NUMBER_DB_NEXT_FOUND	9
ROCKSDB_NUMBER_DB_SEEK	2
ROCKSDB_NUMBER_DB_SEEK_FOUND	2
ROCKSDB_NUMBER_MULTIGET_BYTES_READ	370
ROCKSDB_NUMBER_MULTIGET_GET	1
ROCKSDB_NUMBER_MULTIGET_KEYS_READ	10
drop table t10, t11;
# COUNTERS FOR: mrr=ON, primary index lookups
select rows_read, rows_requested
from information_schema.table_statistics
where table_name = 't2';
rows_read	10
rows_requested	10
drop table t20;
#
# Check how MRR works without BKA
#
explain select t3.col1 from t3 where t3.col1=20 or t3.col1 between 25 and 28;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t3	range	col1	col1	5	NULL	2	Using where; Using index
# This will use MRR:
explain 
select * from t3 where t3.col1=20 or t3.col1 between 25 and 28;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t3	range	col1	col1	5	NULL	2	Using index condition; Using MRR
select * from t3 where t3.col1=20 or t3.col1 between 25 and 28;
pk1	pk2	col1	filler
20	20	20	20
25	25	25	25
26	26	26	26
27	27	27	27
28	28	28	28
# Check if Index Condition Pushdown works
explain 
select * from t3 where (t3.col1=20 or t3.col1 between 25 and 28) and mod(t3.col1,2)=0;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t3	range	col1	col1	5	NULL	2	Using index condition; Using MRR
select * from t3 where (t3.col1=20 or t3.col1 between 25 and 28) and mod(t3.col1,2)=0;
pk1	pk2	col1	filler
20	20	20	20
26	26	26	26
28	28	28	28
select * from t3 use index() where (t3.col1=20 or t3.col1 between 25 and 28) and mod(t3.col1,2)=0;
pk1	pk2	col1	filler
20	20	20	20
26	26	26	26
28	28	28	28
explain
select pk1,pk2,col1, filler,mod(t3.col1,2) from t3
where (t3.col1=20 or t3.col1 between 25 and 28) and mod(t3.col1,2)=0;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t3	range	col1	col1	5	NULL	2	Using index condition; Using MRR
select pk1,pk2,col1, filler,mod(t3.col1,2) from t3
where (t3.col1=20 or t3.col1 between 25 and 28) and mod(t3.col1,2)=0;
pk1	pk2	col1	filler	mod(t3.col1,2)
20	20	20	20	0
26	26	26	26	0
28	28	28	28	0
#
# Test for BKA's variant of Index Condition Pushdown. With BKA,
# pushed index conditions that refer to preceding tables are 
# handled in a special way because there's no clear concept of 
# "current row" for the preceding table(s)
#
explain
select * from t0,t3 where t3.col1=t0.a and mod(t3.pk2,2)=t0.a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t3	ref	col1	col1	5	test.t0.a	4	Using index condition; Using join buffer (Batched Key Access)
select * from t0,t3 where t3.col1=t0.a and mod(t3.pk2,2)=t0.a;
a	pk1	pk2	col1	filler
0	0	0	0	0
1	1	1	1	1
set optimizer_switch='mrr=off';
select * from t0,t3 where t3.col1=t0.a and mod(t3.pk2,2)=t0.a;
a	pk1	pk2	col1	filler
0	0	0	0	0
1	1	1	1	1
set optimizer_switch='mrr=on';
#
# A query which has RANGE_SEQ_IF::skip_record != nullptr.
#
# MultiGet/MRR does not invoke skip_record() as it would not produce
# much speedup.
#
insert into t3 select 10000+a, 10000+a, a, 'duplicate-match' from t1;
delete from t3 where col1 in (3,5);
explain
select * from t0 left join t3 on t3.col1=t0.a where t3.pk1 is null;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	NULL
1	SIMPLE	t3	ref	col1	col1	5	test.t0.a	4	Using where; Not exists; Using join buffer (Batched Key Access)
select * from t0 left join t3 on t3.col1=t0.a where t3.pk1 is null;
a	pk1	pk2	col1	filler
3	NULL	NULL	NULL	NULL
5	NULL	NULL	NULL	NULL
set optimizer_switch='mrr=off';
select * from t0 left join t3 on t3.col1=t0.a where t3.pk1 is null;
a	pk1	pk2	col1	filler
3	NULL	NULL	NULL	NULL
5	NULL	NULL	NULL	NULL
set optimizer_switch='mrr=on';
explain
select * from t0 where t0.a in (select t3.col1 from t3 where char_length(t3.filler)<30);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	10	Using where
1	SIMPLE	t3	ref	col1	col1	5	test.t0.a	4	Using where; FirstMatch(t0); Using join buffer (Batched Key Access)
select * from t0 where t0.a in (select t3.col1 from t3 where char_length(t3.filler)<30);
a
0
1
2
4
6
7
8
9
drop table t0,t1,t2,t3,t4;
#
# Multi-keypart testcase
#
create table t0(a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
CREATE TABLE t2 (
id bigint(20) unsigned NOT NULL DEFAULT '0',
type tinyint(3) unsigned NOT NULL DEFAULT '0',
c1 int(10) unsigned NOT NULL DEFAULT '0',
c2 int(10) unsigned NOT NULL DEFAULT '0',
time_updated int(10) unsigned NOT NULL DEFAULT '0',
id2 bigint(20) unsigned NOT NULL DEFAULT '0',
c3 int(10) unsigned NOT NULL DEFAULT '0',
c_id bigint(20) unsigned NOT NULL DEFAULT '0',
a_id bigint(20) unsigned NOT NULL DEFAULT '0',
PRIMARY KEY (id,`type`),
KEY time_updated (time_updated),
KEY id2 (id2),
KEY a_idx (a_id),
KEY c_a_idx (c_id,`a_id`)
) ENGINE=ROCKSDB DEFAULT CHARSET=latin1;
insert into t2 (id, type, id2, time_updated)
select a, 1, 1, 1565888298 
from t0;
insert into t2 (id, type, id2, time_updated)
select a, 2, 2, 1565888298 
from t0;
set optimizer_trace=1;
# The following should have type=range, and "Using MRR":
explain
SELECT 
id2, type, SUM(c1), SUM(c2) 
FROM t2 force index (id2) 
WHERE 
id2 IN (1) AND 
time_updated > 1565888297 AND 
time_updated <= UNIX_TIMESTAMP() 
GROUP BY id2, type;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	range	id2	id2	8	NULL	#	Using index condition; Using where; Using MRR; Using temporary; Using filesort
select 
MID(trace, locate('attached_conditions_computation', trace), 360) 
as TRACE_FRAGMENT
from
information_schema.optimizer_trace;
TRACE_FRAGMENT
attached_conditions_computation": [
                {
                  "access_type_changed": {
                    "table": "`t2` FORCE INDEX (`id2`)",
                    "index": "id2",
                    "old_type": "ref",
                    "new_type": "range",
                    "cause": "uses_mrr"
                  }
                }
            
set optimizer_trace=0;
drop table t0, t2;
#
# Test for the "fallback to default MRR implementation if SQL layer
# requests the sorted mode". 
#
create table t0(a int primary key);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (kp1 int, kp2 int, kp3 int, col1 int, key (kp1, kp2, kp3));
insert into t1 select A.a, B.a, C.a, 123456 from t0 A, t0 B, t0 C;
set global rocksdb_force_flush_memtable_now=1;
analyze table t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
explain
select * from t1 where kp1=1 order by kp2 limit 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	kp1	kp1	5	NULL	#	Using index condition
select * from t1 where kp1=1 order by kp2 limit 10;
kp1	kp2	kp3	col1
1	0	0	123456
1	0	1	123456
1	0	2	123456
1	0	3	123456
1	0	4	123456
1	0	5	123456
1	0	6	123456
1	0	7	123456
1	0	8	123456
1	0	9	123456
drop table t0, t1;
set optimizer_switch=@save_optimizer_switch;
