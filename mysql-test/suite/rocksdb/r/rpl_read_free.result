include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
drop table if exists t1;
create procedure save_read_stats()
begin
select rows_requested into @rq from information_schema.table_statistics
where table_schema=database() and table_name='t1';
select variable_value into @rr from information_schema.global_status
where variable_name='rocksdb_rows_read';
select variable_value into @ru from information_schema.global_status
where variable_name='rocksdb_rows_updated';
select variable_value into @rd from information_schema.global_status
where variable_name='rocksdb_rows_deleted';
end//
create procedure get_read_stats()
begin
select rows_requested - @rq as rows_requested from
information_schema.table_statistics
where table_schema=database() and table_name='t1';
select variable_value - @rr as rows_read from
information_schema.global_status
where variable_name='rocksdb_rows_read';
select variable_value - @ru as rows_updated from
information_schema.global_status
where variable_name='rocksdb_rows_updated';
select variable_value - @rd as rows_deleted from
information_schema.global_status
where variable_name='rocksdb_rows_deleted';
end//
create table t1 (id int primary key, value int);
insert into t1 values (1,1), (2,2), (3,3), (4,4);
include/sync_slave_sql_with_master.inc

# regular update/delete. With rpl_lookup_rows=false, rocksdb_rows_read does not increase on slaves

call save_read_stats();
update t1 set value=value+1 where id=1;
delete from t1 where id=4;
select * from t1;
id	value
1	2
2	2
3	3
include/sync_slave_sql_with_master.inc
call get_read_stats();
rows_requested
0
rows_read
0
rows_updated
1
rows_deleted
1
select * from t1;
id	value
1	2
2	2
3	3

# "rpl_lookup_rows=false" makes "row not found error" not happen anymore

include/stop_slave.inc
delete from t1 where id in (2, 3);
include/start_slave.inc
call save_read_stats();
update t1 set value=value+1 where id=3;
delete from t1 where id=2;
select * from t1;
id	value
1	2
3	4
include/sync_slave_sql_with_master.inc
call get_read_stats();
rows_requested
0
rows_read
0
rows_updated
1
rows_deleted
1
select * from t1;
id	value
1	2
3	4

## tables without primary key -- read free replication should be disabled


#no index

drop table t1;
create table t1 (c1 int, c2 int);
insert into t1 values (1,1), (2,2),(3,3),(4,4),(5,5);
include/sync_slave_sql_with_master.inc
call save_read_stats();
update t1 set c2=100 where c1=3;
delete from t1 where c1 <= 2;
include/sync_slave_sql_with_master.inc
call get_read_stats();
rows_requested
5
rows_read
5
rows_updated
1
rows_deleted
2
select * from t1;
c1	c2
3	100
4	4
5	5

#secondary index only

drop table t1;
create table t1 (c1 int, c2 int, index i(c1));
insert into t1 values (1,1), (2,2),(3,3),(4,4),(5,5);
include/sync_slave_sql_with_master.inc
call save_read_stats();
update t1 set c2=100 where c1=3;
delete from t1 where c1 <= 2;
include/sync_slave_sql_with_master.inc
call get_read_stats();
rows_requested
3
rows_read
3
rows_updated
1
rows_deleted
2
select * from t1;
c1	c2
3	100
4	4
5	5

## large row operations -- primary key modification, secondary key modification

drop table t1;
create table t1 (id1 bigint, id2 bigint, c1 bigint, c2 bigint, c3 bigint, c4 bigint, c5 bigint, c6 bigint, c7 bigint, primary key (id1, id2), index i(c1, c2));
include/sync_slave_sql_with_master.inc
call save_read_stats();

#updating all seconary keys by 1

include/sync_slave_sql_with_master.inc
call get_read_stats();
rows_requested
0
rows_read
0
rows_updated
10000
rows_deleted
0
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',id1, id2,c1,c2,c3,c4,c5,c6,c7)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(PRIMARY);
cnt	crc
10000	1FC1F21C
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',c1,c2,id1,id2)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(i);
cnt	crc
10000	73F2DABE
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',id1, id2,c1,c2,c3,c4,c5,c6,c7)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(PRIMARY);
cnt	crc
10000	1FC1F21C
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',c1,c2,id1,id2)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(i);
cnt	crc
10000	73F2DABE

#updating all primary keys by 2

call save_read_stats();
include/sync_slave_sql_with_master.inc
call get_read_stats();
rows_requested
0
rows_read
0
rows_updated
10000
rows_deleted
0
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',id1, id2,c1,c2,c3,c4,c5,c6,c7)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(PRIMARY);
cnt	crc
10000	C3F3457C
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',c1,c2,id1,id2)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(i);
cnt	crc
10000	73F2DABE
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',id1, id2,c1,c2,c3,c4,c5,c6,c7)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(PRIMARY);
cnt	crc
10000	C3F3457C
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',c1,c2,id1,id2)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(i);
cnt	crc
10000	73F2DABE

#updating secondary keys after truncating t1 on slave

truncate table t1;
call save_read_stats();
update t1 set c2=c2+10;
include/sync_slave_sql_with_master.inc
call get_read_stats();
rows_requested
0
rows_read
0
rows_updated
10000
rows_deleted
0
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',id1, id2,c1,c2,c3,c4,c5,c6,c7)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(PRIMARY);
cnt	crc
10000	5970CE52
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',c1,c2,id1,id2)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(i);
cnt	crc
10000	6EF907D7
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',id1, id2,c1,c2,c3,c4,c5,c6,c7)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(PRIMARY);
cnt	crc
10000	5970CE52
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',c1,c2,id1,id2)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(i);
cnt	crc
10000	6EF907D7

#updating primary keys after truncating t1 on slave

truncate table t1;
call save_read_stats();
update t1 set id2=id2+10;
include/sync_slave_sql_with_master.inc
call get_read_stats();
rows_requested
0
rows_read
0
rows_updated
10000
rows_deleted
0
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',id1, id2,c1,c2,c3,c4,c5,c6,c7)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(PRIMARY);
cnt	crc
10000	BDEDD831
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',c1,c2,id1,id2)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(i);
cnt	crc
10000	18D9BE70
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',id1, id2,c1,c2,c3,c4,c5,c6,c7)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(PRIMARY);
cnt	crc
10000	BDEDD831
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',c1,c2,id1,id2)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(i);
cnt	crc
10000	18D9BE70

#deleting half rows

call save_read_stats();
delete from t1 where id1 <= 5000;
include/sync_slave_sql_with_master.inc
call get_read_stats();
rows_requested
0
rows_read
0
rows_updated
0
rows_deleted
5000
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',id1, id2,c1,c2,c3,c4,c5,c6,c7)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(PRIMARY);
cnt	crc
5000	8F6A52A1
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',c1,c2,id1,id2)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(i);
cnt	crc
5000	17B58F6
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',id1, id2,c1,c2,c3,c4,c5,c6,c7)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(PRIMARY);
cnt	crc
5000	8F6A52A1
select count(*) as cnt, CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#',c1,c2,id1,id2)) AS UNSIGNED)), 10, 16) AS crc FROM t1 FORCE INDEX(i);
cnt	crc
5000	17B58F6
drop table t1;
drop procedure save_read_stats;
drop procedure get_read_stats;
include/rpl_end.inc
