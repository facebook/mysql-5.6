--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_rocksdb.inc

# Does SELECT...FOR UPDATE; SELECT ... FROM I_S.ROCKSDB_LOCKS which produces
#   different output in range locking mode.
--source suite/rocksdb/include/not_range_locking.inc


--echo ## Test creating dropping database of same name while ##
--echo ## keeping drop index thread suspended ##

create database db1;
use db1;
create table t1(a int primary key, b int, key(b)) engine=rocksdb;
insert into t1 values(999, 1), (1000, 2);

select * from information_schema.rocksdb_ddl order by table_schema, table_name;
BEGIN;
SELECT hex(a) FROM t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

set @@global.debug = @old_debug;
set @@global.debug = '+d,rocksdb_drop_idx';
drop database db1;

create database db1;
use db1;
create table t1(a int primary key, b int, key(b)) engine=rocksdb;
insert into t1 values(999, 1), (1001, 3);

select * from information_schema.rocksdb_ddl order by table_schema, table_name;
BEGIN;
SELECT hex(a) FROM t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

--echo ## Cleanup ##
drop table t1;
drop database db1;

--echo ## Wait for drop index thread to complete ##
set debug_sync = "now wait_for drop_idx_waiting";
set debug_sync = "now signal ready_to_drop_idx";
set debug_sync = "now wait_for drop_idx_done";

set debug_sync = "now wait_for drop_idx_waiting";
set debug_sync = "now signal ready_to_drop_idx";
set debug_sync = "now wait_for drop_idx_done";
set @@global.debug = @old_debug;

--echo ## Test creating dropping table of same name in database ##
create database db1;
use db1;
create table t1(a int primary key, b int, key(b)) engine=rocksdb;
insert into t1 values(999, 1), (1000, 2);

select * from information_schema.rocksdb_ddl order by table_schema, table_name;
BEGIN;
SELECT hex(a) FROM t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

drop table t1;
create table t1(a int primary key, b int, key(b)) engine=rocksdb;
insert into t1 values(999, 1), (1001, 3);

select * from information_schema.rocksdb_ddl order by table_schema, table_name;
BEGIN;
SELECT hex(a) FROM t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

--echo ## Cleanup ##
drop table t1;
drop database db1;

--echo ## Test index number reuse across different databases ##
create database db2;
use db2;
create table t1(a int primary key, b int, key(b)) engine=rocksdb;
insert into t1 values(999, 1), (1000, 2);

create database db3;
use db3;
create table t1(a int primary key, b int, key(b)) engine=rocksdb;
insert into t1 values(999, 1), (1000, 2);

select * from information_schema.rocksdb_ddl order by table_schema, table_name;

--echo ## Cleanup ##
drop database db2;
drop database db3;

--echo ## rename table having same index number to different database ##
create database db4;
use db4;
create table t1(a int primary key, b int, key(b)) engine=rocksdb;
insert into t1 values(999, 1), (1001, 3);

select * from information_schema.rocksdb_ddl order by table_schema, table_name;
BEGIN;
SELECT hex(a) FROM t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

create database db5;
use db5;
create table t1(a int primary key, b int, key(b)) engine=rocksdb;
insert into t1 values(999, 1), (1000, 2);

select * from information_schema.rocksdb_ddl order by table_schema, table_name;
BEGIN;
SELECT hex(a) FROM t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

rename table db5.t1 to db4.t2;

select * from db4.t1;
select * from db4.t2;

select * from information_schema.rocksdb_ddl order by table_schema, table_name;
use db4;
BEGIN;
SELECT hex(a) FROM t1 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

BEGIN;
SELECT hex(a) FROM t2 FOR UPDATE;
SELECT SUBSTRING(a.key,1,8), SUBSTRING(a.key,9,8) FROM information_schema.rocksdb_locks AS a ORDER BY a.key;
ROLLBACK;

--echo ## Cleanup ##
drop database db4;
drop database db5;
