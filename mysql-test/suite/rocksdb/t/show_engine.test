--source include/have_rocksdb.inc

#
# SHOW ENGINE STATUS command
# Checking that the command doesn't produce an error.
# If it starts producing an actual result, the result file
# will need to be updated, and possibly masked.

--disable_warnings
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
DROP TABLE IF EXISTS t3;
DROP TABLE IF EXISTS t4;
--enable_warnings

CREATE TABLE t1 (i INT, PRIMARY KEY (i) COMMENT 'cf_t1') ENGINE = ROCKSDB;
CREATE TABLE t2 (j INT, PRIMARY KEY (j) COMMENT 'rev:cf_t2') ENGINE = ROCKSDB;
CREATE TABLE t3 (k INT, PRIMARY KEY (k) COMMENT 'cf_t1') ENGINE = ROCKSDB;

# With partition based column family creation we now expect all the partitions
# to belong to a default column family because mapping wasn't specified in
# this case.
CREATE TABLE t4 (l INT, PRIMARY KEY (l) COMMENT 'cf_t4') ENGINE = ROCKSDB
    PARTITION BY KEY(l) PARTITIONS 4;

SET @save.rocksdb_max_background_jobs= @@global.rocksdb_max_background_jobs;
SET GLOBAL rocksdb_max_background_jobs= 1;

INSERT INTO t1 VALUES (1), (2), (3);
SELECT COUNT(*) FROM t1;

INSERT INTO t2 VALUES (1), (2), (3), (4);
SELECT COUNT(*) FROM t2;

INSERT INTO t4 VALUES (1), (2), (3), (4), (5);
SELECT COUNT(*) FROM t4;

SET GLOBAL rocksdb_force_flush_memtable_now=1;
SET GLOBAL rocksdb_compact_cf="cf_t1";
--replace_column 2 # 3 #
SHOW ENGINE rocksdb STATUS;

# Fetch data from information schema as well
--replace_column 3 #
SELECT * FROM INFORMATION_SCHEMA.ROCKSDB_CFSTATS;

--replace_column 2 #
SELECT * FROM INFORMATION_SCHEMA.ROCKSDB_DBSTATS;

--sorted_result
SELECT TABLE_SCHEMA, TABLE_NAME, PARTITION_NAME, COUNT(STAT_TYPE)
FROM INFORMATION_SCHEMA.ROCKSDB_PERF_CONTEXT
WHERE TABLE_SCHEMA = 'test'
GROUP BY TABLE_NAME, PARTITION_NAME;

--replace_column 3 #
SELECT * FROM INFORMATION_SCHEMA.ROCKSDB_CF_OPTIONS;
 
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
DROP TABLE t4;

SHOW ENGINE rocksdb MUTEX;
# For SHOW ALL MUTEX even the number of lines is volatile, so the result logging is disabled
--disable_result_log
SHOW ENGINE ALL MUTEX;
--enable_result_log

--source ../include/show_transaction_status.inc

START TRANSACTION WITH CONSISTENT SNAPSHOT;

--source ../include/show_transaction_status.inc

ROLLBACK;

# Check if explicit snapshots are correctly populated
START TRANSACTION WITH SHARED ROCKSDB SNAPSHOT;
--replace_column 2 # 3 #
SHOW ENGINE rocksdb STATUS;
ROLLBACK;
CREATE EXPLICIT rocksdb SNAPSHOT;
--replace_column 2 # 3 #
SHOW ENGINE rocksdb STATUS;
RELEASE EXPLICIT rocksdb SNAPSHOT;
--replace_column 2 # 3 #
SHOW ENGINE rocksdb STATUS;

PREPARE stmt1 FROM 'SHOW ENGINE ROCKSDB TRANSACTION STATUS';
--disable_result_log
EXECUTE stmt1;
--enable_result_log
--echo # EXECUTE PREPARE complete


# Restore old values
SET GLOBAL rocksdb_max_background_jobs= @save.rocksdb_max_background_jobs;
