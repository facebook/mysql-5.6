--source include/have_rocksdb.inc
--source include/have_debug_sync.inc

--enable_connect_log

create table t0(a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);

create table t1(a int);
insert into t1 select A.a + B.a* 10 + C.a * 100 from t0 A, t0 B, t0 C;

create table t2 (
  pk int primary key,
  col1 int,
  filler char(32)
) engine=rocksdb;

insert into t2 select a,a,a from t1;
set global rocksdb_force_flush_memtable_now=1;

set @save_optimizer_switch=@@optimizer_switch;
set optimizer_switch='mrr=on,mrr_cost_based=off,batched_key_access=on';

explain 
select * from t2,t0 where t2.pk=t0.a;

select variable_value into @n_multiget_orig 
from information_schema.global_status where variable_name='ROCKSDB_NUMBER_MULTIGET_GET';

set debug_sync = 'rocksdb.mrr_fill_buffer.loop SIGNAL target_ready WAIT_FOR simulate_kill';
send select * from t2,t0 where t2.pk=t0.a;

connect (con1,localhost,root,,);
set debug_sync = 'now WAIT_FOR target_ready';
set @a= (select id from information_schema.processlist where state='debug sync point: rocksdb.mrr_fill_buffer.loop');
send kill query @a;

# Note: it seems, just KILL QUERY will already cause debug sync point wait to
# finish.  Leave the signal anyway since it doesn't hurt
connect (con2,localhost,root,,);
set debug_sync = 'now SIGNAL simulate_kill';

connection con1;
reap;

connection default;
--error ER_QUERY_INTERRUPTED
reap;

--echo # Check that we didn't continue till the MultiGet() call. The following will
--echo # return 0:
select variable_value into @n_multiget_new
from information_schema.global_status where variable_name='ROCKSDB_NUMBER_MULTIGET_GET';

select @n_multiget_new - @n_multiget_orig;

set optimizer_switch=@save_optimizer_switch;
drop table t0,t1,t2;
