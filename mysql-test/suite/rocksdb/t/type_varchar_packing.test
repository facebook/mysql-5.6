# This MTR test checks for all single-level collations if they are space padded/no padded correctly.

--source include/have_rocksdb.inc

# remove multi-level collations
CREATE TABLE collations AS SELECT COLLATION_NAME, CHARACTER_SET_NAME, PAD_ATTRIBUTE FROM information_schema.COLLATIONS WHERE COLLATION_NAME NOT IN ("latin2_czech_cs", "cp1250_czech_cs", "utf8mb4_0900_as_cs", "utf8mb4_de_pb_0900_as_cs", "utf8mb4_is_0900_as_cs", "utf8mb4_lv_0900_as_cs", "utf8mb4_ro_0900_as_cs", "utf8mb4_sl_0900_as_cs", "utf8mb4_pl_0900_as_cs", "utf8mb4_et_0900_as_cs", "utf8mb4_es_0900_as_cs", "utf8mb4_sv_0900_as_cs", "utf8mb4_tr_0900_as_cs", "utf8mb4_cs_0900_as_cs", "utf8mb4_da_0900_as_cs", "utf8mb4_lt_0900_as_cs", "utf8mb4_sk_0900_as_cs", "utf8mb4_es_trad_0900_as_cs", "utf8mb4_la_0900_as_cs", "utf8mb4_eo_0900_as_cs", "utf8mb4_hu_0900_as_cs", "utf8mb4_hr_0900_as_cs", "utf8mb4_vi_0900_as_cs", "utf8mb4_ja_0900_as_cs", "utf8mb4_0900_as_ci", "utf8mb4_ru_0900_as_cs", "utf8mb4_zh_0900_as_cs", "utf8mb4_ja_0900_as_cs_ks") ORDER BY COLLATION_NAME;

--let $i=1
--let $collate=query_get_value(select * from collations, COLLATION_NAME, $i)
while ($collate != 'No such row')
{
  --let $charset=query_get_value(select * from collations, CHARACTER_SET_NAME, $i)
  --let $pad_type=query_get_value(select * from collations, PAD_ATTRIBUTE, $i)
  --echo # Testing character set "$charset" collation "$collate" padding "$pad_type"
  --let table_name=t_$charset
  if ($pad_type == "PAD SPACE")
  {
    --eval CREATE TABLE $table_name (pk_varchar VARCHAR(64), pk_char CHAR(64), d_varchar VARCHAR(64), d_char CHAR(64), PRIMARY KEY(pk_varchar, pk_char)) ENGINE=RocksDB CHARSET $charset COLLATE $collate
    --eval INSERT INTO $table_name VALUES('a ', 'a ', 'a ', 'a ')
    --error ER_DUP_ENTRY
    --eval INSERT INTO $table_name VALUES ('a', 'a', 'a', 'a')
    --eval INSERT INTO $table_name VALUES('b  ', 'b  ', 'b  ', 'b  ');
    --error ER_DUP_ENTRY
    --eval INSERT INTO $table_name VALUES('b', 'b', 'b', 'b')
    --eval INSERT INTO $table_name VALUES('a\t', 'a\t', 'a\t', 'a\t')
    --eval INSERT INTO $table_name VALUES('a \t', 'a \t', 'a \t', 'a \t')
    --error ER_DUP_ENTRY
    --eval INSERT INTO $table_name VALUES('a          ', 'a          ', 'a          ', 'a          ')
    --eval INSERT INTO $table_name VALUES('c          ', 'c          ', 'c          ', 'c          ')
  }
  if ($pad_type == "NO PAD")
  {
    if ($charset == "binary")
    {
      --eval CREATE TABLE $table_name (pk_varchar VARBINARY(64), pk_char BINARY(64), d_varchar VARBINARY(64), d_char BINARY(64), PRIMARY KEY(pk_varchar, pk_char)) ENGINE=RocksDB
    }
    if ($charset != "binary")
    {
      --eval CREATE TABLE $table_name (pk_varchar VARCHAR(64), pk_char CHAR(64), d_varchar VARCHAR(64), d_char CHAR(64), PRIMARY KEY(pk_varchar, pk_char)) ENGINE=RocksDB CHARSET $charset COLLATE $collate
    }
    --eval INSERT INTO $table_name VALUES('a ', 'a ', 'a ', 'a ')
    --eval INSERT INTO $table_name VALUES ('a', 'a', 'a', 'a')
    --eval INSERT INTO $table_name VALUES('b  ', 'b  ', 'b  ', 'b  ');
    --eval INSERT INTO $table_name VALUES('b', 'b', 'b', 'b')
    --eval INSERT INTO $table_name VALUES('a\t', 'a\t', 'a\t', 'a\t')
    --eval INSERT INTO $table_name VALUES('a \t', 'a \t', 'a \t', 'a \t')
    --eval INSERT INTO $table_name VALUES('a          ', 'a          ', 'a          ', 'a          ')
  }

  --eval SELECT pk_varchar, length(pk_varchar), hex(pk_varchar), pk_char, length(pk_char), hex(pk_char), d_varchar, length(d_varchar), hex(d_varchar), d_char, length(d_char), hex(d_char) FROM $table_name
  --eval DROP TABLE $table_name

  --inc $i
  --let $collate=query_get_value(select * from collations, COLLATION_NAME, $i)
}

DROP TABLE collations;
