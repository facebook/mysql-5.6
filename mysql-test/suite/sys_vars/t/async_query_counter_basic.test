###############################################################################
# Variable Name: async_query_counter
# Scope: global
# Access Type: dynamic
# Data Type: boolean
#
# Description: Test case for checking the behavior of dynamic system variable
#              "async_query_counter", specifically regarding:
#              - Scope & access type
#              - Valid & default value
#              - Invalid values
#              - Required privileges
#
###############################################################################

--source include/count_sessions.inc

# Save initial value
SET @saved_async_query_counter = @@global.async_query_counter;

#
# Scope: Global only
#
SELECT COUNT(@@GLOBAL.async_query_counter);

--error ER_INCORRECT_GLOBAL_LOCAL_VAR
SELECT COUNT(@@SESSION.async_query_counter);

SELECT VARIABLE_NAME FROM performance_schema.global_variables WHERE VARIABLE_NAME = 'async_query_counter';
SELECT VARIABLE_NAME FROM performance_schema.session_variables WHERE VARIABLE_NAME = 'async_query_counter';

#
# Access Type: Dynamic
#
SET GLOBAL async_query_counter = ON;
--let $assert_text = 'async_query_counter is a dynamic variable'
--let $assert_cond = "[SELECT @@GLOBAL.async_query_counter]" = "1"
--source include/assert.inc

#
# Valid values and Default value
#
SET GLOBAL async_query_counter = OFF;
--let $assert_text = 'async_query_counter should be OFF'
--let $assert_cond = "[SELECT @@GLOBAL.async_query_counter]" = "0"
--source include/assert.inc

SET GLOBAL async_query_counter = ON;
--let $assert_text = 'async_query_counter should be ON'
--let $assert_cond = "[SELECT @@GLOBAL.async_query_counter]" = "1"
--source include/assert.inc

SET GLOBAL async_query_counter = 0;
--let $assert_text = 'async_query_counter should be OFF'
--let $assert_cond = "[SELECT @@GLOBAL.async_query_counter]" = "0"
--source include/assert.inc

SET GLOBAL async_query_counter = 1;
--let $assert_text = 'async_query_counter should be ON'
--let $assert_cond = "[SELECT @@GLOBAL.async_query_counter]" = "1"
--source include/assert.inc

SET GLOBAL async_query_counter = DEFAULT;
--let $assert_text = 'async_query_counter should be OFF'
--let $assert_cond = "[SELECT @@GLOBAL.async_query_counter]" = "0"
--source include/assert.inc

#
# Invalid values
#
--error ER_WRONG_VALUE_FOR_VAR
SET GLOBAL async_query_counter = NULL;

--error ER_WRONG_VALUE_FOR_VAR
SET GLOBAL async_query_counter = '';

--error ER_WRONG_VALUE_FOR_VAR
SET GLOBAL async_query_counter = -1;

--error ER_WRONG_TYPE_FOR_VAR
SET GLOBAL async_query_counter = 1.0;

--error ER_WRONG_VALUE_FOR_VAR
SET GLOBAL async_query_counter = 'GARBAGE';

--error ER_WRONG_VALUE_FOR_VAR
SET GLOBAL async_query_counter = 2;

--echo Expect value still set to "OFF"
SELECT @@global.async_query_counter;

#
# Privileges
#

CREATE USER user1;
--connect(conn_user1,localhost,user1,,)

--Error ER_SPECIFIC_ACCESS_DENIED_ERROR
SET GLOBAL async_query_counter = ON;

--connection default
GRANT SYSTEM_VARIABLES_ADMIN ON *.* TO user1@'%';
--connection conn_user1
SET GLOBAL async_query_counter = ON;

--connection default
REVOKE SYSTEM_VARIABLES_ADMIN ON *.* FROM user1@'%';
--connection conn_user1
# async_query_counter_ADMIN is not enough
--Error ER_SPECIFIC_ACCESS_DENIED_ERROR
SET GLOBAL async_query_counter = OFF;

--connection default
--disconnect conn_user1
DROP USER user1;

# Clean up
SET GLOBAL async_query_counter = @saved_async_query_counter;

--source include/wait_until_count_sessions.inc
