--source include/master-slave.inc
connection master;

################################################################################
###
### Test of document path of document type
###

--disable_warnings
drop table if exists t1, t2, t3, t4;
--enable_warnings

SET @start_allow_document_type = @@global.allow_document_type;
SELECT @start_allow_document_type;

################################################################################
###
### t1 and t2 : populate data
###

CREATE TABLE t1 (
       a int not null,
       b char (10) not null,
       doc document not null) engine=innodb;

insert into t1 values (1,'@1','{ "id":101, "name":"Alex", "phone":6507770001, "address":{ "houseNumber":1001, "streetName":"1st", "zipcode":98761, "state":"CA" }, "intstr":"1001", "dt":"1001" }');
insert into t1 values (2,'@2','{ "id":102, "name":"Bob", "phone":6507770002, "address":{ "houseNumber":1002, "streetName":"2nd", "zipcode":98762, "state":"AZ" }, "int64":2222222220123456789, "intstr":"1002", "dt":"0123456789ABCDEFGHIGKLMNOPQRSTUVWXYZ0123456789" }');
insert into t1 values (3,'@3','{ "id":103, "name":"Charlie", "phone":6507770003, "address":{ "houseNumber":1003, "streetName":"3rd", "zipcode":98763, "state":"NY" }, "double":3.333333, "dt":"2014-11-01" }');
insert into t1 values (4,'@1','{ "id":104, "name":"Don", "phone":6507770004, "address":{ "houseNumber":1004, "streetName":"4th", "zipcode":98764, "state":"WA" }, "Children":["Alex", "Bob", "Charlei"] }');
insert into t1 values (5,'@2','{ "id":105, "name":"Evan", "phone":6507770005, "address":{ "houseNumber":1005, "streetName":"5th", "zipcode":98765, "state":"WA" }, "dt":"2014-11-11 11:59:59" }');
insert into t1 values (8,'@1','{ "id":108, "address":{ "zipcode":98768 } }');
insert into t1 values (7,'@3','{ "id":107, "address":{ "zipcode":98767, "state":"NY" } }');
insert into t1 values (6,'@2','{ "id":106, "address":{ "zipcode":98766 } }');


CREATE TABLE t2 (
       a2 int not null,
       b2 char (10) not null,
       doc2 document not null) engine=innodb;

insert into t2 values (10,'@3','{ "id":105, "name":"Alex II", "phone":6507770001, "address":{ "houseNumber":1001, "streetName":"1st", "zipcode":98761, "state":"CA" } }');
insert into t2 values (8,'@1','{ "id":108, "name":"Bob II", "phone":6507770002, "address":{ "houseNumber":1002, "streetName":"2nd", "zipcode":98762, "state":"AZ" } }');
insert into t2 values (3,'@3','{ "id":104, "name":"Charlie II", "phone":6507770003, "address":{ "houseNumber":1003, "streetName":"3rd", "zipcode":98763, "state":"NY" } }');
insert into t2 values (5,'@2','{ "id":106, "name":"Don II", "phone":6507770004, "address":{ "houseNumber":1004, "streetName":"4th", "zipcode":98764, "state":"WA" }, "Children":["Alex", "Bob", "Charlei"] }');

################################################################################
###
### t3 : big values
###
### The max size is 1100 characters, which is greater than the default sort field length 1024
### so it will be truncated when it is the sorting key in order by clause
###


CREATE TABLE t3 (
       a int not null,
       b char (10) not null,
       doc document not null) engine=innodb;

insert into t3 values (3,'@3','{ "id":"3333", "name":"Charlie" }');
insert into t3 values (1,'@1','{ "id":"1", "name":"Alex" }');
insert into t3 values (4,'@4','{ "idname":"Don" }');

insert into t3 values (2,'@2','{ "id":"22", "name":"Bob" }');

################################################################################
###
### t4 : backtick quoted column name with special characters
###
### TODO: \t
###

CREATE TABLE t4 (
       `~!@#$%^&*()_+-=:;'"<>?,./\t` document not null) engine=innodb;

### \" is not allowed in json key
insert into t4 values ('{"k1":"v1"}');
insert into t4 values ('{"~!@#$%^&*()_+-=:;\'<>?,./":{"~!@#$%^&*()_+-=:;\'<>?,./":"v2"}}');
insert into t4 values ('{"k3":"v3"}');
insert into t4 values ('{"k4":"v4"}');

select `~!@#$%^&*()_+-=:;'"<>?,./\t`
from t4;

select `~!@#$%^&*()_+-=:;'"<>?,./\t`.`~!@#$%^&*()_+-=:;'<>?,./`.`~!@#$%^&*()_+-=:;'<>?,./`
from t4
where `~!@#$%^&*()_+-=:;'"<>?,./\t`.`~!@#$%^&*()_+-=:;'<>?,./`.`~!@#$%^&*()_+-=:;'<>?,./` like "v2";


################################################################################
###
### The original cases: database.table.field, table.field and .table.field
###

### Disable document type to make parser work as before
SET @@global.allow_document_type = false;
SELECT @@global.allow_document_type;

### The original cases 1: database.table.field
select test.t1.b from test.t1 where test.t1.a = 1;

### The original cases 2: table.field
select t1.doc from test.t1 where t1.a = 2;

### The original cases 3: .table.field
select .t1.doc from test.t1 where .t1.a = 4;


################################################################################
###
### When document type is disabled, all the new syntax will be treated as errors
###

--error ER_INVALID_FIELD_OR_REFERENCE
select test.t1.doc.address.houseNumber from t1 where t1.a = 3;

--error ER_INVALID_FIELD_OR_REFERENCE
select a from t1 where test.t1.doc.id = 102;

--error ER_INVALID_FIELD_OR_REFERENCE
select test.t1.doc.address.houseNumber from t1 where test.t1.doc.address.zipcode = 98762;

### Enable document type with the new parsing logic
SET @@global.allow_document_type = true;
SELECT @@global.allow_document_type;

### All the three original cases work as before
select test.t1.b from test.t1 where test.t1.a = 1;
select t1.doc from test.t1 where t1.a = 2;
select .t1.doc from test.t1 where .t1.a = 4;


################################################################################
###
### Invalid document path: using document path on a non-document column
###

### Disable document type to make parser work as before
SET @@global.allow_document_type = false;
SELECT @@global.allow_document_type;

--error ER_BAD_FIELD_ERROR
select b.k1 from t1;
--error ER_BAD_FIELD_ERROR
select b.k1.k2 from t1;
--error ER_INVALID_FIELD_OR_REFERENCE
select b.k1.k2.k3 from t1;

### Enable document type with the new parsing logic
SET @@global.allow_document_type = true;
SELECT @@global.allow_document_type;

## In SELECT
--error ER_BAD_FIELD_ERROR
select b.k1 from t1;
--error ER_BAD_FIELD_ERROR
select b.k1.k2 from t1;
--error ER_BAD_FIELD_ERROR
select b.k1.k2.k3 from t1;

## In WHERE
--error ER_BAD_FIELD_ERROR
select a from t1 where b.k1 = 100;
--error ER_BAD_FIELD_ERROR
select a from t1 where b.k1.k2 = 100;
--error ER_BAD_FIELD_ERROR
select a from t1 where b.k1.k2.k3 = 100;

## In ORDER BY
--error ER_BAD_FIELD_ERROR
select a from t1 order by b.k1;
--error ER_BAD_FIELD_ERROR
select a from t1 order by b.k1.k2 ;
--error ER_BAD_FIELD_ERROR
select a from t1 order by b.k1.k2.k3;

## In GROUP BY
--error ER_BAD_FIELD_ERROR
select count(*), a from t1 group by b.k1;
--error ER_BAD_FIELD_ERROR
select count(*), a from t1 group by b.k1.k2;
--error ER_BAD_FIELD_ERROR
select count(*), a from t1 group by b.k1.k2.k3;

## In HAVING
--error ER_BAD_FIELD_ERROR
select count(*), a from t1 group by a having b.k1 = 100;
--error ER_BAD_FIELD_ERROR
select count(*), a from t1 group by a having b.k1.k2 = 100;
--error ER_INVALID_FIELD_OR_REFERENCE
select count(*), a from t1 group by a having b.k1.k2.k3 = 100;

## In HAVING without GROUP BY then HAVING clause behaves like WHERE clause
--error ER_BAD_FIELD_ERROR
select a from t1 having b.k1 = 100;
--error ER_BAD_FIELD_ERROR
select a from t1 having b.k1.k2 = 100;
--error ER_INVALID_FIELD_OR_REFERENCE
select a from t1 having b.k1.k2.k3 = 100;

## In Functions
--error ER_BAD_FIELD_ERROR
select a from t1 where substr(b.k1, 1, 10) like 'abc';
--error ER_BAD_FIELD_ERROR
select a from t1 where substr(b.k1.k2, 1, 10) like 'abc';
--error ER_BAD_FIELD_ERROR
select a from t1 where substr(b.k1.k2.k3, 1, 10) like 'abc';

--error ER_BAD_FIELD_ERROR
select sum(b.k1) from t1 where a = 100;
--error ER_BAD_FIELD_ERROR
select sum(b.k1.k2) from t1 where a = 100;
--error ER_BAD_FIELD_ERROR
select sum(b.k1.k2.k3) from t1 where a = 100;


################################################################################
###
### Document partial update by document path is not supported yet
###

### When document type is disabled
SET @@global.allow_document_type = false;
SELECT @@global.allow_document_type;

--error ER_BAD_FIELD_ERROR
update t1 set t1.doc.id = 200 where a = 1;

### When document type is enabled
SET @@global.allow_document_type = true;
SELECT @@global.allow_document_type;

--error ER_DOCUMENT_PARTIAL_UPDATE_NOT_SUPPORTED_YET
update t1 set t1.doc.id = 200 where a = 1;

--error ER_DOCUMENT_PARTIAL_UPDATE_NOT_SUPPORTED_YET
update t1 set t1.doc.name = "Raymond" where a = 1;

--error ER_DOCUMENT_PARTIAL_UPDATE_NOT_SUPPORTED_YET
insert into t1 set a = 10, b = '@9', t1.doc.id = 200;

--disable_warnings ONCE
drop procedure if exists sp1;
create procedure sp1()
  update t1 set t1.doc.id = 200 where a = 1;
--error ER_DOCUMENT_PARTIAL_UPDATE_NOT_SUPPORTED_YET
call sp1();
drop procedure sp1;

--disable_warnings ONCE
drop procedure if exists sp2;
create procedure sp2()
  insert into t1 set a = 10, b = '@9', t1.doc.id = 200;
--error ER_DOCUMENT_PARTIAL_UPDATE_NOT_SUPPORTED_YET
call sp2();
drop procedure sp2;


################################################################################
###
### Document path with different types in SELECT clause
###

### Document path in SELECT clause: database.table.field.key1, in which key1 does not exist
### Expecting empty string
select test.t1.doc.NonExistent from t1 where t1.a = 4;

### Regular document field in SELECT clause: database.table.field
select test.t1.doc from t1 where t1.a = 3;

### Document path in SELECT clause: database.table.field.key1.key2 that points to an int16
select test.t1.doc.address.houseNumber from t1 where t1.a = 3;

### Document paths in SELECT clause: database.table.field.key1 that points to an int64
select test.t1.doc.int64 from t1 where t1.a = 2;

### Document paths in SELECT clause: database.table.field.key1 that points to an double
select test.t1.doc.double from t1 where t1.a = 3;

### Document paths in SELECT clause: database.table.field.key1 that points to an string
select test.t1.doc.name from t1 where t1.a = 3;

### Document paths in SELECT clause: database.table.field.key1.array_index that points to an string
### FBSon array index is 0-based
select test.t1.doc.Children.0 from t1 where t1.a = 4;
select test.t1.doc.Children.1 from t1 where t1.a = 4;
select test.t1.doc.Children.2 from t1 where t1.a = 4;

### Document paths in function in SELECT clause
select abs(test.t1.doc.double), abs(test.t1.doc.double - 3.333333) from t1 where a = 3;

### Document paths in SELECT clause: database.table.field.key1 that points to an JSON object
select test.t1.doc.address from t1 where t1.a = 3;

### Document paths in SELECT clause: database.table.field.key1 that points to an JSON array
select test.t1.doc.Children from t1 where t1.a = 4;

### Document paths in SELECT clause: table.field.key1 that needs right shift for one during fixing
select t1.doc.address.houseNumber from t1 where t1.a = 4;

### Document paths in SELECT clause: field.key1.key2 that needs right shift for two during fixing
select doc.address.houseNumber from t1 where t1.a = 4;


################################################################################
###
### Document paths with different types in WHERE clause
###

### Document paths in WHERE clause: database.table.field.key1, in which key1 does not exist
### Expecting empty result
select a from t1 where test.t1.doc.NonExistent = 102;

### Document paths in WHERE clause: database.table.field.key1 = int,
### the document paths value will be retrived as real
select a from t1 where test.t1.doc.id = 102;

### int64
select a from t1 where test.t1.doc.int64 = 2222222220123456789;

### Use document paths in function in WHERE clause
### Use threshold to deal with the precision issue when comparing two doubles
select a from t1 where abs(test.t1.doc.double - 3.333333) < 0.001;

### Same document paths appears in both SELECT and WHERE clause
select t1.doc.id from t1 where t1.doc.id > 101 and t1.doc.id < 104;

### string
select a from t1 where test.t1.doc.name like "Bob";

select a from t1 where substring(test.t1.doc.name, 1, 2) like "Bo";

### cast as unsigned
select a from t1 where cast(test.t1.doc.id as unsigned) = 102;

select a from t1 where cast(test.t1.doc.intstr as unsigned) = 1002;

### cast as char
select a from t1 where cast(test.t1.doc.id as char) like "102";

### cast as date
select test.t1.doc.dt from t1 where cast(test.t1.doc.dt as date) = cast('2014-11-01' as date);

### cast as datetime
select test.t1.doc.dt from t1 where cast(test.t1.doc.dt as datetime) = cast('2014-11-11 11:59:59' as datetime);

### cast as timestamp
select test.t1.doc.dt from t1 where cast(test.t1.doc.dt as time) = cast('2014-11-11 11:59:59' as time);

### Document path in both SELECT and WHERE clause: database.table.field.key1.key2
select test.t1.doc.address.houseNumber from t1 where test.t1.doc.address.zipcode = 98762;

### Document paths in WHERE clause for UPDATE statements
select t1.a, t1.b from t1 where doc.address.zipcode = 98761;
update t1 set t1.a = 101, t1.b = '@101' where doc.address.zipcode = 98761;
select t1.a, t1.b from t1 where doc.address.zipcode = 98761;
update t1 set t1.a = 1, t1.b = '@1' where doc.address.zipcode = 98761;
select t1.a, t1.b from t1 where doc.address.zipcode = 98761;


################################################################################
###
### Document paths with different types in ORDER BY clause
###

### Document paths in ORDER BY clause: database.table.field.key1, in which key1 does not exist
### the results won't be sorted
select a from t1 order by test.t1.doc.NonExistent;
select a from t1 order by cast(t1.doc.NonExistent as unsigned);

### use cast to make it sorted as unsigned
select test.t1.doc.id, a from t1 order by cast(test.t1.doc.id as unsigned);
select test.t1.doc.id, a from t1 order by cast(test.t1.doc.id as unsigned) desc;

select test.t1.doc.address.zipcode, a from t1 order by cast(test.t1.doc.address.zipcode as signed);
select test.t1.doc.address.zipcode, a from t1 order by cast(test.t1.doc.address.zipcode as char) desc;

### without cast to make it sorted as binary
select test.t1.doc.id, a from t1 order by test.t1.doc.id;
select test.t1.doc.id, a from t1 order by t1.doc.id desc;

### without cast to make it sorted as binary and big binary values will be truncated with warnings
select doc.id, a from t3 order by test.t3.doc.id;
show warnings;
select test.t3.doc.id, a from t3 order by t3.doc.id desc;
show warnings;

select test.t1.doc.address.zipcode, a from t1 order by test.t1.doc.address.zipcode;
select test.t1.doc.address.zipcode, a from t1 order by t1.doc.address.zipcode desc;


################################################################################
###
### Document paths with different types in GROUP BY clause
###
### TODO:
###
###   In GROUP BY clause
###     -- When using CAST, it always good
###     -- When using virutla field directly, it works but the results are not grouped
###
###   In HAVING clause
###     -- With or without CAST, it is always syntax errors
###


### cast to string : correct
select count(*), cast(test.t1.doc.address.state as char)
from t1
group by cast(test.t1.doc.address.state as char);

### use document paths directly : it works, but not grouped
#select count(*), test.t1.doc.address.state
#from t1
#group by test.t1.doc.address.state;

### cast to string : correct
select count(*) as total, test.t1.doc.address.state
from t1
group by cast(test.t1.doc.address.state as char)
having total > 1;

### use document paths directly : it works, but not grouped
#select count(*) as total, test.t1.doc.address.state
#from t1
#group by test.t1.doc.address.state
#having total > 1;

### syntax error: 1904: Invalid field or reference
#select count(*) as total, test.t1.doc.address.state
#from t1
#group by cast(test.t1.doc.address.state as char)
#having cast(test.t1.doc.address.state as char) like "NY";

### syntax error: 1904: Invalid field or reference
#select count(*) as total, test.t1.doc.address.state
#from t1
#group by test.t1.doc.address.state
#having test.t1.doc.address.state like "NY";

### correct
#select count(*) as total, b
#from t1
#group by b
#having b like "@2";

### correct
#select count(*) as total, b
#from t1
#group by b
#having total > 2;


################################################################################
###
### General cases with JOIN, ORDER BY, SUB QUERY, etc.
###


### left join with CAST on document path
select t1.a, t1.doc.address.zipcode, t2.a2, t2.doc2.address.zipcode
from t2 left join t1
on cast(t1.doc.address.zipcode as unsigned) = cast(t2.doc2.address.zipcode as unsigned);

### left join without CAST on document path
select t1.a, t1.doc.address.zipcode, t2.a2, t2.doc2.address.zipcode
from t1, t2
where t1.doc.address.zipcode like t2.doc2.address.zipcode;


### left join with CAST on document path with ORDER BY with CAST
select t1.a, t1.doc.address.zipcode, t2.a2, t2.doc2.address.zipcode
from t2 right join t1
on cast(t1.doc.address.zipcode as unsigned) = cast(t2.doc2.address.zipcode as unsigned)
order by cast(t1.doc.address.zipcode as unsigned) asc;


### left join without CAST on document path with ORDER BY without CAST
select t1.a, t1.doc.address.zipcode, t2.a2, t2.doc2.address.zipcode
from t2 right join t1
on t1.doc.address.zipcode like t2.doc2.address.zipcode
order by t1.doc.address.zipcode desc;


################################################################################
###
### General cases with JOIN, ORDER BY, SUB QUERY, etc.
###
### TODO:
###
###   SUB QUERY: without CAST, identical document field name in two tables will cause
###              conflicts on virutal fields from these tables, and alias doesn't work
###              properly, use the document field name directly
###

### works well with CAST
select t1_name, t1_zipcode, t2_name, t2_zipcode
from (
  select cast(t1.doc.name as char) as t1_name, cast(t1.doc.address.zipcode as unsigned) as t1_zipcode,
         cast(t2.doc2.name as char) as t2_name, cast(t2.doc2.address.zipcode as unsigned) as t2_zipcode
  from t1, t2
  where cast(t1.doc.address.zipcode as unsigned) = cast(t2.doc2.address.zipcode as unsigned)
) as tmp
where t1_zipcode = 98761 or t2_zipcode = 98762;


### without CAST, alias doesn't work properly, identical document field name will cause conflicts,
### have to use the distinct document field name directly
select doc.name, doc.address.zipcode, doc2.name, doc2.address.zipcode
from (
  select t1.doc.address.zipcode as t1_zipcode, t2.doc2.address.zipcode as t2_zipcode
  from t1, t2
  where t1.doc.address.zipcode like t2.doc2.address.zipcode
) as tmp
where doc.address.zipcode like "98761" or doc2.address.zipcode like "98762";


### Verify double value
insert into t1 values (100,'@100','{ "id":10100, "double": 4.94065645841246 }');
select t1.doc.double from t1 where a = 100;

################################################################################
###
### Clean up
###

# Restore the original value
SET @@global.allow_document_type = @start_allow_document_type;
SELECT @@global.allow_document_type;

drop table t1, t2, t3, t4;

--source include/rpl_end.inc
