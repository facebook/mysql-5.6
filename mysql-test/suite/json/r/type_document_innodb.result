include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
call mtr.add_suppression("Resizing redo log from");
call mtr.add_suppression("Starting to delete and rewrite log files");
call mtr.add_suppression("New log files created");
drop table if exists t, t1, t2, t3, t_big, t_big2;
SET @start_allow_document_type = @@global.allow_document_type;
SELECT @start_allow_document_type;
@start_allow_document_type
1
create table t (i int(8), a document, s text(255)) engine=myisam;
ERROR HY000: A DOCUMENT field is not allowed in non-innodb table
create table t (i int(8), a document(65535), s text(255)) engine=innodb;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(65535), s text(255)) engine=innodb' at line 1
create table t (i int(8), a document, s text(255), primary key(a)) engine=innodb;
ERROR HY000: DOCUMENT column 'a' cannot be part of a key
create table t (i int(8), a document, s text(255))
partition by range columns(a)
(partition p0 values less than (0) engine=innodb);
ERROR HY000: Field 'a' is of a not allowed type for this type of partitioning
create table t (i int(8), a document, s text(255))
partition by range columns(i)
(partition p0 values less than (0) engine=myisam);
ERROR HY000: A DOCUMENT field is not allowed in non-innodb table
create table t (i int(8), a document, s text(255), primary key (i)) engine=innodb;
show create table t;
Table	Create Table
t	CREATE TABLE `t` (
  `i` int(8) NOT NULL DEFAULT '0',
  `a` document DEFAULT NULL,
  `s` tinytext,
  PRIMARY KEY (`i`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1
alter table t add primary key (a);
ERROR HY000: DOCUMENT column 'a' cannot be part of a key
alter table t add index (a);
ERROR HY000: DOCUMENT column 'a' cannot be part of a key
create index doc_idx on t (a);
ERROR HY000: DOCUMENT column 'a' cannot be part of a key
create index doc_idx on t (i, a);
ERROR HY000: DOCUMENT column 'a' cannot be part of a key
alter table t partition by hash(a) partitions 8;
ERROR HY000: A DOCUMENT field is not allowed in partition function
insert into t values (1, '{ "id":101, "name":"Alex", "phone":6507770001, "address":{ "houseNumber":1001, "streetName":"1st", }', 'a1');
Warnings:
Warning	1898	Invalid document value: '{ "id":101, "name":"Alex", "phone":6507770001, "address":{ "hous' for column 'a' at row 1
SELECT count(*) FROM t;
count(*)
1
insert into t values (2, ' ', 'a2');
Warnings:
Warning	1898	Invalid document value: ' ' for column 'a' at row 1
insert into t values (3, 123, 'a3');
Warnings:
Warning	1898	Invalid document value: '123' for column 'a' at row 1
insert into t values (4, 123.456, 'a4');
Warnings:
Warning	1898	Invalid document value: '123.456' for column 'a' at row 1
update t set a='{ "id":101, "name":"Alex", "phone":6507770001, "address":{ "houseNumber":1001, "streetName":"1st", }' where i = 1;
Warnings:
Warning	1898	Invalid document value: '{ "id":101, "name":"Alex", "phone":6507770001, "address":{ "hous' for column 'a' at row 1
update t set a=111222333444555666777888999 where i = 2;
Warnings:
Warning	1898	Invalid document value: '111222333444555666777888999' for column 'a' at row 1
update t set a=123456789.123456789;
Warnings:
Warning	1898	Invalid document value: '123456789.123456789' for column 'a' at row 1
Warning	1898	Invalid document value: '123456789.123456789' for column 'a' at row 2
Warning	1898	Invalid document value: '123456789.123456789' for column 'a' at row 3
Warning	1898	Invalid document value: '123456789.123456789' for column 'a' at row 4
update t set a=DEFAULT;
insert into t values (5, '{ "id":101, "name":"Alex", "phone":6507770001, "address":{ "houseNumber":1001, "streetName":"1st", "zipcode":98761 } }', 'a5');
insert into t values (6, '{ "id":102, "name":"Bob", "phone":6507770002, "address":{ "houseNumber":1002, "streetName":"2nd", "zipcode":98762 } }', 'a6');
insert into t values (7, '{ "id":103, "name":"Charlie", "phone":6507770003, "address":{ "houseNumber":1003, "streetName":"3rd", "zipcode":98763, "hoa":39.99 } }', 'a7');
insert into t values (8, '{ "id":104, "name":"David", "phone":6507770004, "address":{ "houseNumber":1004, "streetName":"4th", "zipcode":98764 }, "children":["Alex", "Bob", "Charlie"] }', 'a8');
load data infile '../../std_data/type_document_innodb.txt' into table t;
Warnings:
Warning	1898	Invalid document value: '{ "id":112, "address":{ "houseNumber":1012, }' for column 'a' at row 8
select * from t;
i	a	s
1	NULL	a1
2	NULL	a2
3	NULL	a3
4	NULL	a4
5	{"id":101,"name":"Alex","phone":6507770001,"address":{"houseNumber":1001,"streetName":"1st","zipcode":98761}}	a5
6	{"id":102,"name":"Bob","phone":6507770002,"address":{"houseNumber":1002,"streetName":"2nd","zipcode":98762}}	a6
7	{"id":103,"name":"Charlie","phone":6507770003,"address":{"houseNumber":1003,"streetName":"3rd","zipcode":98763,"hoa":39.99}}	a7
8	{"id":104,"name":"David","phone":6507770004,"address":{"houseNumber":1004,"streetName":"4th","zipcode":98764},"children":["Alex","Bob","Charlie"]}	a8
9	{"id":105,"name":"Eddy","phone":6507770005,"address":{"houseNumber":1005,"streetName":"5th","zipcode":98765,"hoa":99.99}}	a9
10	{"id":106,"name":"Frank","phone":6507770006,"address":{"houseNumber":1006,"streetName":"6th","zipcode":98766},"children":["Jay","Raymond"]}	a10
11	{"id":107,"name":"Gary","phone":6507770007,"address":{"houseNumber":1007,"streetName":"7th","zipcode":98767},"children":["Kayden","Raymond"]}	a11
12	{"id":108,"name":"Harry","phone":6507770008,"address":{"houseNumber":1008,"streetName":"8th","zipcode":98768},"children":["Emma","Jenny"]}	a12
13	{"id":109,"name":"Ian","phone":6507770009,"address":{"houseNumber":1009,"streetName":"9th","zipcode":98769,"hoa":59.99}}	a13
14	{"id":110,"name":"Jack","phone":6507770010,"address":{"houseNumber":1010,"streetName":"11th","zipcode":98769}}	a14
15	{"id":111,"name":"Kevin","phone":6507770011,"address":{"houseNumber":1011,"streetName":"12nd","zipcode":98769},"children":["Amy"]}	a15
16	NULL	a16
17	NULL	a17
select a from t;
a
NULL
NULL
NULL
NULL
{"id":101,"name":"Alex","phone":6507770001,"address":{"houseNumber":1001,"streetName":"1st","zipcode":98761}}
{"id":102,"name":"Bob","phone":6507770002,"address":{"houseNumber":1002,"streetName":"2nd","zipcode":98762}}
{"id":103,"name":"Charlie","phone":6507770003,"address":{"houseNumber":1003,"streetName":"3rd","zipcode":98763,"hoa":39.99}}
{"id":104,"name":"David","phone":6507770004,"address":{"houseNumber":1004,"streetName":"4th","zipcode":98764},"children":["Alex","Bob","Charlie"]}
{"id":105,"name":"Eddy","phone":6507770005,"address":{"houseNumber":1005,"streetName":"5th","zipcode":98765,"hoa":99.99}}
{"id":106,"name":"Frank","phone":6507770006,"address":{"houseNumber":1006,"streetName":"6th","zipcode":98766},"children":["Jay","Raymond"]}
{"id":107,"name":"Gary","phone":6507770007,"address":{"houseNumber":1007,"streetName":"7th","zipcode":98767},"children":["Kayden","Raymond"]}
{"id":108,"name":"Harry","phone":6507770008,"address":{"houseNumber":1008,"streetName":"8th","zipcode":98768},"children":["Emma","Jenny"]}
{"id":109,"name":"Ian","phone":6507770009,"address":{"houseNumber":1009,"streetName":"9th","zipcode":98769,"hoa":59.99}}
{"id":110,"name":"Jack","phone":6507770010,"address":{"houseNumber":1010,"streetName":"11th","zipcode":98769}}
{"id":111,"name":"Kevin","phone":6507770011,"address":{"houseNumber":1011,"streetName":"12nd","zipcode":98769},"children":["Amy"]}
NULL
NULL
create table t1 (a int auto_increment, b varchar(64), c text, d document, primary key (a), key (b, c(128))) engine=innodb;
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
SELECT * FROM t1 WHERE a >= 1000 and a <= 1010;
a	b	c	d
1000	12	144	{"id":202,"name":"David","phone":6507770002,"address":{"houseNumber":1004,"street":"2nd","zipcode":98762},"children":["Alex","Bob","Charlie"]}
1001	11	121	{"id":202,"name":"David","phone":6507770002,"address":{"houseNumber":1004,"street":"2nd","zipcode":98762},"children":["Alex","Bob","Charlie"]}
1002	10	100	{"id":202,"name":"David","phone":6507770002,"address":{"houseNumber":1004,"street":"2nd","zipcode":98762},"children":["Alex","Bob","Charlie"]}
1003	bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb	cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc	{"id":201,"name":"Alex","phone":6507770001,"address":{"houseNumber":1001,"street":"1st","zipcode":98761}}
1004	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC	{"id":202,"name":"David","phone":6507770002,"address":{"houseNumber":1004,"street":"2nd","zipcode":98762},"children":["Alex","Bob","Charlie"]}
1005	12	144	{"id":202,"name":"David","phone":6507770002,"address":{"houseNumber":1004,"street":"2nd","zipcode":98762},"children":["Alex","Bob","Charlie"]}
1006	bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb	cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc	{"id":201,"name":"Alex","phone":6507770001,"address":{"houseNumber":1001,"street":"1st","zipcode":98761}}
1007	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC	{"id":202,"name":"David","phone":6507770002,"address":{"houseNumber":1004,"street":"2nd","zipcode":98762},"children":["Alex","Bob","Charlie"]}
1008	12	144	{"id":202,"name":"David","phone":6507770002,"address":{"houseNumber":1004,"street":"2nd","zipcode":98762},"children":["Alex","Bob","Charlie"]}
1009	11	121	{"id":202,"name":"David","phone":6507770002,"address":{"houseNumber":1004,"street":"2nd","zipcode":98762},"children":["Alex","Bob","Charlie"]}
1010	bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb	cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc	{"id":201,"name":"Alex","phone":6507770001,"address":{"houseNumber":1001,"street":"1st","zipcode":98761}}
SELECT CAST(c as document) FROM t1 WHERE a >= 1000 and a <= 1010;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'document) FROM t1 WHERE a >= 1000 and a <= 1010' at line 1
create table t2 (i int(8), a document not null, s text(255), primary key (i)) engine=innodb;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `i` int(8) NOT NULL DEFAULT '0',
  `a` document NOT NULL,
  `s` tinytext,
  PRIMARY KEY (`i`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1
insert into t2 values (1, '{ "id":101, "name":"Alex", "phone":6507770001, "address":{ "houseNumber":1001, "streetName":"1st", }', 'a1');
ERROR HY000: Invalid document value: { "id":101, "name":"Alex", "phone":6507770001, "address":{ "houseNumber":1001, "streetName":"1st", }
insert into t2 values (2, ' ', 'a2');
ERROR HY000: Invalid document value:  
insert into t2 values (3, 123, 'a3');
ERROR HY000: Invalid document value: 123
insert into t2 values (4, 123.456, 'a4');
ERROR HY000: Invalid document value: 123.456
SELECT count(*) FROM t2;
count(*)
0
insert into t2 values (1, '{ "id":101, "name":"Alex", "phone":6507770001, "address":{ "houseNumber":1001, "streetName":"1st", "zipcode":98761 } }', 'a5');
update t2 set a='{ "id":102, "name":"Bob", "phone":6507770002, "address":{ "houseNumber":1002, "streetName":"2nd", }' where i = 1;
ERROR HY000: Invalid document value: { "id":102, "name":"Bob", "phone":6507770002, "address":{ "houseNumber":1002, "streetName":"2nd", }
SELECT * from t2;
i	a	s
1	{"id":101,"name":"Alex","phone":6507770001,"address":{"houseNumber":1001,"streetName":"1st","zipcode":98761}}	a5
update t2 set a=DEFAULT;
ERROR HY000: Invalid document value.
create table t_big (i int(8), a document, s text(255), primary key (i)) engine=innodb;
show create table t_big;
Table	Create Table
t_big	CREATE TABLE `t_big` (
  `i` int(8) NOT NULL DEFAULT '0',
  `a` document DEFAULT NULL,
  `s` tinytext,
  PRIMARY KEY (`i`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1
insert into t_big values (1, concat("{", repeat("\"json-key\":\"json-value\",", 670000), "\"last\":100}"), 'aaa');
set @original_session_sql_mode = @@session.sql_mode;
set @@session.sql_mode = strict_trans_tables;
select @@session.sql_mode;
@@session.sql_mode
STRICT_TRANS_TABLES
insert into t_big values (2, concat("{", repeat("\"json-key\":\"json-value\",", 700000), "\"last\":100}"), 'bbb');
ERROR HY000: Document column length too big for column 'a' (max = 16777215)
set @@session.sql_mode = @original_session_sql_mode;
select @@session.sql_mode;
@@session.sql_mode
NO_ENGINE_SUBSTITUTION
insert into t_big values (2, concat("{", repeat("\"json-key\":\"json-value\",", 700000), "\"last\":100}"), 'bbb');
Warnings:
Warning	1909	Document column length too big for column 'a' (max = 16777215)
select count(*) from t_big;
count(*)
2
select i, s from t_big;
i	s
1	aaa
2	bbb
create table t_big2 (i int(8), a document not null, s text(255), primary key (i)) engine=innodb;
show create table t_big2;
Table	Create Table
t_big2	CREATE TABLE `t_big2` (
  `i` int(8) NOT NULL DEFAULT '0',
  `a` document NOT NULL,
  `s` tinytext,
  PRIMARY KEY (`i`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1
insert into t_big2 values (1, concat("{", repeat("\"json-key\":\"json-value\",", 670000), "\"last\":100}"), 'aaa');
insert into t_big2 values (2, concat("{", repeat("\"json-key\":\"json-value\",", 700000), "\"last\":100}"), 'bbb');
ERROR HY000: Document column length too big for column 'a' (max = 16777215)
select count(*) from t_big2;
count(*)
1
select i, s from t_big2;
i	s
1	aaa
SET @@global.allow_document_type = false;
SELECT @@global.allow_document_type;
@@global.allow_document_type
0
create table t3 (i int(8), a document, s text(255)) engine=innodb;
ERROR HY000: DOCUMENT fields are not allowed
create table t3 (i int(8), s text(255)) engine=innodb;
alter table t3 add column a document;
ERROR HY000: DOCUMENT fields are not allowed
alter table t3 modify column s document;
ERROR HY000: DOCUMENT fields are not allowed
SET @@global.allow_document_type = true;
SELECT @@global.allow_document_type;
@@global.allow_document_type
1
alter table t3 add column a document;
alter table t3 modify column s document;
SET @@global.allow_document_type = @start_allow_document_type;
SELECT @@global.allow_document_type;
@@global.allow_document_type
1
drop table t, t1, t2, t3, t_big, t_big2;
include/rpl_end.inc
