drop table if exists test_json;
create table test_json(json document) engine=innodb;
insert into test_json values
(null),
('{}'),
('{"k":"v"}'),
('{"k":{}}'),
('{"k":[]}'),
('{"k1":"v1","k2":true,"k3":3}'),
('{"k1":{"k2":"v2"}}'),
('{"key":[1,2,3]}'),
('[]'),
('[[[[[]]]]]'),
('[{}]'),
('[1,2,3]'),
('[1,false,"str",1.2]'),
('[{"k1":"v1"},2,3]'),
('[[1,2,3],2,3]'),
(''),
(123),
(1.23),
('abc'),
('{"key"}'),
('{1:value}'),
('{"key":"value"'),
('[1,2,3'),
('{}}'),
('[[]'),
('{[]}'),
('{"MySQL":"开源数据库"}'),
('{"开源数据库":"MySQL"}');
Warnings:
Warning	1898	Invalid document value: '' for column 'json' at row 16
Warning	1898	Invalid document value: '123' for column 'json' at row 17
Warning	1898	Invalid document value: '1.23' for column 'json' at row 18
Warning	1898	Invalid document value: 'abc' for column 'json' at row 19
Warning	1898	Invalid document value: '{"key"}' for column 'json' at row 20
Warning	1898	Invalid document value: '{1:value}' for column 'json' at row 21
Warning	1898	Invalid document value: '{"key":"value"' for column 'json' at row 22
Warning	1898	Invalid document value: '[1,2,3' for column 'json' at row 23
Warning	1898	Invalid document value: '{}}' for column 'json' at row 24
Warning	1898	Invalid document value: '[[]' for column 'json' at row 25
Warning	1898	Invalid document value: '{[]}' for column 'json' at row 26
select json_valid(json),json from test_json order by 1,2;
json_valid(json)	json
NULL	NULL
NULL	NULL
NULL	NULL
NULL	NULL
NULL	NULL
NULL	NULL
NULL	NULL
NULL	NULL
NULL	NULL
NULL	NULL
NULL	NULL
NULL	NULL
1	{}
1	{"k":{}}
1	{"k":[]}
1	{"k":"v"}
1	{"key":[1,2,3]}
1	{"k1":{"k2":"v2"}}
1	{"k1":"v1","k2":true,"k3":3}
1	{"MySQL":"开源数据库"}
1	{"开源数据库":"MySQL"}
1	[]
1	[{}]
1	[1,2,3]
1	[[1,2,3],2,3]
1	[{"k1":"v1"},2,3]
1	[1,false,"str",1.2]
1	[[[[[]]]]]
truncate test_json;
insert into test_json values
(null),
('{}'),
('{"k1":"v1"}'),
('{"k1":true}'),
('{"k1":false}'),
('{"k1":null}'),
('{"k1":12}'),
('{"k1":1.23}'),
('[1,2,3,4]'),
('{"k1":{"k2":{"k3":12.345}}}'),
('{"k1":"v1","k1":{"k2":"v2"}}'),
('{"k1":[1,{"k2":["v1",2,true]},3,false]}');
select length(json_extract(json,null)),json_extract(json,null),json from test_json order by 1,2,3;
length(json_extract(json,null))	json_extract(json,null)	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	{"k1":[1,{"k2":["v1",2,true]},3,false]}
NULL	NULL	[1,2,3,4]
select length(json_extract(json,'k1')),json_extract(json,'k1'),json from test_json order by 1,2,3;
length(json_extract(json,'k1'))	json_extract(json,'k1')	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	[1,2,3,4]
2	12	{"k1":12}
4	"v1"	{"k1":"v1"}
4	"v1"	{"k1":"v1","k1":{"k2":"v2"}}
4	1.23	{"k1":1.23}
4	null	{"k1":null}
4	true	{"k1":true}
5	false	{"k1":false}
20	{"k2":{"k3":12.345}}	{"k1":{"k2":{"k3":12.345}}}
32	[1,{"k2":["v1",2,true]},3,false]	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select length(json_extract(json,'k1','k2')),json_extract(json,'k1','k2'),json from test_json order by 1,2,3;
length(json_extract(json,'k1','k2'))	json_extract(json,'k1','k2')	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":[1,{"k2":["v1",2,true]},3,false]}
NULL	NULL	[1,2,3,4]
13	{"k3":12.345}	{"k1":{"k2":{"k3":12.345}}}
select length(json_extract(json,'k1','k2','k3')),json_extract(json,'k1','k2','k3'),json from test_json order by 1,2,3;
length(json_extract(json,'k1','k2','k3'))	json_extract(json,'k1','k2','k3')	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":[1,{"k2":["v1",2,true]},3,false]}
NULL	NULL	[1,2,3,4]
6	12.345	{"k1":{"k2":{"k3":12.345}}}
select length(json_extract(json,0)),json_extract(json,0),json from test_json order by 1,2,3;
length(json_extract(json,0))	json_extract(json,0)	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	{"k1":[1,{"k2":["v1",2,true]},3,false]}
1	1	[1,2,3,4]
select length(json_extract(json,'1')),json_extract(json,'1'),json from test_json order by 1,2,3;
length(json_extract(json,'1'))	json_extract(json,'1')	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	{"k1":[1,{"k2":["v1",2,true]},3,false]}
1	2	[1,2,3,4]
select length(json_extract(json,'k1',1)),json_extract(json,'k1',1),json from test_json order by 1,2,3;
length(json_extract(json,'k1',1))	json_extract(json,'k1',1)	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	[1,2,3,4]
20	{"k2":["v1",2,true]}	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select length(json_extract(json,'k1',1,'k2')),json_extract(json,'k1',1,'k2'),json from test_json order by 1,2,3;
length(json_extract(json,'k1',1,'k2'))	json_extract(json,'k1',1,'k2')	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	[1,2,3,4]
13	["v1",2,true]	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select length(json_extract(json,'k1',1,'k2',0)),json_extract(json,'k1',1,'k2',0),json from test_json order by 1,2,3;
length(json_extract(json,'k1',1,'k2',0))	json_extract(json,'k1',1,'k2',0)	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	[1,2,3,4]
4	"v1"	{"k1":[1,{"k2":["v1",2,true]},3,false]}
truncate test_json;
insert into test_json values ('{"k1":[1,{"k2":["v1",2,true]},3,false]}');
create table test_json2 (json text) select json_extract(json,'k1',1,'k2',0) json from test_json;
show columns from test_json2;
Field	Type	Null	Key	Default	Extra
json	text	YES		NULL	
select * from test_json2;
json
"v1"
drop table test_json2;
truncate test_json;
insert into test_json values
('{"MySQL":"开源数据库"}'),
('{"开源数据库":"MySQL"}');
select length(json_extract(json,'MySQL')),json_extract(json,'MySQL'),json from test_json order by 1,2,3;
length(json_extract(json,'MySQL'))	json_extract(json,'MySQL')	json
NULL	NULL	{"开源数据库":"MySQL"}
17	"开源数据库"	{"MySQL":"开源数据库"}
select length(json_extract(json,'开源数据库')),json_extract(json,'开源数据库'),json from test_json order by 1,2,3;
length(json_extract(json,'开源数据库'))	json_extract(json,'开源数据库')	json
NULL	NULL	{"MySQL":"开源数据库"}
7	"MySQL"	{"开源数据库":"MySQL"}
truncate test_json;
insert into test_json values ('{"k":1, "kk":2, "kkkk":4}');
select json_extract(json, 'k') k,
json_extract(json, 'kk') kk,
json_extract(json, 'kkk') kkk,
json_extract(json, 'kkkk') kkkk
from test_json;
k	kk	kkk	kkkk
1	2	NULL	4
truncate test_json;
insert into test_json values
(null),
('{}'),
('{"k1":"v1"}'),
('{"k1":true}'),
('{"k1":false}'),
('{"k1":null}'),
('{"k1":12}'),
('{"k1":1.23}');
select length(json_extract_value(json,null)),json_extract_value(json,null),json from test_json order by 1,2,3;
length(json_extract_value(json,null))	json_extract_value(json,null)	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
select length(json_extract_value(json,'k1')),json_extract_value(json,'k1'),json from test_json order by 1,2,3;
length(json_extract_value(json,'k1'))	json_extract_value(json,'k1')	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
1	0	{"k1":false}
1	1	{"k1":true}
2	12	{"k1":12}
2	v1	{"k1":"v1"}
4	1.23	{"k1":1.23}
select length(json_extract_value(json,'k1','k2')),json_extract_value(json,'k1','k2'),json from test_json order by 1,2,3;
length(json_extract_value(json,'k1','k2'))	json_extract_value(json,'k1','k2')	json
NULL	NULL	NULL
NULL	NULL	{}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
select json from test_json where json_extract_value(json,'k1') > 1 order by 1;
json
{"k1":12}
{"k1":1.23}
truncate test_json;
insert into test_json values
(null),
('{}'),
('{"k1":"v1"}'),
('[1,2,3,4]'),
('{"k1":{"k2":{"k3":12.345}}}'),
('{"k1":"v1","k1":{"k2":"v2"}}'),
('{"k1":[1,{"k2":["v1",2,true]},3,false]}');
select json_contains_key(json,null),json from test_json order by 1,2;
json_contains_key(json,null)	json
NULL	NULL
0	{}
0	{"k1":"v1"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":{"k2":{"k3":12.345}}}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	[1,2,3,4]
select json_contains_key(json,'k1',null),json from test_json order by 1,2;
json_contains_key(json,'k1',null)	json
NULL	NULL
0	{}
0	{"k1":"v1"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":{"k2":{"k3":12.345}}}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	[1,2,3,4]
select json_contains_key(json,'k2'),json from test_json order by 1,2;
json_contains_key(json,'k2')	json
NULL	NULL
0	{}
0	{"k1":"v1"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":{"k2":{"k3":12.345}}}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	[1,2,3,4]
select json_contains_key(json,'k1'),json from test_json order by 1,2;
json_contains_key(json,'k1')	json
NULL	NULL
0	{}
0	[1,2,3,4]
1	{"k1":"v1"}
1	{"k1":"v1","k1":{"k2":"v2"}}
1	{"k1":{"k2":{"k3":12.345}}}
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select json_contains_key(json,'k1','k2'),json from test_json order by 1,2;
json_contains_key(json,'k1','k2')	json
NULL	NULL
0	{}
0	{"k1":"v1"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	[1,2,3,4]
1	{"k1":{"k2":{"k3":12.345}}}
select json_contains_key(json,'k1','k2','k3'),json from test_json order by 1,2;
json_contains_key(json,'k1','k2','k3')	json
NULL	NULL
0	{}
0	{"k1":"v1"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	[1,2,3,4]
1	{"k1":{"k2":{"k3":12.345}}}
select json_contains_key(json,0),json from test_json order by 1,2;
json_contains_key(json,0)	json
NULL	NULL
0	{}
0	{"k1":"v1"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":{"k2":{"k3":12.345}}}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
1	[1,2,3,4]
select json_contains_key(json,'1'),json from test_json order by 1,2;
json_contains_key(json,'1')	json
NULL	NULL
0	{}
0	{"k1":"v1"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":{"k2":{"k3":12.345}}}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
1	[1,2,3,4]
select json_contains_key(json,'k1',1),json from test_json order by 1,2;
json_contains_key(json,'k1',1)	json
NULL	NULL
0	{}
0	{"k1":"v1"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":{"k2":{"k3":12.345}}}
0	[1,2,3,4]
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select json_contains_key(json,'k1',1,'k2'),json from test_json order by 1,2;
json_contains_key(json,'k1',1,'k2')	json
NULL	NULL
0	{}
0	{"k1":"v1"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":{"k2":{"k3":12.345}}}
0	[1,2,3,4]
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select json_contains_key(json,'k1',1,'k2',0),json from test_json order by 1,2;
json_contains_key(json,'k1',1,'k2',0)	json
NULL	NULL
0	{}
0	{"k1":"v1"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":{"k2":{"k3":12.345}}}
0	[1,2,3,4]
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
truncate test_json;
insert into test_json values
('{"MySQL":"开源数据库"}'),
('{"开源数据库":"MySQL"}');
select length(json_contains_key(json,'MySQL')),json_contains_key(json,'MySQL'),json from test_json order by 1,2,3;
length(json_contains_key(json,'MySQL'))	json_contains_key(json,'MySQL')	json
1	0	{"开源数据库":"MySQL"}
1	1	{"MySQL":"开源数据库"}
select length(json_contains_key(json,'开源数据库')),json_contains_key(json,'开源数据库'),json from test_json order by 1,2,3;
length(json_contains_key(json,'开源数据库'))	json_contains_key(json,'开源数据库')	json
1	0	{"MySQL":"开源数据库"}
1	1	{"开源数据库":"MySQL"}
truncate test_json;
insert into test_json values
(null),
('[]'),
('[1]'),
('["str"]'),
('[null]'),
('[true,false]'),
('[1.234]'),
('[1,"str",null,true,false,1.2345]'),
('[[[[[[]]]]]]'),
('[[],[],[],[],[]]'),
('[[1,2,3],{"k1":"v1"},{"k2":2},[4,5,6]]'),
('[{"MySQL":"开源数据库"},"MySQL"]'),
('[{"开源数据库":"MySQL"},"开源数据库"]');
select json_array_length(json),json from test_json order by 1,2;
json_array_length(json)	json
NULL	NULL
0	[]
1	[null]
1	[1]
1	["str"]
1	[1.234]
1	[[[[[[]]]]]]
2	[true,false]
2	[{"MySQL":"开源数据库"},"MySQL"]
2	[{"开源数据库":"MySQL"},"开源数据库"]
4	[[1,2,3],{"k1":"v1"},{"k2":2},[4,5,6]]
5	[[],[],[],[],[]]
6	[1,"str",null,true,false,1.2345]
truncate test_json;
insert into test_json values
(null),
('{"k1":[1,{"k2":["v1",2,true]},3,false]}');
select json_array_length(json_extract(json, 'k1')),json
from test_json where json_valid(json) is true order by 1,2;
json_array_length(json_extract(json, 'k1'))	json
4	{"k1":[1,{"k2":["v1",2,true]},3,false]}
truncate test_json;
insert into test_json values ('');
Warnings:
Warning	1898	Invalid document value: '' for column 'json' at row 1
select json_extract(json, 'k1') from test_json;
json_extract(json, 'k1')
NULL
truncate test_json;
insert into test_json values ('');
Warnings:
Warning	1898	Invalid document value: '' for column 'json' at row 1
select json_contains_key(json, 'k1') from test_json;
json_contains_key(json, 'k1')
NULL
truncate test_json;
insert into test_json values ('');
Warnings:
Warning	1898	Invalid document value: '' for column 'json' at row 1
select json_array_length(json) from test_json;
json_array_length(json)
NULL
truncate test_json;
INSERT INTO test_json VALUES ('{\"name\":\"Bob Thompson\",\"age\":45,\"age_string\":\"45\",\"big_age\":1234567890123,\"amount\":1.23456789,\"amount_string\":\"1.23456789\",\"true_value\":true,\"true_string\":\"true\",\"true_json\":\"true\",\"false_value\":false,\"false_string\":\"false\",\"false_json\":\"false\",\"null_value\":null,\"null_string\":\"null\",\"null_json\":\"null\",\"empty_string\":\"\",\"zero\":0,\"json_vector1\":\"[]\",\"json_vector2\":\"[1,2,3]\",\"json_vector3\":\"\\\"[]\\\"\",\"json_vector4\":\"\\\"[1,2,3]\\\"\",\"json_vector5\":\"\'[]\'\",\"json_vector6\":\"\'[1,2,3]\'\",\"json_vector7\":\"[]\",\"json_vector8\":\"[1,2,3]\",\"json_map1\":\"{}\",\"json_map2\":\"{\\\\\\\"a\\\\\\\":1,\\\\\\\"b\\\\\\\":2,\\\\\\\"c\\\\\\\":3}\",\"json_map3\":\"\\\"{}\\\"\",\"json_map4\":\"\\\"{\\\\\\\"a\\\\\\\":1,\\\\\\\"b\\\\\\\":2,\\\\\\\"c\\\\\\\":3}\\\"\",\"json_map5\":\"\'{}\'\",\"json_map6\":\"\'{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}\'\",\"json_map7\":\"{}\",\"json_map8\":\"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}\",\"address\":{\"street\":\"8008 Left Ln.\",\"state\":\"CA\",\"zipcode\":90210},\"jobs\":[\"CEO\",\"Director\",\"Engineer\"],\"map_of_vectors\":{\"one\":[10,20,30],\"two\":[\"x\",\"y\"],\"three\":[],\"four\":[true,false,null,1.2345]},\"vector_of_maps\":[{\"xx\":10,\"yy\":20,\"zz\":30},{\"100\":\"x\",\"324\":\"y\"},{},{\"x1\":true,\"x2\":false,\"x3\":null,\"x4\":1.2345}]}');
select * from test_json;
json
{"name":"Bob Thompson","age":45,"age_string":"45","big_age":1234567890123,"amount":1.23456789,"amount_string":"1.23456789","true_value":true,"true_string":"true","true_json":"true","false_value":false,"false_string":"false","false_json":"false","null_value":null,"null_string":"null","null_json":"null","empty_string":"","zero":0,"json_vector1":"[]","json_vector2":"[1,2,3]","json_vector3":"\"[]\"","json_vector4":"\"[1,2,3]\"","json_vector5":"'[]'","json_vector6":"'[1,2,3]'","json_vector7":"[]","json_vector8":"[1,2,3]","json_map1":"{}","json_map2":"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}","json_map3":"\"{}\"","json_map4":"\"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}\"","json_map5":"'{}'","json_map6":"'{\"a\":1,\"b\":2,\"c\":3}'","json_map7":"{}","json_map8":"{\"a\":1,\"b\":2,\"c\":3}","address":{"street":"8008 Left Ln.","state":"CA","zipcode":90210},"jobs":["CEO","Director","Engineer"],"map_of_vectors":{"one":[10,20,30],"two":["x","y"],"three":[],"four":[true,false,null,1.2345]},"vector_of_maps":[{"xx":10,"yy":20,"zz":30},{"100":"x","324":"y"},{},{"x1":true,"x2":false,"x3":null,"x4":1.2345}]}
drop table test_json;
