include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
drop table if exists test_json;
create table test_json(json document) engine=innodb;
insert into test_json values
(null),
('{}'),
('{"k":"v"}'),
('{"k":{}}'),
('{"k":[]}'),
('{"k1":"v1","k2":true,"k3":3}'),
('{"k1":{"k2":"v2"}}'),
('{"key":[1,2,3]}'),
('[]'),
('[[[[[]]]]]'),
('[{}]'),
('[1,2,3]'),
('[1,false,"str",1.2]'),
('[{"k1":"v1"},2,3]'),
('[[1,2,3],2,3]'),
(''),
(123),
(1.23),
('abc'),
('{"key"}'),
('{1:value}'),
('{"key":"value"'),
('[1,2,3'),
('{}}'),
('[[]'),
('{[]}'),
(repeat('{"a":',100)),
(repeat('{"a":',101)),
(repeat('["a",',100)),
(repeat('["a",',101)),
('{"MySQL":"开源数据库"}'),
('{"开源数据库":"MySQL"}');
ERROR HY000: Invalid document value: ''
select count(*) from test_json;
count(*)
0
insert into test_json values
(null),
('{}'),
('{"k":"v"}'),
('{"k":{}}'),
('{"k":[]}'),
('{"k1":"v1","k2":true,"k3":3}'),
('{"k1":{"k2":"v2"}}'),
('{"key":[1,2,3]}'),
('[]'),
('[[[[[]]]]]'),
('[{}]'),
('[1,2,3]'),
('[1,false,"str",1.2]'),
('[{"k1":"v1"},2,3]'),
('[[1,2,3],2,3]'),
('{"MySQL":"开源数据库"}'),
('{"开源数据库":"MySQL"}');
select json_valid(json),json from test_json order by 1,2;
json_valid(json)	json
NULL	NULL
1	[1,2,3]
1	[1,false,"str",1.2]
1	[[1,2,3],2,3]
1	[[[[[]]]]]
1	[]
1	[{"k1":"v1"},2,3]
1	[{}]
1	{"MySQL":"开源数据库"}
1	{"k":"v"}
1	{"k":[]}
1	{"k":{}}
1	{"k1":"v1","k2":true,"k3":3}
1	{"k1":{"k2":"v2"}}
1	{"key":[1,2,3]}
1	{"开源数据库":"MySQL"}
1	{}
truncate test_json;
insert into test_json values
(null),
('{}'),
('{"k1":"v1"}'),
('{"k1":true}'),
('{"k1":false}'),
('{"k1":null}'),
('{"k1":12}'),
('{"k1":1.23}'),
('[1,2,3,4]'),
('{"k1":{"k2":{"k3":12.345}}}'),
('{"k1":"v1","k1":{"k2":"v2"}}'),
('{"k1":[1,{"k2":["v1",2,true]},3,false]}');
select length(json_extract(json,null)),json_extract(json,null),json from test_json order by 1,2,3;
length(json_extract(json,null))	json_extract(json,null)	json
NULL	NULL	NULL
NULL	NULL	[1,2,3,4]
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":[1,{"k2":["v1",2,true]},3,false]}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	{}
select length(json_extract(json,'k1')),json_extract(json,'k1'),json from test_json order by 1,2,3;
length(json_extract(json,'k1'))	json_extract(json,'k1')	json
NULL	NULL	NULL
NULL	NULL	[1,2,3,4]
NULL	NULL	{}
2	12	{"k1":12}
4	"v1"	{"k1":"v1","k1":{"k2":"v2"}}
4	"v1"	{"k1":"v1"}
4	1.23	{"k1":1.23}
4	null	{"k1":null}
4	true	{"k1":true}
5	false	{"k1":false}
20	{"k2":{"k3":12.345}}	{"k1":{"k2":{"k3":12.345}}}
32	[1,{"k2":["v1",2,true]},3,false]	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select length(json_extract(json,'k1','k2')),json_extract(json,'k1','k2'),json from test_json order by 1,2,3;
length(json_extract(json,'k1','k2'))	json_extract(json,'k1','k2')	json
NULL	NULL	NULL
NULL	NULL	[1,2,3,4]
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":[1,{"k2":["v1",2,true]},3,false]}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{}
13	{"k3":12.345}	{"k1":{"k2":{"k3":12.345}}}
select length(json_extract(json,'k1','k2','k3')),json_extract(json,'k1','k2','k3'),json from test_json order by 1,2,3;
length(json_extract(json,'k1','k2','k3'))	json_extract(json,'k1','k2','k3')	json
NULL	NULL	NULL
NULL	NULL	[1,2,3,4]
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":[1,{"k2":["v1",2,true]},3,false]}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{}
6	12.345	{"k1":{"k2":{"k3":12.345}}}
select length(json_extract(json,0)),json_extract(json,0),json from test_json order by 1,2,3;
length(json_extract(json,0))	json_extract(json,0)	json
NULL	NULL	NULL
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":[1,{"k2":["v1",2,true]},3,false]}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	{}
1	1	[1,2,3,4]
select length(json_extract(json,'1')),json_extract(json,'1'),json from test_json order by 1,2,3;
length(json_extract(json,'1'))	json_extract(json,'1')	json
NULL	NULL	NULL
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":[1,{"k2":["v1",2,true]},3,false]}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	{}
1	2	[1,2,3,4]
select length(json_extract(json,'k1',1)),json_extract(json,'k1',1),json from test_json order by 1,2,3;
length(json_extract(json,'k1',1))	json_extract(json,'k1',1)	json
NULL	NULL	NULL
NULL	NULL	[1,2,3,4]
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	{}
20	{"k2":["v1",2,true]}	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select length(json_extract(json,'k1',1,'k2')),json_extract(json,'k1',1,'k2'),json from test_json order by 1,2,3;
length(json_extract(json,'k1',1,'k2'))	json_extract(json,'k1',1,'k2')	json
NULL	NULL	NULL
NULL	NULL	[1,2,3,4]
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	{}
13	["v1",2,true]	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select length(json_extract(json,'k1',1,'k2',0)),json_extract(json,'k1',1,'k2',0),json from test_json order by 1,2,3;
length(json_extract(json,'k1',1,'k2',0))	json_extract(json,'k1',1,'k2',0)	json
NULL	NULL	NULL
NULL	NULL	[1,2,3,4]
NULL	NULL	{"k1":"v1","k1":{"k2":"v2"}}
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{"k1":{"k2":{"k3":12.345}}}
NULL	NULL	{}
4	"v1"	{"k1":[1,{"k2":["v1",2,true]},3,false]}
truncate test_json;
insert into test_json values ('{"k1":[1,{"k2":["v1",2,true]},3,false]}');
create table test_json2 (json text) select json_extract(json,'k1',1,'k2',0) json from test_json;
show columns from test_json2;
Field	Type	Null	Key	Default	Extra
json	text	YES		NULL	
select * from test_json2;
json
"v1"
drop table test_json2;
truncate test_json;
insert into test_json values
('{"MySQL":"开源数据库"}'),
('{"开源数据库":"MySQL"}');
select length(json_extract(json,'MySQL')),json_extract(json,'MySQL'),json from test_json order by 1,2,3;
length(json_extract(json,'MySQL'))	json_extract(json,'MySQL')	json
NULL	NULL	{"开源数据库":"MySQL"}
17	"开源数据库"	{"MySQL":"开源数据库"}
select length(json_extract(json,'开源数据库')),json_extract(json,'开源数据库'),json from test_json order by 1,2,3;
length(json_extract(json,'开源数据库'))	json_extract(json,'开源数据库')	json
NULL	NULL	{"MySQL":"开源数据库"}
7	"MySQL"	{"开源数据库":"MySQL"}
truncate test_json;
insert into test_json values ('{"k":1, "kk":2, "kkkk":4}');
select json_extract(json, 'k') k,
json_extract(json, 'kk') kk,
json_extract(json, 'kkk') kkk,
json_extract(json, 'kkkk') kkkk
from test_json;
k	kk	kkk	kkkk
1	2	NULL	4
truncate test_json;
insert into test_json values
(null),
('{}'),
('{"k1":"v1"}'),
('{"k1":true}'),
('{"k1":false}'),
('{"k1":null}'),
('{"k1":12}'),
('{"k1":1.23}');
select length(json_extract_value(json,null)),json_extract_value(json,null),json from test_json order by 1,2,3;
length(json_extract_value(json,null))	json_extract_value(json,null)	json
NULL	NULL	NULL
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{}
select length(json_extract_value(json,'k1')),json_extract_value(json,'k1'),json from test_json order by 1,2,3;
length(json_extract_value(json,'k1'))	json_extract_value(json,'k1')	json
NULL	NULL	NULL
NULL	NULL	{"k1":null}
NULL	NULL	{}
1	0	{"k1":false}
1	1	{"k1":true}
2	12	{"k1":12}
2	v1	{"k1":"v1"}
4	1.23	{"k1":1.23}
select length(json_extract_value(json,'k1','k2')),json_extract_value(json,'k1','k2'),json from test_json order by 1,2,3;
length(json_extract_value(json,'k1','k2'))	json_extract_value(json,'k1','k2')	json
NULL	NULL	NULL
NULL	NULL	{"k1":"v1"}
NULL	NULL	{"k1":1.23}
NULL	NULL	{"k1":12}
NULL	NULL	{"k1":false}
NULL	NULL	{"k1":null}
NULL	NULL	{"k1":true}
NULL	NULL	{}
select json from test_json where json_extract_value(json,'k1') > 1 order by 1;
json
{"k1":1.23}
{"k1":12}
truncate test_json;
insert into test_json values
(null),
('{}'),
('{"k1":"v1"}'),
('[1,2,3,4]'),
('{"k1":{"k2":{"k3":12.345}}}'),
('{"k1":"v1","k1":{"k2":"v2"}}'),
('{"k1":[1,{"k2":["v1",2,true]},3,false]}');
select json_contains_key(json,null),json from test_json order by 1,2;
json_contains_key(json,null)	json
NULL	NULL
0	[1,2,3,4]
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
select json_contains_key(json,'k1',null),json from test_json order by 1,2;
json_contains_key(json,'k1',null)	json
NULL	NULL
0	[1,2,3,4]
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
select json_contains_key(json,'k2'),json from test_json order by 1,2;
json_contains_key(json,'k2')	json
NULL	NULL
0	[1,2,3,4]
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
select json_contains_key(json,'k1'),json from test_json order by 1,2;
json_contains_key(json,'k1')	json
NULL	NULL
0	[1,2,3,4]
0	{}
1	{"k1":"v1","k1":{"k2":"v2"}}
1	{"k1":"v1"}
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
1	{"k1":{"k2":{"k3":12.345}}}
select json_contains_key(json,'k1','k2'),json from test_json order by 1,2;
json_contains_key(json,'k1','k2')	json
NULL	NULL
0	[1,2,3,4]
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{}
1	{"k1":{"k2":{"k3":12.345}}}
select json_contains_key(json,'k1','k2','k3'),json from test_json order by 1,2;
json_contains_key(json,'k1','k2','k3')	json
NULL	NULL
0	[1,2,3,4]
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{}
1	{"k1":{"k2":{"k3":12.345}}}
select json_contains_key(json,0),json from test_json order by 1,2;
json_contains_key(json,0)	json
NULL	NULL
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	[1,2,3,4]
select json_contains_key(json,'1'),json from test_json order by 1,2;
json_contains_key(json,'1')	json
NULL	NULL
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	[1,2,3,4]
select json_contains_key(json,'k1',1),json from test_json order by 1,2;
json_contains_key(json,'k1',1)	json
NULL	NULL
0	[1,2,3,4]
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select json_contains_key(json,'k1',1,'k2'),json from test_json order by 1,2;
json_contains_key(json,'k1',1,'k2')	json
NULL	NULL
0	[1,2,3,4]
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select json_contains_key(json,'k1',1,'k2',0),json from test_json order by 1,2;
json_contains_key(json,'k1',1,'k2',0)	json
NULL	NULL
0	[1,2,3,4]
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
truncate test_json;
insert into test_json values
('{"MySQL":"开源数据库"}'),
('{"开源数据库":"MySQL"}');
select length(json_contains_key(json,'MySQL')),json_contains_key(json,'MySQL'),json from test_json order by 1,2,3;
length(json_contains_key(json,'MySQL'))	json_contains_key(json,'MySQL')	json
1	0	{"开源数据库":"MySQL"}
1	1	{"MySQL":"开源数据库"}
select length(json_contains_key(json,'开源数据库')),json_contains_key(json,'开源数据库'),json from test_json order by 1,2,3;
length(json_contains_key(json,'开源数据库'))	json_contains_key(json,'开源数据库')	json
1	0	{"MySQL":"开源数据库"}
1	1	{"开源数据库":"MySQL"}
truncate test_json;
insert into test_json values
(null),
('[]'),
('[1]'),
('["str"]'),
('[null]'),
('[true,false]'),
('[1.234]'),
('[1,"str",null,true,false,1.2345]'),
('[[[[[[]]]]]]'),
('[[],[],[],[],[]]'),
('[[1,2,3],{"k1":"v1"},{"k2":2},[4,5,6]]'),
('[{"MySQL":"开源数据库"},"MySQL"]'),
('[{"开源数据库":"MySQL"},"开源数据库"]');
select json_array_length(json),json from test_json order by 1,2;
json_array_length(json)	json
NULL	NULL
0	[]
1	["str"]
1	[1.234]
1	[1]
1	[[[[[[]]]]]]
1	[null]
2	[true,false]
2	[{"MySQL":"开源数据库"},"MySQL"]
2	[{"开源数据库":"MySQL"},"开源数据库"]
4	[[1,2,3],{"k1":"v1"},{"k2":2},[4,5,6]]
5	[[],[],[],[],[]]
6	[1,"str",null,true,false,1.2345]
truncate test_json;
insert into test_json values
(null),
('{"k1":[1,{"k2":["v1",2,true]},3,false]}');
select json_array_length(json_extract(json, 'k1')),json
from test_json where json_valid(json) is true order by 1,2;
json_array_length(json_extract(json, 'k1'))	json
4	{"k1":[1,{"k2":["v1",2,true]},3,false]}
truncate test_json;
insert into test_json values
('{}'),
('{"k1":"v1"}'),
('{"k1":1}'),
('[1,2,3,4]'),
('{"k1":{"k2":{"k3":12.345}}}'),
('{"k1":"v1","k1":{"k2":"v2"}}'),
('{"k1":[1,{"k2":["v1",2,true]},3,false]}'),
('{"1":"2"}'),
('{"1":2}'),
('[{"开源数据库":"MySQL"},"开源数据库"]'),
('{"k1":true, "k2":false, "k3":null}');
select json_contains(json,'k1','v1'),json from test_json order by 1,2;
json_contains(json,'k1','v1')	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"1":2}
0	{"k1":1}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":true,"k2":false,"k3":null}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":"v1","k1":{"k2":"v2"}}
1	{"k1":"v1"}
select json_contains(json,'k2','v2'),json from test_json order by 1,2;
json_contains(json,'k2','v2')	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"1":2}
0	{"k1":"v1"}
0	{"k1":1}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":true,"k2":false,"k3":null}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":"v1","k1":{"k2":"v2"}}
select json_contains(json,'k1',1),json from test_json order by 1,2;
json_contains(json,'k1',1)	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"1":2}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":1}
1	{"k1":true,"k2":false,"k3":null}
select json_contains(json,'1',2),json from test_json order by 1,2;
json_contains(json,'1',2)	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":1}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":true,"k2":false,"k3":null}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"1":2}
select json_contains(json,'k2'),json from test_json order by 1,2;
json_contains(json,'k2')	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"1":2}
0	{"k1":"v1"}
0	{"k1":1}
0	{}
1	{"k1":"v1","k1":{"k2":"v2"}}
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
1	{"k1":true,"k2":false,"k3":null}
1	{"k1":{"k2":{"k3":12.345}}}
select json_contains(json,'1'),json from test_json order by 1,2;
json_contains(json,'1')	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":1}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":true,"k2":false,"k3":null}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"1":"2"}
1	{"1":2}
select json_contains(json,'1','2'),json from test_json order by 1,2;
json_contains(json,'1','2')	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":2}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":1}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":true,"k2":false,"k3":null}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"1":"2"}
select json_contains(json,'开源数据库', 'MySQL'),json from test_json order by 1,2;
json_contains(json,'开源数据库', 'MySQL')	json
0	[1,2,3,4]
0	{"1":"2"}
0	{"1":2}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":1}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":true,"k2":false,"k3":null}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	[{"开源数据库":"MySQL"},"开源数据库"]
select json_contains(json,'k1',true),json from test_json order by 1,2;
json_contains(json,'k1',true)	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"1":2}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":1}
1	{"k1":true,"k2":false,"k3":null}
select json_contains(json,'k2',false),json from test_json order by 1,2;
json_contains(json,'k2',false)	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"1":2}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":1}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":true,"k2":false,"k3":null}
select json_contains(json,'k3',null),json from test_json order by 1,2;
json_contains(json,'k3',null)	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"1":2}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":1}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":true,"k2":false,"k3":null}
select json_contains(json,'k2',DOCUMENT('{"k3":12.345}')),json from test_json order by 1,2;
json_contains(json,'k2',DOCUMENT('{"k3":12.345}'))	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"1":2}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":1}
0	{"k1":[1,{"k2":["v1",2,true]},3,false]}
0	{"k1":true,"k2":false,"k3":null}
0	{}
1	{"k1":{"k2":{"k3":12.345}}}
select json_contains(json,'k2',DOCUMENT('["v_",2,true]')),json from test_json order by 1,2;
json_contains(json,'k2',DOCUMENT('["v_",2,true]'))	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"1":2}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":1}
0	{"k1":true,"k2":false,"k3":null}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
select json_contains(json,'k2',DOCUMENT('["%",2,true]')),json from test_json order by 1,2;
json_contains(json,'k2',DOCUMENT('["%",2,true]'))	json
0	[1,2,3,4]
0	[{"开源数据库":"MySQL"},"开源数据库"]
0	{"1":"2"}
0	{"1":2}
0	{"k1":"v1","k1":{"k2":"v2"}}
0	{"k1":"v1"}
0	{"k1":1}
0	{"k1":true,"k2":false,"k3":null}
0	{"k1":{"k2":{"k3":12.345}}}
0	{}
1	{"k1":[1,{"k2":["v1",2,true]},3,false]}
truncate test_json;
insert into test_json values ('');
ERROR HY000: Invalid document value: ''
select json_extract(json, 'k1') from test_json;
json_extract(json, 'k1')
truncate test_json;
insert into test_json values ('');
ERROR HY000: Invalid document value: ''
select json_contains_key(json, 'k1') from test_json;
json_contains_key(json, 'k1')
truncate test_json;
insert into test_json values ('');
ERROR HY000: Invalid document value: ''
select json_array_length(json) from test_json;
json_array_length(json)
truncate test_json;
insert into test_json values ('{}');
select json_contains(json, 'k1') from test_json;
json_contains(json, 'k1')
0
truncate test_json;
show variables like 'use_fbson_output_format';
Variable_name	Value
use_fbson_output_format	OFF
set global use_fbson_output_format = true;
ERROR HY000: Variable 'use_fbson_output_format' is a SESSION variable and can't be used with SET GLOBAL
set use_fbson_output_format = true;
insert into test_json values
(null),
('{}'),
('{"k1":"v1"}'),
('{"k1":true}'),
('{"k1":false}'),
('{"k1":null}'),
('{"k1":12}'),
('{"k1":1.23}'),
('[1,2,3,4]'),
('{"k1":{"k2":{"k3":12.345}}}'),
('{"k1":"v1","k1":{"k2":"v2"}}'),
('{"k1":[1,{"k2":["v1",2,true]},3,false]}');
select HEX(json) from test_json;
HEX(json)
NULL
010A00000000
010A0A000000026B3108020000007631
010A04000000026B3101
010A04000000026B3102
010A04000000026B3100
010A05000000026B31030C
010A0C000000026B3107AE47E17A14AEF33F
010B080000000301030203030304
010A1C000000026B310A14000000026B320A0C000000026B3307713D0AD7A3B02840
010A1C000000026B3108020000007631026B310A0A000000026B3208020000007632
010A24000000026B310B1C00000003010A12000000026B320B0A00000008020000007631030201030302
select HEX(json_extract(json,null)) from test_json order by 1;
HEX(json_extract(json,null))
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
select HEX(json_extract(json,'k1')) from test_json order by 1;
HEX(json_extract(json,'k1'))
NULL
NULL
NULL
00
01
02
030C
07AE47E17A14AEF33F
08020000007631
08020000007631
0A14000000026B320A0C000000026B3307713D0AD7A3B02840
0B1C00000003010A12000000026B320B0A00000008020000007631030201030302
select HEX(json_extract(json,'k1','k2')) from test_json order by 1;
HEX(json_extract(json,'k1','k2'))
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
0A0C000000026B3307713D0AD7A3B02840
select HEX(json_extract(json,'k1','k2','k3')) from test_json order by 1;
HEX(json_extract(json,'k1','k2','k3'))
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
07713D0AD7A3B02840
select HEX(json_extract(json,0)) from test_json order by 1;
HEX(json_extract(json,0))
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
0301
select HEX(json_extract(json,'1')) from test_json order by 1;
HEX(json_extract(json,'1'))
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
0302
select HEX(json_extract(json,'k1',1)) from test_json order by 1;
HEX(json_extract(json,'k1',1))
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
0A12000000026B320B0A00000008020000007631030201
select HEX(json_extract(json,'k1',1,'k2')) from test_json order by 1;
HEX(json_extract(json,'k1',1,'k2'))
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
0B0A00000008020000007631030201
select HEX(json_extract(json,'k1',1,'k2',0)) from test_json order by 1;
HEX(json_extract(json,'k1',1,'k2',0))
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
08020000007631
truncate test_json;
insert into test_json values
('{"MySQL":"开源数据库"}'),
('{"开源数据库":"MySQL"}');
select HEX(json) from test_json;
HEX(json)
010A1A000000054D7953514C080F000000E5BC80E6BA90E695B0E68DAEE5BA93
010A1A0000000FE5BC80E6BA90E695B0E68DAEE5BA9308050000004D7953514C
select HEX(json_extract(json,'MySQL')) from test_json order by 1;
HEX(json_extract(json,'MySQL'))
NULL
080F000000E5BC80E6BA90E695B0E68DAEE5BA93
select HEX(json_extract(json,'开源数据库')) from test_json order by 1;
HEX(json_extract(json,'开源数据库'))
NULL
08050000004D7953514C
truncate test_json;
insert into test_json values('{"k1":[1,{"k2":["v1",2,true]},3,false]}');
select HEX(json) from test_json;
HEX(json)
010A24000000026B310B1C00000003010A12000000026B320B0A00000008020000007631030201030302
select HEX(json_extract(json_extract(json_extract(json_extract(json, 'k1'), 1), 'k2'), 0)) from test_json;
HEX(json_extract(json_extract(json_extract(json_extract(json, 'k1'), 1), 'k2'), 0))
08020000007631
select json_contains_key(json_extract(json, 'k1', 1), 'k2') from test_json;
json_contains_key(json_extract(json, 'k1', 1), 'k2')
1
select json_contains(json_extract(json, 'k1'), 'k2', DOCUMENT('["v1",2,true]')) from test_json;
json_contains(json_extract(json, 'k1'), 'k2', DOCUMENT('["v1",2,true]'))
1
select json_array_length(json_extract(json, 'k1')) from test_json;
json_array_length(json_extract(json, 'k1'))
4
select HEX(json_extract(json_extract(json, 'foo'), 'k2')) from test_json;
HEX(json_extract(json_extract(json, 'foo'), 'k2'))
NULL
truncate test_json;
select HEX(json_extract('{"k1":[1,{"k2":["v1",2,true]},3,false]}','k1',1,'k2'));
HEX(json_extract('{"k1":[1,{"k2":["v1",2,true]},3,false]}','k1',1,'k2'))
0B0A00000008020000007631030201
select json_contains_key(json_extract('{"k1":[1,{"k2":["v1",2,true]},3,false]}', 'k1', 1), 'k2');
json_contains_key(json_extract('{"k1":[1,{"k2":["v1",2,true]},3,false]}', 'k1', 1), 'k2')
1
select json_contains(json_extract('{"k1":[1,{"k2":["v1",2,true]},3,false]}', 'k1'), 'k2', DOCUMENT('["v1",2,true]'));
json_contains(json_extract('{"k1":[1,{"k2":["v1",2,true]},3,false]}', 'k1'), 'k2', DOCUMENT('["v1",2,true]'))
1
INSERT INTO test_json VALUES ('{\"name\":\"Bob Thompson\",\"age\":45,\"age_string\":\"45\",\"big_age\":1234567890123,\"amount\":1.23456789,\"amount_string\":\"1.23456789\",\"true_value\":true,\"true_string\":\"true\",\"true_json\":\"true\",\"false_value\":false,\"false_string\":\"false\",\"false_json\":\"false\",\"null_value\":null,\"null_string\":\"null\",\"null_json\":\"null\",\"empty_string\":\"\",\"zero\":0,\"json_vector1\":\"[]\",\"json_vector2\":\"[1,2,3]\",\"json_vector3\":\"\\\"[]\\\"\",\"json_vector4\":\"\\\"[1,2,3]\\\"\",\"json_vector5\":\"\'[]\'\",\"json_vector6\":\"\'[1,2,3]\'\",\"json_vector7\":\"[]\",\"json_vector8\":\"[1,2,3]\",\"json_map1\":\"{}\",\"json_map2\":\"{\\\\\\\"a\\\\\\\":1,\\\\\\\"b\\\\\\\":2,\\\\\\\"c\\\\\\\":3}\",\"json_map3\":\"\\\"{}\\\"\",\"json_map4\":\"\\\"{\\\\\\\"a\\\\\\\":1,\\\\\\\"b\\\\\\\":2,\\\\\\\"c\\\\\\\":3}\\\"\",\"json_map5\":\"\'{}\'\",\"json_map6\":\"\'{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}\'\",\"json_map7\":\"{}\",\"json_map8\":\"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}\",\"address\":{\"street\":\"8008 Left Ln.\",\"state\":\"CA\",\"zipcode\":90210},\"jobs\":[\"CEO\",\"Director\",\"Engineer\"],\"map_of_vectors\":{\"one\":[10,20,30],\"two\":[\"x\",\"y\"],\"three\":[],\"four\":[true,false,null,1.2345]},\"vector_of_maps\":[{\"xx\":10,\"yy\":20,\"zz\":30},{\"100\":\"x\",\"324\":\"y\"},{},{\"x1\":true,\"x2\":false,\"x3\":null,\"x4\":1.2345}]}');
select HEX(json) from test_json;
HEX(json)

set use_fbson_output_format = false;
select json from test_json;
json
{"name":"Bob Thompson","age":45,"age_string":"45","big_age":1234567890123,"amount":1.23456789,"amount_string":"1.23456789","true_value":true,"true_string":"true","true_json":"true","false_value":false,"false_string":"false","false_json":"false","null_value":null,"null_string":"null","null_json":"null","empty_string":"","zero":0,"json_vector1":"[]","json_vector2":"[1,2,3]","json_vector3":"\"[]\"","json_vector4":"\"[1,2,3]\"","json_vector5":"'[]'","json_vector6":"'[1,2,3]'","json_vector7":"[]","json_vector8":"[1,2,3]","json_map1":"{}","json_map2":"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}","json_map3":"\"{}\"","json_map4":"\"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}\"","json_map5":"'{}'","json_map6":"'{\"a\":1,\"b\":2,\"c\":3}'","json_map7":"{}","json_map8":"{\"a\":1,\"b\":2,\"c\":3}","address":{"street":"8008 Left Ln.","state":"CA","zipcode":90210},"jobs":["CEO","Director","Engineer"],"map_of_vectors":{"one":[10,20,30],"two":["x","y"],"three":[],"four":[true,false,null,1.2345]},"vector_of_maps":[{"xx":10,"yy":20,"zz":30},{"100":"x","324":"y"},{},{"x1":true,"x2":false,"x3":null,"x4":1.2345}]}
truncate test_json;
set use_fbson_output_format = DEFAULT;
drop table test_json;
include/rpl_end.inc
show variables like 'use_fbson_input_format';
Variable_name	Value
use_fbson_input_format	OFF
set global use_fbson_input_format = true;
ERROR HY000: Variable 'use_fbson_input_format' is a SESSION variable and can't be used with SET GLOBAL
create table test_json2(json document) engine=innodb;
set use_fbson_input_format = true;
insert into test_json2 values
(fbson(null)),
(fbson('{}')),
(fbson('{"k1":"v1"}')),
(fbson('{"k1":true}')),
(fbson('{"k1":false}')),
(fbson('{"k1":null}')),
(fbson('{"k1":12}')),
(fbson('{"k1":1.23}')),
(fbson('[1,2,3,4]')),
(fbson('{"k1":{"k2":{"k3":12.345}}}')),
(fbson('{"k1":"v1","k1":{"k2":"v2"}}')),
(fbson('{"k1":[1,{"k2":["v1",2,true]},3,false]}')),
(fbson('{"MySQL":"开源数据库"}')),
(fbson('{"开源数据库":"MySQL"}'));
set use_fbson_input_format = false;
select * from test_json2;
json
NULL
{}
{"k1":"v1"}
{"k1":true}
{"k1":false}
{"k1":null}
{"k1":12}
{"k1":1.23}
[1,2,3,4]
{"k1":{"k2":{"k3":12.345}}}
{"k1":"v1","k1":{"k2":"v2"}}
{"k1":[1,{"k2":["v1",2,true]},3,false]}
{"MySQL":"开源数据库"}
{"开源数据库":"MySQL"}
drop table test_json2;
