# Checks if the slave stops executing transactions when master's binlog format
# is STATEMENT but idempotent recovery is enabled
--source include/assert_gtid_mode_on.inc
--source include/master-slave.inc

call mtr.add_suppression("Master's binlog format is not ROW but slave_use_idempotent_for_recovery is enabled on the slave");

--source include/rpl_connection_slave.inc
--source include/have_slave_use_idempotent_for_recovery.inc

--source include/rpl_connection_master.inc
create table t1(a int);
set session binlog_format=STATEMENT;
insert into t1 values(1);

# Wait till we hit the binlog format mismatch error
--source include/rpl_connection_slave.inc
--let $slave_sql_errno= convert_error(ER_MTS_INCONSISTENT_DATA)  # 1756
--let $show_slave_sql_error= 1
--source include/wait_for_slave_sql_error.inc

# Print table
--source include/rpl_connection_slave.inc
--error ER_NO_SUCH_TABLE
select * from t1;

--source include/rpl_connection_slave.inc
# Turn off idempotent recovery and start the slave again
set @save.slave_use_idempotent_for_recovery = @@global.slave_use_idempotent_for_recovery;
set global slave_use_idempotent_for_recovery=no;
--source include/start_slave.inc

--source include/rpl_connection_master.inc
--source include/sync_slave_sql_with_master.inc

--source include/rpl_connection_slave.inc
# Print table again
echo "Table after error fixed";
select * from t1;

# Cleanup
set @@global.slave_use_idempotent_for_recovery = @save.slave_use_idempotent_for_recovery;

--source include/rpl_connection_master.inc
drop table t1;
--source include/rpl_end.inc
