--source include/count_sessions.inc

TRUNCATE TABLE performance_schema.events_statements_summary_by_all;

create user user_super@localhost identified by 'su';
grant all on *.* to user_super@localhost with grant option;

connect (con13, localhost, user_super,su,test);


####################################################
### Case 1: performance_schema_esms_by_all=off. No data in events_statements_summary_by_all.
####################################################
--echo Case 1: performance_schema_esms_by_all=off
select @@performance_schema_esms_by_all;
select 42;

select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all;
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;

####################################################
### Case 2: sql_stats_control=ON, Data will be stored in sql_statistics.
####################################################
--echo Case 2: sql_stats_control=ON
set global performance_schema_esms_by_all = on;
select @@performance_schema_esms_by_all;

# Check that all data was cleared.
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all;
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;

select 1;
select 2;
select 100;

select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all;
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;

create table t1(c int);
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
insert into t1 values(5);
update t1 set c=c+100;
update t1 set c=c+300;
update t1 set c=c+500;
delete from t1 where c=905;
delete from t1 where c=903;

select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted from performance_schema.events_statements_summary_by_all;
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;

####################################################
### Case 3: TRUNCATE TABLE.
####################################################
--echo Case 3: TRUNCATE TABLE
TRUNCATE TABLE performance_schema.events_statements_summary_by_all;
select 1 union select 2;
select 1 union select 2 union select 3;

select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all;
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;

####################################################
### Case 4: performance_schema_esms_by_all=off. No data in events_statements_summary_by_all.
####################################################
--echo Case 4: performance_schema_esms_by_all=off. No data in events_statements_summary_by_all.
set global performance_schema_esms_by_all = off;
select @@performance_schema_esms_by_all;

select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all;
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;

####################################################
### Case 5: Multi-query support
####################################################
--echo Case 5: Multi-query support
set global performance_schema_esms_by_all = on;
select @@performance_schema_esms_by_all;

delimiter ||||;

select 1;
create table t2(c int);
insert into t2 values(100);
select * from t2;
update t2 set c=c+7;
delete from t2 where c=107;
drop table t2;
||||

CREATE TABLE test.t11(a int) ||||
set @query= 'SELECT * FROM test.t11 WHERE a > 5 and a < 10 and a <> 9' ||||
PREPARE STMT FROM @query; EXECUTE STMT; ||||
DROP TABLE test.t11 ||||

# reset delimiter
delimiter ;||||
select schema_name, query_sample_text, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted from performance_schema.events_statements_summary_by_all order by digest;
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;

--echo Verify index working properly
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all
where schema_name = 'test' and digest = '1bdaf02b6c6dd4f5bfc3045555865597' and user = 'fake';
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all
where schema_name = 'test' and digest = '1bdaf02b6c6dd4f5bfc3045555865597' and user = 'user_super' and client_id = 'fake';
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all
where schema_name = 'test' and digest = '1bdaf02b6c6dd4f5bfc3045555865597' and user = 'user_super' and client_id = '0000000000000000d194f27ab572142e';

####################################################
### Case 6: Verify SUM_CPU_TIME
####################################################
--echo Case 6: Verify SUM_CPU_TIME
set global performance_schema_esms_by_all = on;
select @@performance_schema_esms_by_all;

set global enable_cputime_with_wallclock = 1;
let $start_time = `select now()`;
SELECT SLEEP(1);
--let $sum_cpu_time = query_get_value(select sum_cpu_time as Value from performance_schema.events_statements_summary_by_all where query_sample_text = 'SELECT SLEEP(1)', Value, 1)
--let $assert_text= SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should increase by a non-zero value.
--let $assert_cond= $sum_cpu_time > 0
--source include/assert.inc
SELECT SLEEP(1);
--let $sum_cpu_time = query_get_value(select sum_cpu_time as Value from performance_schema.events_statements_summary_by_all where query_sample_text = 'SELECT SLEEP(1)', Value, 1)
--let $assert_text= SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should be more than 2000000000000.
--let $assert_cond= $sum_cpu_time > 2000000000000
--source include/assert.inc
SELECT SLEEP(1);
--let $sum_cpu_time = query_get_value(select sum_cpu_time as Value from performance_schema.events_statements_summary_by_all where query_sample_text = 'SELECT SLEEP(1)', Value, 1)
--let $assert_text= SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should be more than 3000000000000.
--let $assert_cond= $sum_cpu_time > 3000000000000
--source include/assert.inc
SELECT SLEEP(1);
--let $sum_cpu_time = query_get_value(select sum_cpu_time as Value from performance_schema.events_statements_summary_by_all where query_sample_text = 'SELECT SLEEP(1)', Value, 1)
--let $assert_text= SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should be more than 4000000000000.
--let $assert_cond= $sum_cpu_time > 4000000000000
--source include/assert.inc
let $end_time = `select timestampdiff(second, '$start_time', now())`;
--let $assert_text= SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should be smaller than elapsed time.
--let $assert_cond= $sum_cpu_time < ($end_time + 1) * 1000000000000
--source include/assert.inc
let $start_time = `select now()`;
select 1 union select 2;
let $end_time = `select timestampdiff(second, '$start_time', now())`;
--let $sum_cpu_time = query_get_value(select sum_cpu_time as Value from performance_schema.events_statements_summary_by_all where query_sample_text = 'select 1 union select 2', Value, 1)
--let $assert_text= SUM_CPU_TIME on events_statements_summary_by_all for 'select 1 union select 2' should be smaller than elapsed time.
--let $assert_cond= $sum_cpu_time < ($end_time + 1) * 1000000000000
--source include/assert.inc
truncate performance_schema.events_statements_summary_by_all;
set global enable_cputime_with_wallclock = 0;
SELECT SLEEP(1);
--let $sum_cpu_time = query_get_value(select sum_cpu_time as Value from performance_schema.events_statements_summary_by_all where query_sample_text = 'SELECT SLEEP(1)', Value, 1)
--let $assert_text= SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should increase by a non-zero value.
--let $assert_cond= $sum_cpu_time > 0
--source include/assert.inc
set global enable_cputime_with_wallclock = DEFAULT;

####################################################
### Case 6.1: Verify SUM_ELAPSED_TIME
####################################################
--echo Case 6.1: Verify SUM_ELAPSED_TIME
set global performance_schema_esms_by_all = on;
select @@performance_schema_esms_by_all;

set global enable_cputime_with_wallclock = 1;
let $start_time = `select now()`;
SELECT SLEEP(2);
--let $sum_elapsed_time = query_get_value(select sum_elapsed_time as Value from performance_schema.events_statements_summary_by_all where query_sample_text = 'SELECT SLEEP(2)', Value, 1)
--let $assert_text= SUM_ELAPSED_TIME on events_statements_summary_by_all for 'SELECT SLEEP(2)' should increase by a non-zero value.
--let $assert_cond= $sum_elapsed_time > 2000000000000
--source include/assert.inc
SELECT SLEEP(2);
let $end_time = `select timestampdiff(second, '$start_time', now())`;
--let $sum_elapsed_time = query_get_value(select sum_elapsed_time as Value from performance_schema.events_statements_summary_by_all where query_sample_text = 'SELECT SLEEP(2)', Value, 1)
--let $assert_text= SUM_ELAPSED_TIME on events_statements_summary_by_all for 'SELECT SLEEP(2)' should increase by a non-zero value.
--let $assert_cond= $sum_elapsed_time < ($end_time + 1) * 1000000000000
--source include/assert.inc
--let $assert_text= SUM_ELAPSED_TIME on events_statements_summary_by_all for 'SELECT SLEEP(2)' should be more than 4 seconds with enable_cputime_with_wallclock.
--let $assert_cond= $sum_elapsed_time > 4000000000000
--source include/assert.inc
let $start_time = `select now()`;
select 1 union select 2 union select 3;
let $end_time = `select timestampdiff(second, '$start_time', now())`;
--let $sum_elapsed_time = query_get_value(select sum_cpu_time as Value from performance_schema.events_statements_summary_by_all where query_sample_text = 'select 1 union select 2 union select 3', Value, 1)
--let $assert_text= SUM_ELAPSED_TIME on events_statements_summary_by_all for 'select 1 union select 2 union select 3' should be smaller than elased time.
--let $assert_cond= $sum_elapsed_time < ($end_time + 1) * 1000000000000
--source include/assert.inc
set global enable_cputime_with_wallclock = DEFAULT;

#####################################################
### Case 7: DML row counters unchanged for tmp tables
#####################################################
--echo Case 7: DML row counters unchanged for tmp tables

create table test.tables(
TABLE_CATALOG    varchar(64)                                                        ,
TABLE_SCHEMA     varchar(64)                                                        ,
TABLE_NAME       varchar(64)                                                        ,
TABLE_TYPE       enum('BASE TABLE','VIEW','SYSTEM VIEW')                            ,
ENGINE           varchar(64)                                                        ,
VERSION          int                                                                ,
ROW_FORMAT       enum('Fixed','Dynamic','Compressed','Redundant','Compact','Paged') ,
TABLE_ROWS       bigint unsigned                                                    ,
AVG_ROW_LENGTH   bigint unsigned                                                    ,
DATA_LENGTH      bigint unsigned                                                    ,
MAX_DATA_LENGTH  bigint unsigned                                                    ,
INDEX_LENGTH     bigint unsigned                                                    ,
DATA_FREE        bigint unsigned                                                    ,
AUTO_INCREMENT   bigint unsigned                                                    ,
CREATE_TIME      timestamp                                                          ,
UPDATE_TIME      datetime                                                           ,
CHECK_TIME       datetime                                                           ,
TABLE_COLLATION  varchar(64)                                                        ,
CHECKSUM         bigint                                                             ,
CREATE_OPTIONS   varchar(256)                                                       ,
TABLE_COMMENT    text                                                               ,
TABLE_SE_PRIVATE_DATA text);

insert into tables select * from information_schema.tables;
insert into tables select * from tables;
insert into tables select * from tables;
insert into tables select * from tables;
insert into tables select * from tables;
insert into tables select * from tables;
insert into tables select * from tables;

set global performance_schema_esms_by_all = on;
set global skip_dml_counters_for_tmp_tables=off;

### not interested in the actual query result, only the statistics
--disable_result_log
select a.table_name, a.row_count
from (select table_name, count(1) row_count from tables group by table_name) a
where table_name like 'T%' limit 10;

select a100.table_name
from (select table_name from tables limit 100) a100,
     (select table_name from tables limit 100) b100
where a100.table_name=b100.table_name
  and b100.table_name like 'T%'
limit 10;
--enable_result_log

select 1 union select 2 union select 3;

--echo Case 7.1: skip_dml_counters_for_tmp_tables off
select case when SUM_ROWS_SENT >0 then 'success' else 'failure' end sent_check,
       case when SUM_ROWS_EXAMINED >0 then 'success' else 'failure' end examined_check,
       case when (SUM_ROWS_UPDATED + SUM_ROWS_DELETED + SUM_ROWS_INSERTED) > 0 then 'success' else 'failure' end dml_check,
       digest_text
from performance_schema.events_statements_summary_by_all a, performance_schema.sql_text b
where a.digest=b.digest and (digest_text like 'SELECT `a%' or digest_text like 'SELECT %UNION%');

truncate performance_schema.events_statements_summary_by_all;
set global skip_dml_counters_for_tmp_tables=on;

### not interested in the actual query result, only the statistics
--disable_result_log
select a.table_name, a.row_count
from (select table_name, count(1) row_count from tables group by table_name) a
where table_name like 'T%' limit 10;

select a100.table_name
from (select table_name from tables limit 100) a100,
     (select table_name from tables limit 100) b100
where a100.table_name=b100.table_name
  and b100.table_name like 'T%'
limit 10;
--enable_result_log

select 1 union select 2 union select 3;

--echo Case 7.2: skip_dml_counters_for_tmp_tables on
select case when SUM_ROWS_SENT >0 then 'success' else 'failure' end sent_check,
       case when SUM_ROWS_EXAMINED >0 then 'success' else 'failure' end examined_check,
       case when (SUM_ROWS_UPDATED + SUM_ROWS_DELETED + SUM_ROWS_INSERTED) = 0 then 'success' else 'failure' end dml_check,
       digest_text
from performance_schema.events_statements_summary_by_all a, performance_schema.sql_text b
where a.digest=b.digest and (digest_text like 'SELECT `a%' or digest_text like 'SELECT %UNION%');

################################################
### Case 8: unit test for sql_stats_read_control
################################################
--echo Case 8: unit test for sql_stats_read_control

set sql_stats_read_control=false;

select 1;
--error ER_IS_TABLE_READ_DISABLED
select * from performance_schema.events_statements_summary_by_all;
--error ER_IS_TABLE_READ_DISABLED
select * from performance_schema.sql_text;
--error ER_IS_TABLE_READ_DISABLED
select * from performance_schema.client_attributes;

# cleanup
set sql_stats_read_control = default;

###########
### Cleanup
###########
--echo Cleanup
connection default;
set global performance_schema_esms_by_all = DEFAULT;
set global skip_dml_counters_for_tmp_tables= DEFAULT;
drop table t1;
drop table tables;
drop user user_super@localhost;
disconnect con13;

--source include/wait_until_count_sessions.inc
