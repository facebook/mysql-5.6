TRUNCATE TABLE performance_schema.events_statements_summary_by_all;
create user user_super@localhost identified by 'su';
grant all on *.* to user_super@localhost with grant option;
Case 1: performance_schema_esms_by_all=off
select @@performance_schema_esms_by_all;
@@performance_schema_esms_by_all
0
select 42;
42
42
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all;
schema_name	digest	user	client_id	plan_id	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;
schema_name	digest	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
test	3237dac9486d0be6dda852ff087e5f89	1	0	0	0
test	6b262aae8b24a6e9a49a9fdad290a25d	1	0	1	0
test	252f5231e1e9a8b8e04f5f6179e4f7ed	1	0	33	1
test	aaee6b4d5f9c26d4d43d3967f53cd8c7	1	0	0	0
test	a532c6f3e890282b7eee77f35ee85ae9	1	0	0	0
test	ee539b147b1561c36bd9e7ad53e5fb38	1	0	0	0
Case 2: sql_stats_control=ON
set global performance_schema_esms_by_all = on;
select @@performance_schema_esms_by_all;
@@performance_schema_esms_by_all
1
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all;
schema_name	digest	user	client_id	plan_id	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
test	1bdaf02b6c6dd4f5bfc3045555865597	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0	0
test	aaee6b4d5f9c26d4d43d3967f53cd8c7	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0	0
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;
schema_name	digest	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
select 1;
1
1
select 2;
2
2
select 100;
100
100
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all;
schema_name	digest	user	client_id	plan_id	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
test	1bdaf02b6c6dd4f5bfc3045555865597	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0	0
test	aaee6b4d5f9c26d4d43d3967f53cd8c7	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0	0
test	ee539b147b1561c36bd9e7ad53e5fb38	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0	0
test	532f13eb85f19ef3ad1a5fabe39fcfca	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0	0
test	a532c6f3e890282b7eee77f35ee85ae9	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	3	0	0	0
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;
schema_name	digest	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
create table t1(c int);
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
insert into t1 values(5);
update t1 set c=c+100;
update t1 set c=c+300;
update t1 set c=c+500;
delete from t1 where c=905;
delete from t1 where c=903;
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted from performance_schema.events_statements_summary_by_all;
schema_name	digest	user	client_id	plan_id	count_star	sum_rows_deleted	sum_rows_inserted
test	1bdaf02b6c6dd4f5bfc3045555865597	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0
test	aaee6b4d5f9c26d4d43d3967f53cd8c7	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0
test	ee539b147b1561c36bd9e7ad53e5fb38	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	2	0	0
test	532f13eb85f19ef3ad1a5fabe39fcfca	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	2	0	0
test	a532c6f3e890282b7eee77f35ee85ae9	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	3	0	0
test	d210d88fff8eeea1393763fdcc68c999	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	12
test	de4ac3f385e51f51f081f37368d6e55f	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	5	0	5
test	437f75e69680d60cca3e8a82393fa4f1	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	3	0	0
test	3379f8d08c8ef1406d99c65ff9b6b097	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	2	2	0
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;
schema_name	digest	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
Case 3: TRUNCATE TABLE
TRUNCATE TABLE performance_schema.events_statements_summary_by_all;
select 1 union select 2;
1
1
2
select 1 union select 2 union select 3;
1
1
2
3
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all;
schema_name	digest	user	client_id	plan_id	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
test	3237dac9486d0be6dda852ff087e5f89	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0	0
test	7e393507a197a79395cb5c88376cb2d3	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	2	0
test	351069bf91b28ffff52fb54d89de9e45	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	3	0
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;
schema_name	digest	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
Case 4: performance_schema_esms_by_all=off. No data in events_statements_summary_by_all.
set global performance_schema_esms_by_all = off;
select @@performance_schema_esms_by_all;
@@performance_schema_esms_by_all
0
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all;
schema_name	digest	user	client_id	plan_id	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;
schema_name	digest	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
test	ceffef89a77026913c52137e9c7a3615	1	0	0	0
test	aaee6b4d5f9c26d4d43d3967f53cd8c7	1	0	0	0
test	ee539b147b1561c36bd9e7ad53e5fb38	1	0	0	0
Case 5: Multi-query support
set global performance_schema_esms_by_all = on;
select @@performance_schema_esms_by_all;
@@performance_schema_esms_by_all
1
select 1;
create table t2(c int);
insert into t2 values(100);
select * from t2;
update t2 set c=c+7;
delete from t2 where c=107;
drop table t2;
||||
1
1
c
100
CREATE TABLE test.t11(a int) ||||
set @query= 'SELECT * FROM test.t11 WHERE a > 5 and a < 10 and a <> 9' ||||
PREPARE STMT FROM @query; EXECUTE STMT; ||||
a
DROP TABLE test.t11 ||||
select schema_name, query_sample_text, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted from performance_schema.events_statements_summary_by_all order by digest;
schema_name	query_sample_text	digest	user	client_id	plan_id	count_star	sum_rows_deleted	sum_rows_inserted
test	drop table t2	0092392cb59149e0726b0b82c62d3b73	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	12	0
test	create table t2(c int);
insert into t2 values(100);
select * from t2;
update t2 set c=c+7;
delete from t2 where c=107;
drop table t2	08eb447c2908ae85dbf2389bb755a47c	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	12
test	set global performance_schema_esms_by_all = on	1bdaf02b6c6dd4f5bfc3045555865597	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0
test	set @query= 'SELECT * FROM test.t11 WHERE a > 5 and a < 10 and a <> 9'	2e8c4504c4ed8aefa4a0601d8983caf2	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0
test	update t2 set c=c+7;
delete from t2 where c=107;
drop table t2	37a4ab3f20bfa2cadc339f81a225a3ea	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0
test	EXECUTE STMT	6c3a3828b4683176bf5613bf50781aff	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0
test	DROP TABLE test.t11	8fa792b76e7a194c5f7335c9064b77a2	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	12	0
test	select * from t2;
update t2 set c=c+7;
delete from t2 where c=107;
drop table t2	9355f873b85ca62c15f9c76c7d577a46	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0
test	select 1;
create table t2(c int);
insert into t2 values(100);
select * from t2;
update t2 set c=c+7;
delete from t2 where c=107;
drop table t2	a532c6f3e890282b7eee77f35ee85ae9	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0
test	select @@performance_schema_esms_by_all	aaee6b4d5f9c26d4d43d3967f53cd8c7	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0
test	CREATE TABLE test.t11(a int)	b90de024eac53b1869f604d5e84bf832	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	12
test	delete from t2 where c=107;
drop table t2	c6b47f584c3c723a695af80568462861	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	1	0
test	PREPARE STMT FROM @query; EXECUTE STMT	e6e3e2d3faddc5b422a8775cd7c37755	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0
test	insert into t2 values(100);
select * from t2;
update t2 set c=c+7;
delete from t2 where c=107;
drop table t2	ea8d7221939e31cd79bb5a0800f1c421	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	1
select schema_name, digest, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_digest;
schema_name	digest	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
Verify index working properly
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all
where schema_name = 'test' and digest = '1bdaf02b6c6dd4f5bfc3045555865597' and user = 'fake';
schema_name	digest	user	client_id	plan_id	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all
where schema_name = 'test' and digest = '1bdaf02b6c6dd4f5bfc3045555865597' and user = 'user_super' and client_id = 'fake';
schema_name	digest	user	client_id	plan_id	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
select schema_name, digest, user, client_id, plan_id, count_star, sum_rows_deleted, sum_rows_inserted, sum_rows_updated from performance_schema.events_statements_summary_by_all
where schema_name = 'test' and digest = '1bdaf02b6c6dd4f5bfc3045555865597' and user = 'user_super' and client_id = '0000000000000000d194f27ab572142e';
schema_name	digest	user	client_id	plan_id	count_star	sum_rows_deleted	sum_rows_inserted	sum_rows_updated
test	1bdaf02b6c6dd4f5bfc3045555865597	user_super	0000000000000000d194f27ab572142e	00000000000000000000000000000000	1	0	0	0
Case 6: Verify SUM_CPU_TIME
set global performance_schema_esms_by_all = on;
select @@performance_schema_esms_by_all;
@@performance_schema_esms_by_all
1
set global enable_cputime_with_wallclock = 1;
SELECT SLEEP(1);
SLEEP(1)
0
include/assert.inc [SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should increase by a non-zero value.]
SELECT SLEEP(1);
SLEEP(1)
0
include/assert.inc [SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should be more than 2000000000000.]
SELECT SLEEP(1);
SLEEP(1)
0
include/assert.inc [SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should be more than 3000000000000.]
SELECT SLEEP(1);
SLEEP(1)
0
include/assert.inc [SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should be more than 4000000000000.]
include/assert.inc [SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should be smaller than elapsed time.]
select 1 union select 2;
1
1
2
include/assert.inc [SUM_CPU_TIME on events_statements_summary_by_all for 'select 1 union select 2' should be smaller than elapsed time.]
truncate performance_schema.events_statements_summary_by_all;
set global enable_cputime_with_wallclock = 0;
SELECT SLEEP(1);
SLEEP(1)
0
include/assert.inc [SUM_CPU_TIME on events_statements_summary_by_all for 'SELECT SLEEP(1)' should increase by a non-zero value.]
set global enable_cputime_with_wallclock = DEFAULT;
Case 6.1: Verify SUM_ELAPSED_TIME
set global performance_schema_esms_by_all = on;
select @@performance_schema_esms_by_all;
@@performance_schema_esms_by_all
1
set global enable_cputime_with_wallclock = 1;
SELECT SLEEP(2);
SLEEP(2)
0
include/assert.inc [SUM_ELAPSED_TIME on events_statements_summary_by_all for 'SELECT SLEEP(2)' should increase by a non-zero value.]
SELECT SLEEP(2);
SLEEP(2)
0
include/assert.inc [SUM_ELAPSED_TIME on events_statements_summary_by_all for 'SELECT SLEEP(2)' should increase by a non-zero value.]
include/assert.inc [SUM_ELAPSED_TIME on events_statements_summary_by_all for 'SELECT SLEEP(2)' should be more than 4 seconds with enable_cputime_with_wallclock.]
select 1 union select 2 union select 3;
1
1
2
3
include/assert.inc [SUM_ELAPSED_TIME on events_statements_summary_by_all for 'select 1 union select 2 union select 3' should be smaller than elased time.]
set global enable_cputime_with_wallclock = DEFAULT;
Case 7: DML row counters unchanged for tmp tables
create table test.tables(
TABLE_CATALOG    varchar(64)                                                        ,
TABLE_SCHEMA     varchar(64)                                                        ,
TABLE_NAME       varchar(64)                                                        ,
TABLE_TYPE       enum('BASE TABLE','VIEW','SYSTEM VIEW')                            ,
ENGINE           varchar(64)                                                        ,
VERSION          int                                                                ,
ROW_FORMAT       enum('Fixed','Dynamic','Compressed','Redundant','Compact','Paged') ,
TABLE_ROWS       bigint unsigned                                                    ,
AVG_ROW_LENGTH   bigint unsigned                                                    ,
DATA_LENGTH      bigint unsigned                                                    ,
MAX_DATA_LENGTH  bigint unsigned                                                    ,
INDEX_LENGTH     bigint unsigned                                                    ,
DATA_FREE        bigint unsigned                                                    ,
AUTO_INCREMENT   bigint unsigned                                                    ,
CREATE_TIME      timestamp                                                          ,
UPDATE_TIME      datetime                                                           ,
CHECK_TIME       datetime                                                           ,
TABLE_COLLATION  varchar(64)                                                        ,
CHECKSUM         bigint                                                             ,
CREATE_OPTIONS   varchar(256)                                                       ,
TABLE_COMMENT    text                                                               ,
TABLE_SE_PRIVATE_DATA text);
insert into tables select * from information_schema.tables;
insert into tables select * from tables;
insert into tables select * from tables;
insert into tables select * from tables;
insert into tables select * from tables;
insert into tables select * from tables;
insert into tables select * from tables;
set global performance_schema_esms_by_all = on;
set global skip_dml_counters_for_tmp_tables=off;
select a.table_name, a.row_count
from (select table_name, count(1) row_count from tables group by table_name) a
where table_name like 'T%' limit 10;
select a100.table_name
from (select table_name from tables limit 100) a100,
(select table_name from tables limit 100) b100
where a100.table_name=b100.table_name
and b100.table_name like 'T%'
limit 10;
select 1 union select 2 union select 3;
1
1
2
3
Case 7.1: skip_dml_counters_for_tmp_tables off
select case when SUM_ROWS_SENT >0 then 'success' else 'failure' end sent_check,
case when SUM_ROWS_EXAMINED >0 then 'success' else 'failure' end examined_check,
case when (SUM_ROWS_UPDATED + SUM_ROWS_DELETED + SUM_ROWS_INSERTED) > 0 then 'success' else 'failure' end dml_check,
digest_text
from performance_schema.events_statements_summary_by_all a, performance_schema.sql_text b
where a.digest=b.digest and (digest_text like 'SELECT `a%' or digest_text like 'SELECT %UNION%');
sent_check	examined_check	dml_check	digest_text
success	success	success	SELECT `a` . `table_name` , `a` . `row_count` FROM ( SELECT TABLE_NAME , COUNT (?) ROW_COUNT FROM TABLES GROUP BY TABLE_NAME ) `a` WHERE TABLE_NAME LIKE ? LIMIT ?
success	success	success	SELECT `a100` . `table_name` FROM ( SELECT TABLE_NAME FROM TABLES LIMIT ? ) `a100` , ( SELECT TABLE_NAME FROM TABLES LIMIT ? ) `b100` WHERE `a100` . `table_name` = `b100` . `table_name` AND `b100` . `table_name` LIKE ? LIMIT ?
success	success	success	SELECT ? UNION SELECT ? UNION SELECT ?
truncate performance_schema.events_statements_summary_by_all;
set global skip_dml_counters_for_tmp_tables=on;
select a.table_name, a.row_count
from (select table_name, count(1) row_count from tables group by table_name) a
where table_name like 'T%' limit 10;
select a100.table_name
from (select table_name from tables limit 100) a100,
(select table_name from tables limit 100) b100
where a100.table_name=b100.table_name
and b100.table_name like 'T%'
limit 10;
select 1 union select 2 union select 3;
1
1
2
3
Case 7.2: skip_dml_counters_for_tmp_tables on
select case when SUM_ROWS_SENT >0 then 'success' else 'failure' end sent_check,
case when SUM_ROWS_EXAMINED >0 then 'success' else 'failure' end examined_check,
case when (SUM_ROWS_UPDATED + SUM_ROWS_DELETED + SUM_ROWS_INSERTED) = 0 then 'success' else 'failure' end dml_check,
digest_text
from performance_schema.events_statements_summary_by_all a, performance_schema.sql_text b
where a.digest=b.digest and (digest_text like 'SELECT `a%' or digest_text like 'SELECT %UNION%');
sent_check	examined_check	dml_check	digest_text
success	success	success	SELECT `a` . `table_name` , `a` . `row_count` FROM ( SELECT TABLE_NAME , COUNT (?) ROW_COUNT FROM TABLES GROUP BY TABLE_NAME ) `a` WHERE TABLE_NAME LIKE ? LIMIT ?
success	success	success	SELECT `a100` . `table_name` FROM ( SELECT TABLE_NAME FROM TABLES LIMIT ? ) `a100` , ( SELECT TABLE_NAME FROM TABLES LIMIT ? ) `b100` WHERE `a100` . `table_name` = `b100` . `table_name` AND `b100` . `table_name` LIKE ? LIMIT ?
success	success	success	SELECT ? UNION SELECT ? UNION SELECT ?
Case 8: unit test for sql_stats_read_control
set sql_stats_read_control=false;
select 1;
1
1
select * from performance_schema.events_statements_summary_by_all;
ERROR HY000: Reads are disabled on EVENTS_STATEMENTS_SUMMARY_BY_ALL performance schema table
select * from performance_schema.sql_text;
ERROR HY000: Reads are disabled on SQL_TEXT performance schema table
select * from performance_schema.client_attributes;
ERROR HY000: Reads are disabled on CLIENT_ATTRIBUTES performance schema table
set sql_stats_read_control = default;
Cleanup
set global performance_schema_esms_by_all = DEFAULT;
set global skip_dml_counters_for_tmp_tables= DEFAULT;
drop table t1;
drop table tables;
drop user user_super@localhost;
