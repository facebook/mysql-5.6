--echo #
--echo # Test on AFTER_SYNC wait point
--echo # #######################################################################
--echo # Case 1: Single statement transaction
--echo #
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $yes_tx= query_get_value(SHOW STATUS LIKE 'Rpl_semi_sync_master_yes_tx', Value, 1)
show status like "rpl_semi_sync_master_yes_tx";
SET DEBUG_SYNC= "after_call_after_sync_observer SIGNAL after_sync_done WAIT_FOR end";
--send INSERT INTO t1 VALUES(1);

--source include/rpl_connection_master.inc
SET DEBUG_SYNC= "now WAIT_FOR after_sync_done";

show status like "rpl_semi_sync_master_yes_tx";
--let $assert_text= rpl_semi_sync_master_yes_tx increased 1
--let $assert_cond= VARIABLE_VALUE = $yes_tx+1 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = "rpl_semi_sync_master_yes_tx"
--source include/assert.inc

--let $assert_text= Table is empty right now.
--let $assert_cond= COUNT(*) = 0 FROM t1
--source include/assert.inc

--sync_slave_with_master

--let $assert_text= Table has 1 record
--let $assert_cond= COUNT(*) = 1 FROM t1;
--source include/assert.inc

--source include/rpl_connection_master.inc
SET DEBUG_SYNC= "now SIGNAL end";

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--reap

# Varify that after_commit hook is not executed.
--let $assert_text= rpl_semi_sync_master_yes_tx increased only 1
--let $assert_cond= VARIABLE_VALUE = $yes_tx+1 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = "rpl_semi_sync_master_yes_tx"
--source include/assert.inc

TRUNCATE t1;

--echo #
--echo # Test on AFTER_SYNC wait point
--echo # #######################################################################
--echo # Case 2: Real transaction
--echo #

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $yes_tx= query_get_value(SHOW STATUS LIKE 'Rpl_semi_sync_master_yes_tx', Value, 1)

SET DEBUG_SYNC= "after_call_after_sync_observer SIGNAL after_sync_done WAIT_FOR end";
BEGIN;
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES(2);
--send COMMIT

--source include/rpl_connection_master.inc
SET DEBUG_SYNC= "now WAIT_FOR after_sync_done";

--let $assert_text= rpl_semi_sync_master_yes_tx increased 1
--let $assert_cond= VARIABLE_VALUE = $yes_tx+1 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = "rpl_semi_sync_master_yes_tx"
--source include/assert.inc

--let $assert_text= Table is empty right now.
--let $assert_cond= COUNT(*) = 0 FROM t1
--source include/assert.inc

--sync_slave_with_master

--let $assert_text= Table has two records
--let $assert_cond= COUNT(*) = 2 FROM t1;
--source include/assert.inc

--source include/rpl_connection_master.inc
SET DEBUG_SYNC= "now SIGNAL end";

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--reap

# Varify that after_commit hook is not executed.
--let $assert_text= rpl_semi_sync_master_yes_tx increased only 1
--let $assert_cond= VARIABLE_VALUE = $yes_tx+1 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = "rpl_semi_sync_master_yes_tx"
--source include/assert.inc

TRUNCATE t1;

--echo #
--echo # Test on AFTER_COMMIT wait point
--echo # #######################################################################
--echo # Verify after_sync hook will not be executed
--echo #
--let $yes_tx= query_get_value(SHOW STATUS LIKE 'Rpl_semi_sync_master_yes_tx', Value, 1)
--let $no_tx= query_get_value(SHOW STATUS LIKE 'Rpl_semi_sync_master_no_tx', Value, 1)

SET GLOBAL rpl_semi_sync_master_wait_point= AFTER_COMMIT;
SET DEBUG_SYNC= "before_call_after_commit_observer SIGNAL engine_commit_done
                 WAIT_FOR end";
--send INSERT INTO t1 VALUES(1);

--source include/rpl_connection_master.inc
SET DEBUG_SYNC= "now WAIT_FOR engine_commit_done";

--let $assert_text= Table is empty right now.
--let $assert_cond= COUNT(*) = 1 FROM t1
--source include/assert.inc

--let $assert_text= rpl_semi_sync_master_yes_tx was not increased
--let $assert_cond= VARIABLE_VALUE = $yes_tx FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = "rpl_semi_sync_master_yes_tx"
--source include/assert.inc

--let $assert_text= rpl_semi_sync_master_no_tx was not increased
--let $assert_cond= VARIABLE_VALUE = $no_tx FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = "rpl_semi_sync_master_no_tx"
--source include/assert.inc

SET DEBUG_SYNC= "now SIGNAL end";
SET DEBUG_SYNC= "RESET";
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--reap

SET GLOBAL rpl_semi_sync_master_wait_point= AFTER_SYNC;
TRUNCATE t1;
--sync_slave_with_master
