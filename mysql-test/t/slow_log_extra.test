#
# Test --log-slow-extra
#

--source include/have_innodb.inc

# Just in case slow_log_extra-slow.log already exists, delete it first.
--perl
if (-e "$ENV{'MYSQLTEST_VARDIR'}/mysqld.1/data/slow_log_extra-slow.log") {
   unlink("$ENV{'MYSQLTEST_VARDIR'}/mysqld.1/data/slow_log_extra-slow.log");
}
EOF

set @my_long_query_time = @@global.long_query_time;
set @my_slow_logname = @@global.slow_query_log_file;
set global slow_query_log_file = "slow_log_extra-slow.log";

#
# Confirm that per-query stats work.
#

set global long_query_time=0;
connect (con,localhost,root,,);

--disable_warnings
drop table if exists islow;
drop table if exists mslow;
--enable_warnings

create table islow(i int) engine=innodb;
insert into islow values (1), (2), (3), (4), (5), (6), (7), (8);

create table mslow(i int) engine=myisam;
insert into mslow values (1), (2), (3), (4), (5), (6), (7), (8);

select * from islow;
select * from islow;

select * from mslow;
select * from mslow;

#
# Testing multi-statement slow log underflow
#

# PS doesn't support multi-statements
--disable_ps_protocol

delimiter ||||;

# the following is a multi-stmt query which will be executed in one batch
# the flush command will reset status in the middle of multi-stmt
select * from islow;
flush status;
select * from mslow ||||

delimiter ;||||

--enable_ps_protocol

# Wait for all output lines to show up in the slow log file
let $file_lines_count=13;
let $file_lines_pattern= ^# Query_time;
let $file_lines_filename=
    $MYSQLTEST_VARDIR/mysqld.1/data/slow_log_extra-slow.log;
--source include/wait_for_file_lines.inc

connection default;
set global long_query_time = @my_long_query_time;
set global slow_query_log_file = @my_slow_logname;

disconnect con;

# Check the log results
let $slow_log_output_filename = $file_lines_filename;
let $slow_log_output_count = $file_lines_count;
--source include/validate_slow_log_output.inc

drop table islow;
drop table mslow;
