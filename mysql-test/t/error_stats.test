#
# tests for information_schema table ERROR_STATISTICS
#

--disable_warnings
drop table if exists test_error_stats;
--enable_warnings
--disable_abort_on_error

#
# Make sure no errors in the system
#

flush statistics;
select count(*) from information_schema.error_statistics;

create table test_error_stats (i int primary key, j tinyint not null, k char(6));

#
# Confirm that errors and warnings get recorded in the table
#

# expecting two errors
insert into test_error_stats values (null, 1, 'foo'); #error
insert into test_error_stats values (1, 2, 'bar'); #ok
insert into test_error_stats values (1, 3, ''); #error
select count(*) from test_error_stats;

select error_code, error_name, errors_total from information_schema.error_statistics order by error_code;

# expecting three warnings
insert into test_error_stats values (2, 10,'mysqltest'), (3, NULL,'test'), (4, 300,'xyz');
select count(*) from test_error_stats;

select error_code, error_name, errors_total from information_schema.error_statistics order by error_code;

#
# Confirm that errors and warnings aggregated per error code
#

insert into test_error_stats values (null, 1, 'foobar'); #error
insert into test_error_stats values (1, 1, 'foobar'); #error
insert into test_error_stats values (5, 1,'mysqltest'); #warning

select error_code, error_name, errors_total from information_schema.error_statistics order by error_code;

#
# Confirm that error stats are reset
#

flush statistics;
select count(*) from information_schema.error_statistics;

#
# Test additional errors (different types)
#

select * from bogus_table;
show bogus_show;
use bogus_db;
select bogus_func();
set global max_tmp_tables=32; #warning

select error_code, error_name, errors_total from information_schema.error_statistics order by error_code;


flush statistics;
select count(*) from information_schema.error_statistics;

#
# cleanup
#

drop table test_error_stats;
