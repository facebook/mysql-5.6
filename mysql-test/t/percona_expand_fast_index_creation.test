######################################################################
# Expand Fast Index Creation test
# Here we perform some DDL and ensure that Expand Fast Index Creation
# worked correctly
######################################################################
--source include/have_debug.inc

SET expand_fast_index_creation=ON;
CREATE TABLE idx (a INT PRIMARY KEY);
CREATE TABLE t (a INT PRIMARY KEY AUTO_INCREMENT, b FLOAT, c VARCHAR(15), d VARCHAR(17), z VARCHAR(1)) ENGINE=InnoDB;
INSERT INTO t (b) VALUES (RAND());
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
ALTER TABLE t ADD KEY k1(b), ADD KEY k2(a,b), ADD KEY k3(a,b,d), ADD UNIQUE KEY k4(a,c,d);

# remember InnoDB ID's of INDEXES for t
INSERT INTO idx (a) SELECT i.INDEX_ID FROM
	INFORMATION_SCHEMA.INNODB_SYS_INDEXES i,
	INFORMATION_SCHEMA.INNODB_SYS_TABLES t
WHERE
	t.NAME = 'test/t' AND i.TABLE_ID = t.TABLE_ID;

# confirm that there are two indexes
SELECT i.NAME, i.TYPE, i.N_FIELDS, f.NAME, f.POS FROM
	INFORMATION_SCHEMA.INNODB_SYS_FIELDS f,
	INFORMATION_SCHEMA.INNODB_SYS_INDEXES i,
	INFORMATION_SCHEMA.INNODB_SYS_TABLES t
WHERE
	t.NAME = 'test/t' AND i.TABLE_ID = t.TABLE_ID AND
	f.INDEX_ID = i.INDEX_ID
ORDER BY
	i.NAME, f.NAME;

# perform alter
SET profiling=1;
ALTER TABLE t MODIFY COLUMN z VARCHAR(2);
SET profiling=0;
# make sure expand fast index creation worked
SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROFILING
	WHERE STATE = 'restoring secondary keys' AND
	QUERY_ID = (SELECT MAX(QUERY_ID) FROM INFORMATION_SCHEMA.PROFILING);

# remember new index ID's
INSERT INTO idx (a) SELECT i.INDEX_ID FROM
	INFORMATION_SCHEMA.INNODB_SYS_INDEXES i,
	INFORMATION_SCHEMA.INNODB_SYS_TABLES t
WHERE
	t.NAME = 'test/t' AND i.TABLE_ID = t.TABLE_ID;

SET profiling=1;
# confirm that there are two indexes
SELECT i.NAME, i.TYPE, i.N_FIELDS, f.NAME, f.POS FROM
	INFORMATION_SCHEMA.INNODB_SYS_FIELDS f,
	INFORMATION_SCHEMA.INNODB_SYS_INDEXES i,
	INFORMATION_SCHEMA.INNODB_SYS_TABLES t
WHERE
	t.NAME = 'test/t' AND i.TABLE_ID = t.TABLE_ID AND
	f.INDEX_ID = i.INDEX_ID
ORDER BY
	i.NAME, f.NAME;

# confirm that there are four different ID's
SELECT COUNT(DISTINCT a) FROM idx;

DROP TABLE idx;
DROP TABLE t;

# https://github.com/facebook/mysql-5.6/issues/99
# When one of the secondary indexes contained the last field in the table
# an assert was triggered.
CREATE TABLE t_assert(a INT NOT NULL, b CHAR(1), id INT NOT NULL, KEY(a), KEY(id)) ENGINE=INNODB;
ALTER TABLE t_assert CHANGE COLUMN b b CHAR(1) NOT NULL;
DROP TABLE t_assert;

# https://github.com/facebook/mysql-5.6/issues/170
# When altering a table from the MEMORY storage engine to the INNODB storage
# engine an assert was triggered because a transaction was left active during
# the restore of the secondary indexes
CREATE TABLE t_assert(a INT, b INT, key(a,b)) ENGINE=MEMORY;
ALTER TABLE t_assert ENGINE=INNODB;
ALTER TABLE t_assert ADD c INT;
DROP TABLE t_assert;

CREATE TEMPORARY TABLE t_assert(a INT, b INT, key(a,b)) ENGINE=MEMORY;
ALTER TABLE t_assert ENGINE=INNODB;
ALTER TABLE t_assert ADD c INT;
DROP TABLE t_assert;
