create database test_db;
create user test_user@localhost;
grant all on test_db to test_user@localhost;
grant all on test to test_user@localhost;

let $start_aborted_queries = query_get_value(show global status like "Database_admission_control_aborted_queries", Value, 1);
let $start_running_queries = query_get_value(show global status like "Database_admission_control_running_queries", Value, 1);
let $start_waiting_queries = query_get_value(show global status like "Database_admission_control_waiting_queries", Value, 1);

connection default;
use test_db;
set @start_max_running_queries= @@global.max_running_queries;
set @start_max_waiting_queries= @@global.max_waiting_queries;
set @@global.max_running_queries=10;
set @@global.max_waiting_queries=5;
create table t1(a int) engine=InnoDB;

# Write lock here ensures the insert queries will block on row lock and be
# in running queue until unlock tables is executed.
lock table t1 write;

disable_query_log;
disable_result_log;
let $i= 16;
while ($i)
{
  connect (con$i, localhost, test_user,,test_db);
  dec $i;
}
let $i= 10;
while($i)
{
  connection con$i;
  # These queries will be in running queue
  send insert into t1 values(1);
  dec $i;
}
let $i= 15;
while ($i != 10)
{
  # These queries will be in waiting queue
  connection con$i;
  send insert into t1 values(1);
  dec $i;
}
enable_query_log;
enable_result_log;

connection default;
--echo Threads waiting for admission will have appropriate state set in processlist.
let $wait_condition=
  select count(*)=5 from information_schema.processlist where state='waiting for admission';
source include/wait_condition.inc;
--echo Super user is exempted from admission control checks.
select * from t1;
connect (con_max_wait, localhost, test_user,,test_db);
connection con_max_wait;
--echo Maximum waiting queries reached. So this would hit an error.
error ER_DB_ADMISSION_CONTROL;
select * from t1;
disconnect con_max_wait;

connection default;
--echo Check status variables
let $aborted_queries = query_get_value(show global status like "Database_admission_control_aborted_queries", Value, 1);
let $running_queries = query_get_value(show global status like "Database_admission_control_running_queries", Value, 1);
let $waiting_queries = query_get_value(show global status like "Database_admission_control_waiting_queries", Value, 1);
let $aborted_queries = `select $aborted_queries - $start_aborted_queries`;
let $running_queries = `select $running_queries - $start_running_queries`;
let $waiting_queries = `select $waiting_queries - $start_waiting_queries`;
echo $aborted_queries, $running_queries, $waiting_queries;

--echo Filled up queues on one db doesn't affect queries on other db.
connect (con_test, localhost, test_user,,test);
connection con_test;
use test;
disconnect con_test;

connection default;
set @@global.max_waiting_queries=6;

--echo Kill a thread that is waiting for admission.
connect (killed_connection, localhost, test_user,,test_db);
connection killed_connection;
send select count(*) from t1;
connection default;
# Need to first wait for the state in processlist, otherwise we run the risk
# of a race condition and test will fail because $id would be empty.
let $wait_timeout= 300;
let $wait_condition=
  select count(*) = 1 from information_schema.processlist where state='waiting for admission' and info='select count(*) from t1';
source include/wait_condition.inc;
let $id=
  `select id from information_schema.processlist where state='waiting for admission' and info='select count(*) from t1'`;
--replace_result $id ID
eval kill $id;
disconnect killed_connection;

# Insert queries sent above will be unblocked by this.
use test_db;
unlock tables;

disable_query_log;
disable_result_log;
let $i= 15;
while ($i)
{
  connection con$i;
  reap;
  dec $i;
}
enable_query_log;
enable_result_log;
connection default;
--echo Verify the waiting queries received wakeup signal.
select count(*) from t1;

set @save_admission_control_by_trx = @@global.admission_control_by_trx;
select @save_admission_control_by_trx;
--echo # By default, open transaction has no effect on running queries
disable_query_log;
disable_result_log;
let $i= 10; # max_running_queries is 10
while($i)
{
  connection con$i;
  # 10 Open transactions
  begin;
  select count(*) from t1;
  dec $i;
}
enable_query_log;
enable_result_log;
# query will succeed
connection con11;
select count(*) from t1;

--echo # Test: open transactions will take slots in running queries,
--echo #       and will not be blocked
connection default;
set @@global.admission_control_by_trx = true;
SELECT @@global.admission_control_by_trx;
disable_query_log;
disable_result_log;
let $i= 10; # max_running_queries is 10
while($i)
{
  connection con$i;
  # Open transactions will take up slots in running queue
  begin;
  select count(*) from t1;
  dec $i;
}
let $i= 16; # max_waiting_queries is 6
while ($i != 10)
{
  # These queries will be in waiting queue
  connection con$i;
  send select count(*) from t1;
  dec $i;
}
enable_query_log;
enable_result_log;

connection default;
let $wait_timeout= 300;
let $wait_condition=
  select count(*)=6 from information_schema.processlist where state='waiting for admission';
source include/wait_condition.inc;

--echo Open transaction is able to continue running queries
disable_query_log;
disable_result_log;
let $i= 10;
while($i)
{
  connection con$i;
  select count(*) from t1;
  dec $i;
}
enable_query_log;
enable_result_log;

connect (con_max_wait, localhost, test_user,,test_db);
echo connection con_max_wait;
connection con_max_wait;
--echo New queries will be rejected
error ER_DB_ADMISSION_CONTROL;
select * from t1;
--echo New transactions will be rejected
error ER_DB_ADMISSION_CONTROL;
begin;
disconnect con_max_wait;

--echo Committing a transaction will free up the running query slots
disable_query_log;
let $i= 10;
while($i)
{
  connection con$i;
  commit;
  dec $i;
}
enable_query_log;

--echo The waiting queries will be unblocked
disable_query_log;
disable_result_log;
let $i= 16;
while ($i != 10)
{
  connection con$i;
  reap;
  dec $i;
}
enable_query_log;
enable_result_log;

# restore admission_control_by_trx
connection default;
set @@global.admission_control_by_trx = @save_admission_control_by_trx;
select @@global.admission_control_by_trx;
--echo # End of open transaction test

connection default;
--echo Run parallel load and drop the database.
# Verify the waiting queries will receive the signal from DROP DATABASE
# and exit with appropriate error ER_NO_SUCH_TABLE. max_waiting_queries=0
# is used to not have a limit on number of waiting queries.
set @@global.max_waiting_queries=0; # No limit on waiting queue.
disable_query_log;
disable_result_log;
let $i= 16;
while($i)
{
  connection con$i;
  # 10 queries (max_running_queries is 10) will be in running queue.
  # Using sleep(10) in the insert ensures some queries end up in waiting queue.
  send insert into t1(select sleep(10));
  dec $i;
}
connection default;
drop database test_db;
let $i= 16;
while($i)
{
  connection con$i;
  error 0,ER_NO_SUCH_TABLE;
  reap;
  dec $i;
}
enable_query_log;
enable_result_log;

--echo Cleanup.
connection default;
--echo Verify there are no waiting threads.
select count(*) from information_schema.processlist where state='waiting for admission';
set @@global.max_running_queries=@start_max_running_queries;
set @@global.max_waiting_queries=@start_max_waiting_queries;
drop user test_user@localhost;
disable_query_log;
disable_result_log;
let $i= 16;
while ($i)
{
  disconnect con$i;
  dec $i;
}
enable_query_log;
enable_result_log;
