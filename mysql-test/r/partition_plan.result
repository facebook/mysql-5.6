SET @start_session_value = @@session.part_scan_max;
create table tp (c1 int, c2 int, c3 int, c4 int, part_key int,
primary key (c1, part_key), index(c2)
) engine=innodb
PARTITION BY RANGE(part_key)(
PARTITION p1 VALUES LESS THAN (100),
PARTITION p2 VALUES LESS THAN (200),
PARTITION p3 VALUES LESS THAN (300),
PARTITION p4 VALUES LESS THAN (400),
PARTITION p5 VALUES LESS THAN (500),
PARTITION p6 VALUES LESS THAN (600),
PARTITION p7 VALUES LESS THAN (700),
PARTITION p8 VALUES LESS THAN (800),
PARTITION p9 VALUES LESS THAN (900),
PARTITION p10 VALUES LESS THAN (1000),
PARTITION p11 VALUES LESS THAN (1100),
PARTITION p12 VALUES LESS THAN (1200),
PARTITION p13 VALUES LESS THAN (1300),
PARTITION p14 VALUES LESS THAN (1400)
);
Simple example.
explain partitions select count(*) from tp where c2 < 300 and part_key > 100 and part_key < 200;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	tp	p2	range	c2	c2	5	NULL	99	Using where; Using index
Basic estimate stats.
explain partitions select count(*) from tp where c2 < 700 and part_key > 100 and part_key < 1500;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	tp	p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14	range	c2	c2	5	NULL	454	Using where; Using index
Fully accurate stats.
set session part_scan_max=20;
explain partitions select count(*) from tp where c2 < 700 and part_key > 100 and part_key < 1500;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	tp	p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14	range	c2	c2	5	NULL	601	Using where; Using index
Bad estimate stats.
set session part_scan_max=5;
explain partitions select count(*) from tp where c2 < 700 and part_key > 100 and part_key < 200;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	tp	p2	range	c2	c2	5	NULL	99	Using where; Using index
drop table tp;
SET @@session.part_scan_max = @start_session_value;
