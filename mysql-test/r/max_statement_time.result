SET SESSION query_cache_type=0;
#
# 1. Test MAX_STATEMENT_TIME option syntax.
#
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (10);
SET @var = (SELECT MAX_STATEMENT_TIME=0 1);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1)' at line 1
SELECT 1 FROM t1 WHERE a IN (SELECT MAX_STATEMENT_TIME=0 1);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1)' at line 1
SELECT (SELECT MAX_STATEMENT_TIME=0 a FROM t1);
ERROR 42S22: Unknown column 'MAX_STATEMENT_TIME' in 'field list'
SELECT a FROM t1 WHERE a IN (SELECT MAX_STATEMENT_TIME=0 a FROM t1);
ERROR 42S22: Unknown column 'MAX_STATEMENT_TIME' in 'field list'
SELECT * FROM t1 WHERE a IN (SELECT MAX_STATEMENT_TIME=0 a FROM t1);
ERROR 42S22: Unknown column 'MAX_STATEMENT_TIME' in 'field list'
SELECT MAX_STATEMENT_TIME=0 * FROM t1
WHERE a IN (SELECT MAX_STATEMENT_TIME=0 a FROM t1);
ERROR 42S22: Unknown column 'MAX_STATEMENT_TIME' in 'field list'
SELECT * FROM t1
WHERE a IN (SELECT a FROM t1 UNION SELECT MAX_STATEMENT_TIME=0 a FROM t1);
ERROR 42S22: Unknown column 'MAX_STATEMENT_TIME' in 'field list'
SELECT MAX_STATEMENT_TIME=0 * FROM t1
WHERE a IN (SELECT a FROM t1 UNION SELECT MAX_STATEMENT_TIME=0 a FROM t1);
ERROR 42S22: Unknown column 'MAX_STATEMENT_TIME' in 'field list'
SELECT * FROM t1 UNION SELECT MAX_STATEMENT_TIME=0 * FROM t1;
ERROR 42000: Incorrect usage/placement of 'MAX_STATEMENT_TIME'
SELECT MAX_STATEMENT_TIME=0 * FROM t1
UNION SELECT MAX_STATEMENT_TIME=0 * FROM t1;
ERROR 42000: Incorrect usage/placement of 'MAX_STATEMENT_TIME'
INSERT INTO t1 SELECT MAX_STATEMENT_TIME=0 * FROM t1;
ERROR 42000: Incorrect usage/placement of 'MAX_STATEMENT_TIME'
CREATE TABLE t1 AS SELECT MAX_STATEMENT_TIME=0 * FROM t1;
ERROR 42000: Incorrect usage/placement of 'MAX_STATEMENT_TIME'
CREATE TABLE t1 AS SELECT 1 A UNION SELECT 2 UNION SELECT MAX_STATEMENT_TIME=0 3;
ERROR 42000: Incorrect usage/placement of 'MAX_STATEMENT_TIME'
CREATE TABLE MAX_STATEMENT_TIME=100 t2 (a int);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '=100 t2 (a int)' at line 1
CREATE MAX_STATEMENT_TIME=100 TABLE t2 (a int);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'MAX_STATEMENT_TIME=100 TABLE t2 (a int)' at line 1
DELETE MAX_STATEMENT_TIME=100 FROM t1;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '=100 FROM t1' at line 1
UPDATE MAX_STATEMENT_TIME=100 t1 SET a=20;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '100 t1 SET a=20' at line 1
ALTER TABLE MAX_STATEMENT_TIME=100 t1 ADD b VARCHAR(200);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '=100 t1 ADD b VARCHAR(200)' at line 1
ALTER MAX_STATEMENT_TIME=100 TABLE t1 ADD b VARCHAR(200);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'MAX_STATEMENT_TIME=100 TABLE t1 ADD b VARCHAR(200)' at line 1
SELECT MAX_STATEMENT_TIME=0 * FROM t1;
a
10
DROP TABLE t1;
#
# 2. Test MAX_STATEMENT_TIME value set at session level.
#
SELECT @@max_statement_time;
@@max_statement_time
0
SET @@SESSION.max_statement_time = 1;
SELECT @@max_statement_time;
@@max_statement_time
1
SET @@SESSION.max_statement_time = 0;
#
# 3. Test the MAX_STATEMENT_TIME option by setting value for it at,
#        - STATEMENT
#        - SESSION
#
SELECT MAX_STATEMENT_TIME=1 SLEEP(5);
SLEEP(5)
1
SET @@SESSION.max_statement_time = 1;
SELECT SLEEP(5);
SLEEP(5)
1
SET @@SESSION.max_statement_time = 0;
# 
# 4. Test statement timeout functionality.
#
CREATE TABLE t1 (a INT, b VARCHAR(300));
INSERT INTO t1 VALUES (1, 'string');
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
SET @@SESSION.max_statement_time = 2;
SELECT * from t1;
ERROR HY000: Query execution was interrupted, max_statement_time exceeded
LOCK TABLE t1 WRITE;
SELECT * FROM t1;
ERROR HY000: Query execution was interrupted, max_statement_time exceeded
SELECT MAX_STATEMENT_TIME=1 * FROM t1;
ERROR HY000: Query execution was interrupted, max_statement_time exceeded
UNLOCK TABLES;
CREATE TABLE t2 SELECT * FROM t1;
ALTER TABLE t2 ADD c VARCHAR(200) default 'new_col';
UPDATE t1 SET b='new_string';
INSERT INTO t1 SELECT * FROM t1;
DELETE FROM t2;
#
# 5. Test SELECT with subquery.
#
SELECT MAX_STATEMENT_TIME=3600000 (SELECT SLEEP(0.5)) AS true_if_subquery_is_timedout;
true_if_subquery_is_timedout
0
#
# 6. Test max_statement_time with prepared statements.
#
PREPARE stmt1 FROM "SELECT * from t1 where b='new_string'";
PREPARE stmt2 FROM "SELECT MAX_STATEMENT_TIME=2 * FROM t1 WHERE b='new_string'";
PREPARE stmt3 FROM "SELECT MAX_STATEMENT_TIME=3600000 count(*) FROM t1";
EXECUTE stmt1;
ERROR HY000: Query execution was interrupted, max_statement_time exceeded
EXECUTE stmt2;
ERROR HY000: Query execution was interrupted, max_statement_time exceeded
EXECUTE stmt3;
count(*)
4096
DEALLOCATE PREPARE stmt1;
DEALLOCATE PREPARE stmt2;
DEALLOCATE PREPARE stmt3;
#
# 7. Test max_statement_time with Stored Routines.
#
CREATE FUNCTION f1() RETURNS INT
BEGIN
SELECT MAX_STATEMENT_TIME=1 SLEEP(1.5) INTO @a;
RETURN 1;
END|
ERROR 42000: Incorrect usage/placement of 'MAX_STATEMENT_TIME'
CREATE FUNCTION f1() RETURNS INT
BEGIN
SELECT SLEEP(3) INTO @a;
RETURN 1;
END|
CREATE FUNCTION f2() RETURNS INT
BEGIN
INSERT INTO t2 SELECT * FROM t2;
RETURN 1;
END|
INSERT INTO t2 VALUES (1, 'string1', 'string2');
SET @@SESSION.max_statement_time = 2;
SELECT f1();
ERROR HY000: Query execution was interrupted, max_statement_time exceeded
SELECT @a;
@a
1
SELECT f2();
f2()
1
Warnings:
Note	3025	Select is not a read only statement, disabling timer
DROP FUNCTION f1;
DROP FUNCTION f2;
CREATE PROCEDURE p1()
BEGIN
SELECT max_statement_time=1 SLEEP(1.5);
INSERT INTO t2 SELECT DISTINCT * FROM t2;
END|
ERROR 42000: Incorrect usage/placement of 'MAX_STATEMENT_TIME'
CREATE PROCEDURE p1()
BEGIN
INSERT INTO t2 SELECT DISTINCT * FROM t2;
SELECT SLEEP(3);
END|
CALL p1();
SLEEP(3)
0
DROP PROCEDURE p1;
DROP TABLE t2;
SET @global_event_scheduler_status= @@global.event_scheduler;
SET @@global.event_scheduler = ON;
SET @@global.max_statement_time= 1;
CREATE TABLE t2 (f1 int);
SELECT SLEEP(2) into @a;
SELECT @a;
@a
1
CREATE EVENT event1 ON SCHEDULE AT CURRENT_TIMESTAMP
DO BEGIN
SELECT SLEEP(2) into @a;
SELECT MAX_STATEMENT_TIME=1 SLEEP(2) into @b;
INSERT INTO t2 VALUES(@a);
INSERT INTO t2 VALUES(@b);
END|
ERROR 42000: Incorrect usage/placement of 'MAX_STATEMENT_TIME'
CREATE EVENT event1 ON SCHEDULE AT CURRENT_TIMESTAMP
DO BEGIN
SELECT SLEEP(2) into @a;
INSERT INTO t2 VALUES(@a);
END
|
SET @@SESSION.max_statement_time = 0;
# Wait until at least one instance of event is executed.
SET @@SESSION.max_statement_time = 2;
SELECT * FROM t2;
f1
0
DELETE FROM t2;
SET @@global.event_scheduler= @global_event_scheduler_status;
SET @@global.max_statement_time= 0;
CREATE TRIGGER t1_before_trigger BEFORE INSERT ON t1 FOR EACH ROW
BEGIN
SELECT SLEEP(2) into @a;
SELECT MAX_STATEMENT_TIME=1 SLEEP(2) into @b;
INSERT INTO t2 VALUES(@a);
INSERT INTO t2 VALUES(@b);
END|
ERROR 42000: Incorrect usage/placement of 'MAX_STATEMENT_TIME'
CREATE TRIGGER t1_before_trigger BEFORE INSERT ON t1 FOR EACH ROW
BEGIN
SELECT SLEEP(2) into @a;
INSERT INTO t2 VALUES(@a);
END
|
SELECT SLEEP(5) into @a;
SELECT max_statement_time=1 SLEEP(2) into @b;
SELECT @a, @b;
@a	@b
1	1
INSERT INTO t1 VALUES (1, 'string');
SELECT * FROM t2;
f1
0
DROP TABLE t1,t2;
#
# 8. Test MAX_STATEMENT_TIME precedence set at difference levels.
#
SET @@SESSION.max_statement_time = 3;
SELECT sleep(5);
sleep(5)
1
SELECT MAX_STATEMENT_TIME=2 sleep(5);
sleep(5)
1
SET @@SESSION.max_statement_time = 0;
#
# 9. MAX_STATEMENT_TIME status variables.
#
SELECT CONVERT(VARIABLE_VALUE, UNSIGNED) INTO @time_set
FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'MAX_STATEMENT_TIME_SET';
SELECT CONVERT(VARIABLE_VALUE, UNSIGNED) INTO @time_exceeded
FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'MAX_STATEMENT_TIME_EXCEEDED';
SELECT MAX_STATEMENT_TIME=10 SLEEP(1);
SLEEP(1)
1
# Ensure that the counters for:
# - statements that are time limited; and
# - statements that exceeded their maximum execution time
# are incremented.
SELECT 1 AS STATUS FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'MAX_STATEMENT_TIME_SET'
        AND CONVERT(VARIABLE_VALUE, UNSIGNED) > @time_set;
STATUS
1
SELECT 1 AS STATUS FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'MAX_STATEMENT_TIME_EXCEEDED'
        AND CONVERT(VARIABLE_VALUE, UNSIGNED) > @time_exceeded;
STATUS
1
SELECT CONVERT(VARIABLE_VALUE, UNSIGNED) INTO @time_set_failed
FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'MAX_STATEMENT_TIME_SET_FAILED';
SET DEBUG='+d,thd_timer_create_failure';
select MAX_STATEMENT_TIME=10 SLEEP(1);
SLEEP(1)
0
SET DEBUG='-d,thd_timer_create_failure';
SELECT 1 AS STATUS FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'MAX_STATEMENT_TIME_SET_FAILED'
        AND CONVERT(VARIABLE_VALUE, UNSIGNED) > @time_set_failed;
STATUS
1
SELECT CONVERT(VARIABLE_VALUE, UNSIGNED) INTO @time_set_failed
FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'MAX_STATEMENT_TIME_SET_FAILED';
SET DEBUG='+d,thd_timer_set_failure';
select MAX_STATEMENT_TIME=10 SLEEP(1);
SLEEP(1)
0
SET DEBUG='-d,thd_timer_set_failure';
SELECT 1 AS STATUS FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'MAX_STATEMENT_TIME_SET_FAILED'
        AND CONVERT(VARIABLE_VALUE, UNSIGNED) > @time_set_failed;
STATUS
1
#
# 10. Test max statement time interruption precision.
#
SET @@SESSION.max_statement_time = 100;
SELECT SLEEP(1);
SLEEP(1)
1
SET @@SESSION.max_statement_time = 250;
SELECT SLEEP(1);
SLEEP(1)
1
SET @@SESSION.max_statement_time = 500;
SELECT SLEEP(1);
SLEEP(1)
1
SET @@SESSION.max_statement_time = 750;
SELECT SLEEP(1);
SLEEP(1)
1
SET @@SESSION.max_statement_time = 850;
SELECT SLEEP(1);
SLEEP(1)
1
SET @@SESSION.max_statement_time = 950;
SELECT SLEEP(1);
SLEEP(1)
1
SET @@SESSION.max_statement_time = 1250;
SELECT SLEEP(1);
SLEEP(1)
0
SET @@SESSION.max_statement_time = 1500;
SELECT SLEEP(1);
SLEEP(1)
0
# 
# 11. Test Query cache behavior with max_statement_time.
#
SET SESSION query_cache_type=1;
SET @@SESSION.max_statement_time = 50;
CREATE TABLE t1 (fld1 int);
INSERT INTO t1 VALUES (1), (2), (3);
INSERT INTO t1 SELECT * FROM t1;
FLUSH QUERY CACHE;
SELECT CONVERT(VARIABLE_VALUE, UNSIGNED) INTO @qc_inserts
FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_inserts';
SELECT CONVERT(VARIABLE_VALUE, UNSIGNED) INTO @qc_hits
FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_hits';
SELECT * FROM t1;
fld1
1
2
3
1
2
3
SELECT 1 AS STATUS FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_inserts'
        AND CONVERT(VARIABLE_VALUE, UNSIGNED) > @qc_inserts;
STATUS
1
SELECT * FROM t1;
fld1
1
2
3
1
2
3
SELECT 1 AS STATUS FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_hits'
        AND CONVERT(VARIABLE_VALUE, UNSIGNED) > @qc_hits;
STATUS
1
SELECT CONVERT(VARIABLE_VALUE, UNSIGNED) INTO @qc_inserts
FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_inserts';
SELECT CONVERT(VARIABLE_VALUE, UNSIGNED) INTO @qc_hits
FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_hits';
SELECT MAX_STATEMENT_TIME=100 * FROM t1;
fld1
1
2
3
1
2
3
SELECT 1 AS STATUS FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_hits'
        AND CONVERT(VARIABLE_VALUE, UNSIGNED) > @qc_hits;
STATUS
SELECT 1 AS STATUS FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_inserts'
        AND CONVERT(VARIABLE_VALUE, UNSIGNED) > @qc_inserts;
STATUS
1
SELECT CONVERT(VARIABLE_VALUE, UNSIGNED) INTO @qc_inserts
FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_inserts';
SELECT CONVERT(VARIABLE_VALUE, UNSIGNED) INTO @qc_hits
FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_hits';
SELECT MAX_STATEMENT_TIME=100 * FROM t1;
fld1
1
2
3
1
2
3
SELECT 1 AS STATUS FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_hits'
        AND CONVERT(VARIABLE_VALUE, UNSIGNED) > @qc_hits;
STATUS
1
SELECT 1 AS STATUS FROM INFORMATION_SCHEMA.GLOBAL_STATUS
WHERE VARIABLE_NAME = 'Qcache_inserts'
        AND CONVERT(VARIABLE_VALUE, UNSIGNED) > @qc_inserts;
STATUS
FLUSH QUERY CACHE;
DROP TABLE t1;
SET @@SESSION.max_statement_time = 0;
