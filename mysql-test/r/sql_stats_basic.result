create user user_super@localhost identified by 'su';
grant all on *.* to user_super@localhost with grant option;
Case 1: sql_stats_control=OFF_HARD
select @@sql_stats_control;
@@sql_stats_control
OFF_HARD
select 42;
42
42
select sql_id, plan_id, table_schema, user_name, execution_count
from information_schema.sql_statistics;
sql_id	plan_id	table_schema	user_name	execution_count
Zero sql_stats_size initially/when-disabled
SHOW STATUS LIKE 'sql_stats_size';
Variable_name	Value
sql_stats_size	0
Case 2: sql_stats_control=ON
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
set @@GLOBAL.sql_plans_control=ON;
select @@sql_plans_control;
@@sql_plans_control
ON
select 1;
1
1
select 2;
2
2
select 100;
100
100
select sql_id, plan_id, table_schema, user_name, execution_count
from information_schema.sql_statistics order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count
4d541b899fcde2a44c020127ca28b83a	NULL	test	user_super	1
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	3
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1
fd40e5136b996f5a30381b3e3ce32ebf	NULL	test	user_super	1
create table t1(c int);
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
insert into t1 values(5);
update t1 set c=c+100;
update t1 set c=c+300;
update t1 set c=c+500;
delete from t1 where c=905;
delete from t1 where c=903;
select a.c c1, b.c c2
from t1 a, t1 b
where a.c <= b.c
order by 1, 2;
c1	c2
901	901
901	902
901	904
902	902
902	904
904	904
select c.c, min(a.c), max(b.c)
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by c.c
order by 1, 2, 3;
c	min(a.c)	max(b.c)
901	901	904
902	901	904
904	901	904
select a.c, b.c, sum(c.c)
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by a.c, b.c
order by 1, 2, 3;
c	c	sum(c.c)
901	901	2707
901	902	2707
901	904	2707
902	902	1806
902	904	1806
904	904	904
select a.c, b.c, sum(c.c)
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by a.c, b.c
having sum(c.c) < 2000
order by 1, 2, 3;
c	c	sum(c.c)
902	902	1806
902	904	1806
904	904	904
select a.c, b.c, sum(c.c)
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by a.c, b.c
having sum(c.c) < 2000
order by 1, 2, 3;
c	c	sum(c.c)
902	902	1806
902	904	1806
904	904	904
select c
from t1 a
where exists (select sum_val
from (select a.c c1, b.c c2, sum(c.c) sum_val
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by a.c, b.c having sum(c.c) < 2000) v1
where sum_val = a.c)
order by 1;
c
904
select c
from t1 a
where not exists (select sum_val
from (select a.c c1, b.c c2, sum(c.c) sum_val
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by a.c, b.c having sum(c.c) < 2000) v1
where sum_val = a.c)
order by 1;
c
901
902
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
07f5ad4b3201ceebd12b7fea78258490	a49336ae23cce474430146ec3a7d0ee3	test	user_super	2	0	0	0	18	6	0	0	0	0	populated
0b3d55ac53dfc17f83def9dabdefd0e5	7d1ccceff3a45eea46dbad6208f7f52e	test	user_super	3	0	15	0	15	0	0	0	0	0	populated
217ee3f8be69be1bf35d38bb4a29bc05	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
4236231881b662910017cab9d06dd6af	6c45f7957b65ebc76c1000cdfdb33186	test	user_super	1	0	0	0	6	6	0	0	0	0	populated
4d541b899fcde2a44c020127ca28b83a	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
86275001b7ac0cd3a98dc74b0daab2a6	c63aca0e3e2270468eaadb4364351527	test	user_super	5	5	0	0	0	0	0	0	0	0	populated
8ef3511d2c418993cd3069c504edaccc	5c222d3d3702516b33b9c023385ab93d	test	user_super	1	0	0	0	12	2	0	0	0	0	populated
9284735a0b4c7827a5e96ab5bc66b2da	d8a6538dcb5999060d6f545dfb9ce16d	test	user_super	1	0	0	0	0	4	0	0	0	0	populated
af7d7543fc2f2e9feeee1e4e4972d896	a49336ae23cce474430146ec3a7d0ee3	test	user_super	1	0	0	0	9	3	0	0	0	0	populated
c7942e54edf6699ceff98d65910fee2c	5c222d3d3702516b33b9c023385ab93d	test	user_super	1	0	0	0	12	1	0	0	0	0	populated
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	3	0	0	0	0	3	0	0	0	0	populated
e75c7b302104c32b266a9b1159169503	a49336ae23cce474430146ec3a7d0ee3	test	user_super	1	0	0	0	9	6	0	0	0	0	populated
e76bf3c9366a101ff8e7277e4d934e41	0863aa843e03198bcd1fb35e2ba33940	test	user_super	2	0	0	2	9	0	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
fd40e5136b996f5a30381b3e3ce32ebf	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
select information_schema.sql_statistics.sql_id, table_schema, user_name,
execution_count, sql_text
from information_schema.sql_statistics, information_schema.sql_text
where information_schema.sql_statistics.sql_id=information_schema.sql_text.sql_id
order by sql_id;
sql_id	table_schema	user_name	execution_count	sql_text
07f5ad4b3201ceebd12b7fea78258490	test	user_super	2	SELECT `a` . `c` , `b` . `c` , SUM ( `c` . `c` ) FROM `t1` `a` , `t1` `b` , `t1` `c` WHERE `a` . `c` <= `b` . `c` AND `a` . `c` <= `c` . `c` GROUP BY `a` . `c` , `b` . `c` HAVING SUM ( `c` . `c` ) < ? ORDER BY ?, ... 
0b3d55ac53dfc17f83def9dabdefd0e5	test	user_super	3	UPDATE `t1` SET `c` = `c` + ? 
217ee3f8be69be1bf35d38bb4a29bc05	test	user_super	1	CREATE TABLE `t1` ( `c` INTEGER ) 
4236231881b662910017cab9d06dd6af	test	user_super	1	SELECT `a` . `c` `c1` , `b` . `c` `c2` FROM `t1` `a` , `t1` `b` WHERE `a` . `c` <= `b` . `c` ORDER BY ?, ... 
4d541b899fcde2a44c020127ca28b83a	test	user_super	1	SET @@GLOBAL . `sql_plans_control` = ON 
80b8bde9caab2211389a46a813bc11c0	test	user_super	1	SELECT `sql_id` , `plan_id` , `table_schema` , `user_name` , `execution_count` , `rows_inserted` , `rows_updated` , `rows_deleted` , `rows_read` , `rows_sent` , `tmp_table_bytes_written` , `filesort_bytes_written` , `tmp_table_disk_usage` , `filesort_disk_usage` , CASE WHEN `elapsed_time` > ? THEN ? ELSE ? END `elapsed_time` FROM `information_schema` . `sql_statistics` ORDER BY `sql_id` 
86275001b7ac0cd3a98dc74b0daab2a6	test	user_super	5	INSERT INTO `t1` VALUES (?) 
8ef3511d2c418993cd3069c504edaccc	test	user_super	1	SELECT `c` FROM `t1` `a` WHERE NOT EXISTS ( SELECT `sum_val` FROM ( SELECT `a` . `c` `c1` , `b` . `c` `c2` , SUM ( `c` . `c` ) `sum_val` FROM `t1` `a` , `t1` `b` , `t1` `c` WHERE `a` . `c` <= `b` . `c` AND `a` . `c` <= `c` . `c` GROUP BY `a` . `c` , `b` . `c` HAVING SUM ( `c` . `c` ) < ? ) `v1` WHERE `sum_val` = `a` . `c` ) ORDER BY ? 
9284735a0b4c7827a5e96ab5bc66b2da	test	user_super	1	SELECT `sql_id` , `plan_id` , `table_schema` , `user_name` , `execution_count` FROM `information_schema` . `sql_statistics` ORDER BY `sql_id` 
af7d7543fc2f2e9feeee1e4e4972d896	test	user_super	1	SELECT `c` . `c` , MIN ( `a` . `c` ) , MAX ( `b` . `c` ) FROM `t1` `a` , `t1` `b` , `t1` `c` WHERE `a` . `c` <= `b` . `c` AND `a` . `c` <= `c` . `c` GROUP BY `c` . `c` ORDER BY ?, ... 
c7942e54edf6699ceff98d65910fee2c	test	user_super	1	SELECT `c` FROM `t1` `a` WHERE EXISTS ( SELECT `sum_val` FROM ( SELECT `a` . `c` `c1` , `b` . `c` `c2` , SUM ( `c` . `c` ) `sum_val` FROM `t1` `a` , `t1` `b` , `t1` `c` WHERE `a` . `c` <= `b` . `c` AND `a` . `c` <= `c` . `c` GROUP BY `a` . `c` , `b` . `c` HAVING SUM ( `c` . `c` ) < ? ) `v1` WHERE `sum_val` = `a` . `c` ) ORDER BY ? 
db1589f429c8f6fbba750f47fbc7c130	test	user_super	3	SELECT ? 
e75c7b302104c32b266a9b1159169503	test	user_super	1	SELECT `a` . `c` , `b` . `c` , SUM ( `c` . `c` ) FROM `t1` `a` , `t1` `b` , `t1` `c` WHERE `a` . `c` <= `b` . `c` AND `a` . `c` <= `c` . `c` GROUP BY `a` . `c` , `b` . `c` ORDER BY ?, ... 
e76bf3c9366a101ff8e7277e4d934e41	test	user_super	2	DELETE FROM `t1` WHERE `c` = ? 
e774a92c71899fc36599c5b7c754d556	test	user_super	1	SELECT @@`sql_stats_control` 
fd40e5136b996f5a30381b3e3ce32ebf	test	user_super	1	SELECT @@`sql_plans_control` 
Check if nonzero sql_stats_size
select case when VARIABLE_VALUE > 0 then "NON-ZERO" else "ZERO" end as zerocheck from information_schema.global_status where variable_name = 'SQL_STATS_SIZE';
zerocheck
NON-ZERO
Case 3: sql_stats_control=OFF_SOFT. Disable collection, but keep the data around.
set @@GLOBAL.sql_stats_control="OFF_SOFT";
select @@sql_stats_control;
@@sql_stats_control
OFF_SOFT
select 1 union select 2;
1
1
2
select 1 union select 2 union select 3;
1
1
2
3
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage
07f5ad4b3201ceebd12b7fea78258490	a49336ae23cce474430146ec3a7d0ee3	test	user_super	2	0	0	0	18	6	0	0	0	0
0b3d55ac53dfc17f83def9dabdefd0e5	7d1ccceff3a45eea46dbad6208f7f52e	test	user_super	3	0	15	0	15	0	0	0	0	0
217ee3f8be69be1bf35d38bb4a29bc05	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0
3471e7e977919288345f68c5ab0c98b7	2eea1bb868964e5a66a4f786e40cfbf3	test	user_super	1	0	0	0	0	16	0	0	0	0
4236231881b662910017cab9d06dd6af	6c45f7957b65ebc76c1000cdfdb33186	test	user_super	1	0	0	0	6	6	0	0	0	0
4d541b899fcde2a44c020127ca28b83a	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0
72be32c3cfad197483ded601af349ad2	4747e34c854d3849c6d4422b9a38ab68	test	user_super	1	0	0	0	0	1	0	0	0	0
80b8bde9caab2211389a46a813bc11c0	d8a6538dcb5999060d6f545dfb9ce16d	test	user_super	1	0	0	0	0	15	0	0	0	0
86275001b7ac0cd3a98dc74b0daab2a6	c63aca0e3e2270468eaadb4364351527	test	user_super	5	5	0	0	0	0	0	0	0	0
8ef3511d2c418993cd3069c504edaccc	5c222d3d3702516b33b9c023385ab93d	test	user_super	1	0	0	0	12	2	0	0	0	0
9284735a0b4c7827a5e96ab5bc66b2da	d8a6538dcb5999060d6f545dfb9ce16d	test	user_super	1	0	0	0	0	4	0	0	0	0
af7d7543fc2f2e9feeee1e4e4972d896	a49336ae23cce474430146ec3a7d0ee3	test	user_super	1	0	0	0	9	3	0	0	0	0
c7942e54edf6699ceff98d65910fee2c	5c222d3d3702516b33b9c023385ab93d	test	user_super	1	0	0	0	12	1	0	0	0	0
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	3	0	0	0	0	3	0	0	0	0
e75c7b302104c32b266a9b1159169503	a49336ae23cce474430146ec3a7d0ee3	test	user_super	1	0	0	0	9	6	0	0	0	0
e76bf3c9366a101ff8e7277e4d934e41	0863aa843e03198bcd1fb35e2ba33940	test	user_super	2	0	0	2	9	0	0	0	0	0
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0
fd40e5136b996f5a30381b3e3ce32ebf	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0
Case 4: sql_stats_control=OFF_HARD. Disable, and check if all data is deleted.
set @@GLOBAL.sql_stats_control="OFF_HARD";
select @@sql_stats_control;
@@sql_stats_control
OFF_HARD
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage
Case 5: sql_stats_control=ON. Re-enable to make sure that data is making its way to sql_statistics.
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 101;
101
101
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
Case 6: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t2(c int);
insert into t2 values(100);
select * from t2;
update t2 set c=c+7;
delete from t2 where c=107;
drop table t2;
||||
1
1
2
2
3
3
c
100
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
139dd37d45cdf132ea1ad78f5cccbc7f	f343b9befca0a2e2d56935211139703e	test	user_super	1	0	0	1	1	0	0	0	0	0	populated
5b11e48a826ef2c149f75cfa7894a20d	5b09041e2c03efb8b820a1fda0bf8146	test	user_super	1	0	0	0	2	1	0	0	0	0	populated
b1cf248bbe9c0f226de01543a95800d5	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
b5d74033813edd43b779ba064ef58e0e	c63aca0e3e2270468eaadb4364351527	test	user_super	1	1	0	0	0	0	0	0	0	0	populated
ba1090d799fb93c155a3fb2f7cfb2a55	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	3	0	0	0	0	3	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
faca5788f5e48b7a41c386beb1f3da25	3735d0563cc8e7df82f25be86d592dc1	test	user_super	1	0	1	0	1	0	0	0	0	0	populated
Case 7: Query no sampling by default
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
1
1
select 3;
3
3
select 4;
4
4
select sql_id, plan_id, table_schema, user_name, query_sample_text,
query_sample_seen, execution_count, rows_inserted, rows_updated,
rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	query_sample_text	query_sample_seen	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super		NULL	3	0	0	0	0	3	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super		NULL	1	0	0	0	0	1	0	0	0	0	populated
Case 8: Query Only Once Sampling support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
set @@GLOBAL.max_digest_sample_age=0;
select @@sql_stats_control;
@@sql_stats_control
ON
select @@max_digest_sample_age;
@@max_digest_sample_age
0
select 1;
1
1
select 3;
3
3
select 4;
4
4
select sql_id, plan_id, table_schema, user_name, query_sample_text,
(query_sample_seen > 0) as is_query_sample_seen_valid, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	query_sample_text	is_query_sample_seen_valid	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
16b4b893067fc211fff92b1b100a49fa	NULL	test	user_super	set @@GLOBAL.max_digest_sample_age=0	1	1	0	0	0	0	0	0	0	0	0	populated
48ad8db644ab6a81325df7e21cea56c5	NULL	test	user_super	select @@max_digest_sample_age	1	1	0	0	0	0	1	0	0	0	0	populated
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	select 1	1	3	0	0	0	0	3	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	select @@sql_stats_control	1	1	0	0	0	0	1	0	0	0	0	populated
Case 9: Query Re-sampling support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
set @@GLOBAL.max_digest_sample_age=1;
select @@sql_stats_control;
@@sql_stats_control
ON
select @@max_digest_sample_age;
@@max_digest_sample_age
1
select 1;
1
1
select sleep(2);
sleep(2)
0
select 3;
3
3
select 4;
4
4
select sql_id, plan_id, table_schema, user_name, query_sample_text,
(query_sample_seen > 0 && CURRENT_TIMESTAMP - query_sample_seen < 10)
as is_query_sample_seen_valid, execution_count, rows_inserted,
rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
where sql_id = 'ea1a18bec5a37513f7a0720e73526477'
order by sql_id;
sql_id	plan_id	table_schema	user_name	query_sample_text	is_query_sample_seen_valid	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
Case 10: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t10(c int);
insert into t10 values(1);
insert into t10 values(2);
insert into t10 values(3);
insert into t10 select * from t10;
insert into t10 select * from t10;
insert into t10 select * from t10;
select c from t10 order by 1;
select * from t10 where c=1 order by 1;
drop table t10;
||||
1
1
2
2
3
3
c
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
c
1
1
1
1
1
1
1
1
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
3255b309e59c1ebaa6aad94f611ba2d5	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
4f31fc41c472c0e9dc2e19056ec740ee	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
514ff0b1e0869c1f1b303333fb6f9557	a87c8388de86c82198fa06675de68c3f	test	user_super	1	0	0	0	24	8	0	0	0	0	populated
7ab8e3df8e94502053145020293802b4	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0	0	0	populated
7d9739d498b312b324e5a25295b0b0d1	0c68a814e4bc7ce05336789421cdeee2	test	user_super	3	21	0	0	21	0	0	0	0	0	populated
a40e19cd5e665c058d43690a4d24f14d	bb775f67f5bdb8c07f6fc05195cea244	test	user_super	1	0	0	0	24	24	0	0	0	0	populated
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	3	0	0	0	0	3	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
Case 11: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t11(c int);
insert into t11 values(1);
insert into t11 values(2);
insert into t11 values(3);
insert into t11 select * from t11;
insert into t11 select * from t11;
insert into t11 select * from t11;
select c from t11 order by 1;
select * from t11 where c=1 order by 1;
update t11 set c=c+100 where c>1;
drop table t11;
||||
1
1
2
2
3
3
c
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
c
1
1
1
1
1
1
1
1
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
18d1a8be9c7155de1470ccca8a1113be	1205d6f41cfd8eee9ac0fefed3b7a5ad	test	user_super	1	0	0	0	24	8	0	0	0	0	populated
311257fc1a5bfe686cf087d684a46f03	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0	0	0	populated
34fdb2987c06beeb8d4abd2df1a2039b	8f26bb7e672b92ab2d74613a6b1e3b14	test	user_super	1	0	0	0	24	24	0	0	0	0	populated
3970934697d1a37e48cfcb23b89ca156	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
7df63917f5bd965f14d2f90ac820b2dc	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
94f69150585e438c7feb4015d668e265	c24516a3e2e6f108b2f12ff638860fd6	test	user_super	1	0	16	0	24	0	0	0	0	0	populated
abec52fc6db342ff9e209c966495b1a1	4e629c338e9448ec75b16454a974ce37	test	user_super	3	21	0	0	21	0	0	0	0	0	populated
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	3	0	0	0	0	3	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
Case 12: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t12(c int);
insert into t12 values(1);
insert into t12 values(2);
insert into t12 values(3);
insert into t12 select * from t12;
insert into t12 select * from t12;
insert into t12 select * from t12;
select c from t12 order by 1;
select * from t12 where c=1 order by 1;
insert into t12 select * from t12 where c > 1;
drop table t12;
||||
1
1
2
2
3
3
c
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
c
1
1
1
1
1
1
1
1
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
24f0e3a12a91822a71352d9a113bb928	d4d42e245869a5ad6d4c991f37715319	test	user_super	1	0	0	0	24	24	0	0	0	0	populated
402547a05e5c2edbf292703e5ed2fcd4	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0	0	0	populated
7ba09dc49b4a146a444a8a519f17683c	e20fa51953e77162c47d427dc9b3d796	test	user_super	1	16	0	0	24	0	0	0	0	0	populated
9a4cafc0b6bfaeba4baf7627918ad8dc	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
9ddea98849285fd41aeda506fee80ea8	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	3	0	0	0	0	3	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
f110131f8d7e487065c339c15176a224	e20fa51953e77162c47d427dc9b3d796	test	user_super	3	21	0	0	21	0	0	0	0	0	populated
f929dfa306c0012ed60ca137f330b5e6	63ce70a8b3d6b3b07ed5d4504741c52b	test	user_super	1	0	0	0	24	8	0	0	0	0	populated
Case 13: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t13(c int);
insert into t13 values(1);
insert into t13 values(2);
insert into t13 values(3);
insert into t13 select * from t13;
insert into t13 select * from t13;
insert into t13 select * from t13;
select c from t13 order by 1;
select * from t13 where c=1 order by 1;
insert into t13 select * from t13 where c > 1;
update t13 set c=c+100 where c>1;
drop table t13;
||||
1
1
2
2
3
3
c
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
c
1
1
1
1
1
1
1
1
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
138de025a459859c2560cbec453d71b9	78e987e8c5aed34aa2ace332289a7412	test	user_super	1	0	0	0	24	24	0	0	0	0	populated
247c14aa92b9350962db9c0897f0fdb6	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0	0	0	populated
443a1c5cf0587b8c51d97ad2c9071af1	aff29d3a71e81392f86033f8e503c8e1	test	user_super	1	0	0	0	24	8	0	0	0	0	populated
65c13c84467a09111ae272f3996d80e7	4b974e5532640edc9fa95b3beb67899e	test	user_super	1	0	32	0	40	0	0	0	0	0	populated
afe1de6f6026f7c0b553e145147a109c	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
c24182f999922bae799bddf743e4865b	4a90aceb0568c53439dd6a23089fe389	test	user_super	1	16	0	0	24	0	0	0	0	0	populated
cb327a2b435fe42e625ecbd09150f3c2	4a90aceb0568c53439dd6a23089fe389	test	user_super	3	21	0	0	21	0	0	0	0	0	populated
d1bb47a70eaf9bcf2e971112937a6869	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	3	0	0	0	0	3	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
Case 14: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t14(c int);
insert into t14 values(1);
insert into t14 values(2);
insert into t14 values(3);
insert into t14 select * from t14;
insert into t14 select * from t14;
insert into t14 select * from t14;
select * from t14 where c=1 order by 1;
insert into t14 select * from t14 where c > 1;
update t14 set c=c+100 where c>1;
drop table t14;
||||
1
1
2
2
3
3
c
1
1
1
1
1
1
1
1
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
05553aea2f5a3f993230af94f50f394d	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
25d5590a52ebe2bb888ef090b1507f52	b248616d23287bf9c4d4475c91614bf5	test	user_super	1	0	0	0	24	8	0	0	0	0	populated
4f9f3ee77b1dc41bfb5f55ee779b1828	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0	0	0	populated
6112fccffe96a4d985ae516443a58e34	29176a01eb28ce8e2190b1e2fad60f75	test	user_super	1	16	0	0	24	0	0	0	0	0	populated
66fb868becd4e4a34001a337549a5bfa	d814f7204842756b5a4bd40bd006d886	test	user_super	1	0	32	0	40	0	0	0	0	0	populated
6b081e7724622c61a49dc0a4dd51c503	29176a01eb28ce8e2190b1e2fad60f75	test	user_super	3	21	0	0	21	0	0	0	0	0	populated
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	3	0	0	0	0	3	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
f8bf2c7d5184e2294a7ca828d841dee5	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
Case 15: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t15(c int);
insert into t15 values(1);
insert into t15 values(2);
insert into t15 values(3);
insert into t15 select * from t15;
insert into t15 select * from t15;
insert into t15 select * from t15;
insert into t15 select * from t15 where c > 1;
update t15 set c=c+100 where c>1;
drop table t15;
||||
1
1
2
2
3
3
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written,
tmp_table_disk_usage, filesort_disk_usage,
case when elapsed_time > 0 then "populated" else "not populated"
        end elapsed_time
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
7be6095a8d2b757fb948061965252f13	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
a0bda04c698fe37565f24f6997164161	16439ba05833b9a72d3b040bdbd80dcd	test	user_super	1	16	0	0	24	0	0	0	0	0	populated
cc7eb824aba3bbf17e36c8f21bc25d7b	NULL	test	user_super	1	0	0	0	0	0	0	0	0	0	populated
db1589f429c8f6fbba750f47fbc7c130	NULL	test	user_super	3	0	0	0	0	3	0	0	0	0	populated
dec9ebf2f194699243449ab042ce687e	c351cb9aa35ffd197e5732574574e5dc	test	user_super	1	0	32	0	40	0	0	0	0	0	populated
e35ea48dddc8b6aeb05fa78412e04c1a	16439ba05833b9a72d3b040bdbd80dcd	test	user_super	3	21	0	0	21	0	0	0	0	0	populated
e774a92c71899fc36599c5b7c754d556	NULL	test	user_super	1	0	0	0	0	1	0	0	0	0	populated
f8c15ed1d4a0b6e5411fc27a24740b91	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0	0	0	populated
Case 16: Flush sql_statistics and confirm that all stats are gone.
flush sql_statistics;
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent
38e82fbb61896ae245f55ffb653a654a	NULL	test	user_super	1	0	0	0	0	0
select * from information_schema.sql_text;
SQL_ID	SQL_TYPE	SQL_TEXT_LENGTH	SQL_TEXT
8234fbe414f4c7e1ec4ab3d9ba0fe4b1	SELECT	222	SELECT `sql_id` , `plan_id` , `table_schema` , `user_name` , `execution_count` , `rows_inserted` , `rows_updated` , `rows_deleted` , `rows_read` , `rows_sent` FROM `information_schema` . `sql_statistics` ORDER BY `sql_id` 
38e82fbb61896ae245f55ffb653a654a	OTHER	21	FLUSH SQL_STATISTICS 
select count(*) from information_schema.client_attributes;
count(*)
1
Case 17: Temp Table Space and Filesort Space Statistics
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
create table t17 (i int, c char(255));
insert into t17 values (0, lpad('a', 250, 'b'));
insert into t17 select i+1,c from t17;
insert into t17 select i+2,c from t17;
insert into t17 select i+4,c from t17;
insert into t17 select i+8,c from t17;
insert into t17 select i+16,c from t17;
insert into t17 select i+32,c from t17;
insert into t17 select i+64,c from t17;
insert into t17 select i+128,c from t17;
insert into t17 select i+256,c from t17;
set session tmp_table_size=16384;
set session max_heap_table_size=16384;
set global sql_stats_control = ON;
insert into t17 select i+512,c from t17;
select i, substr(c, 1, 10) from t17 group by i, c;
select i, substr(c, 1, 10) from t17 order by i, c;
select i, substr(c, 1, 10) from t17 group by i, c order by i, c;
select count(*) from (select * from t17) v;
select t.sql_text, s.rows_inserted, s.rows_updated, s.rows_deleted,
s.rows_read, s.rows_sent, s.tmp_table_bytes_written, s.filesort_bytes_written,
s.tmp_table_disk_usage, s.filesort_disk_usage,
case when s.elapsed_time > 0 then "populated" else "not populated"
       end elapsed_time
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id and t.sql_text not like '%information_schema%'
order by 1,2,3,4,5,6,7,8;
sql_text	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
CREATE TABLE `t17` ( `i` INTEGER , `c` CHARACTER (?) ) 	0	0	0	0	0	0	0	0	0	populated
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1	0	0	2	0	0	0	0	0	populated
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1022	0	0	1022	0	135168	0	136192	0	populated
INSERT INTO `t17` VALUES ( ? , `lpad` (...) ) 	1	0	0	0	0	0	0	0	0	populated
SELECT @@`sql_stats_control` 	0	0	0	0	1	0	0	0	0	populated
SELECT COUNT ( * ) FROM ( SELECT * FROM `t17` ) `v` 	0	0	0	1024	1	266240	0	267264	0	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` 	0	0	0	1024	1024	282624	826512	677888	808960	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` ORDER BY `i` , `c` 	0	0	0	1024	1024	540672	1350848	935936	1333248	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` ORDER BY `i` , `c` 	0	0	0	1024	1024	0	801936	0	796672	populated
SET GLOBAL `sql_stats_control` = ON 	0	0	0	0	0	0	0	0	0	populated
SET SESSION `max_heap_table_size` = ? 	0	0	0	0	0	0	0	0	0	populated
SET SESSION `tmp_table_size` = ? 	0	0	0	0	0	0	0	0	0	populated
create temporary table tm_t17(i int, c char(255)) engine=myisam;
insert into tm_t17 select * from t17;
update tm_t17 set c = lpad('b', 250, 'a');
create temporary table tm2_t17(i int, c char(255)) engine=myisam;
insert into tm2_t17 select * from t17;
drop temporary table tm2_t17;
delete from tm_t17 where i < 100;
drop temporary table tm_t17;
select t.sql_text, s.rows_inserted, s.rows_updated, s.rows_deleted,
s.rows_read, s.rows_sent, s.tmp_table_bytes_written, s.filesort_bytes_written,
s.tmp_table_disk_usage, s.filesort_disk_usage,
case when s.elapsed_time > 0 then "populated" else "not populated"
       end elapsed_time
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id and t.sql_text not like '%information_schema%'
order by 1,2,3,4,5,6,7,8;
sql_text	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
CREATE TABLE `t17` ( `i` INTEGER , `c` CHARACTER (?) ) 	0	0	0	0	0	0	0	0	0	populated
CREATE TEMPORARY TABLE `tm2_t17` ( `i` INTEGER , `c` CHARACTER (?) ) ENGINE = `myisam` 	0	0	0	0	0	0	0	1024	0	populated
CREATE TEMPORARY TABLE `tm_t17` ( `i` INTEGER , `c` CHARACTER (?) ) ENGINE = `myisam` 	0	0	0	0	0	0	0	1024	0	populated
DELETE FROM `tm_t17` WHERE `i` < ? 	0	0	0	0	0	700	0	0	0	populated
DROP TEMPORARY TABLE `tm2_t17` 	1024	0	0	0	0	0	0	0	0	populated
DROP TEMPORARY TABLE `tm_t17` 	1024	1024	100	2048	0	0	0	0	0	populated
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1	0	0	2	0	0	0	0	0	populated
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1022	0	0	1022	0	135168	0	136192	0	populated
INSERT INTO `t17` VALUES ( ? , `lpad` (...) ) 	1	0	0	0	0	0	0	0	0	populated
INSERT INTO `tm2_t17` SELECT * FROM `t17` 	0	0	0	1024	0	266240	0	266240	0	populated
INSERT INTO `tm_t17` SELECT * FROM `t17` 	0	0	0	1024	0	266240	0	266240	0	populated
SELECT @@`sql_stats_control` 	0	0	0	0	1	0	0	0	0	populated
SELECT COUNT ( * ) FROM ( SELECT * FROM `t17` ) `v` 	0	0	0	1024	1	266240	0	267264	0	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` 	0	0	0	1024	1024	282624	826512	677888	808960	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` ORDER BY `i` , `c` 	0	0	0	1024	1024	540672	1350848	935936	1333248	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` ORDER BY `i` , `c` 	0	0	0	1024	1024	0	801936	0	796672	populated
SET GLOBAL `sql_stats_control` = ON 	0	0	0	0	0	0	0	0	0	populated
SET SESSION `max_heap_table_size` = ? 	0	0	0	0	0	0	0	0	0	populated
SET SESSION `tmp_table_size` = ? 	0	0	0	0	0	0	0	0	0	populated
UPDATE `tm_t17` SET `c` = `lpad` (...) 	0	0	0	0	0	266240	0	0	0	populated
drop table t17;
select t.sql_text, s.rows_inserted, s.rows_updated, s.rows_deleted,
s.rows_read, s.rows_sent, s.tmp_table_bytes_written, s.filesort_bytes_written,
s.tmp_table_disk_usage, s.filesort_disk_usage,
case when s.elapsed_time > 0 then "populated" else "not populated"
       end elapsed_time
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id and t.sql_text not like '%information_schema%'
order by 1,2,3,4,5,6,7,8;
sql_text	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
CREATE TABLE `t17` ( `i` INTEGER , `c` CHARACTER (?) ) 	0	0	0	0	0	0	0	0	0	populated
CREATE TEMPORARY TABLE `tm2_t17` ( `i` INTEGER , `c` CHARACTER (?) ) ENGINE = `myisam` 	0	0	0	0	0	0	0	1024	0	populated
CREATE TEMPORARY TABLE `tm_t17` ( `i` INTEGER , `c` CHARACTER (?) ) ENGINE = `myisam` 	0	0	0	0	0	0	0	1024	0	populated
DELETE FROM `tm_t17` WHERE `i` < ? 	0	0	0	0	0	700	0	0	0	populated
DROP TABLE `t17` 	0	0	0	0	0	0	0	0	0	populated
DROP TEMPORARY TABLE `tm2_t17` 	1024	0	0	0	0	0	0	0	0	populated
DROP TEMPORARY TABLE `tm_t17` 	1024	1024	100	2048	0	0	0	0	0	populated
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1	0	0	2	0	0	0	0	0	populated
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1022	0	0	1022	0	135168	0	136192	0	populated
INSERT INTO `t17` VALUES ( ? , `lpad` (...) ) 	1	0	0	0	0	0	0	0	0	populated
INSERT INTO `tm2_t17` SELECT * FROM `t17` 	0	0	0	1024	0	266240	0	266240	0	populated
INSERT INTO `tm_t17` SELECT * FROM `t17` 	0	0	0	1024	0	266240	0	266240	0	populated
SELECT @@`sql_stats_control` 	0	0	0	0	1	0	0	0	0	populated
SELECT COUNT ( * ) FROM ( SELECT * FROM `t17` ) `v` 	0	0	0	1024	1	266240	0	267264	0	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` 	0	0	0	1024	1024	282624	826512	677888	808960	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` ORDER BY `i` , `c` 	0	0	0	1024	1024	540672	1350848	935936	1333248	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` ORDER BY `i` , `c` 	0	0	0	1024	1024	0	801936	0	796672	populated
SET GLOBAL `sql_stats_control` = ON 	0	0	0	0	0	0	0	0	0	populated
SET SESSION `max_heap_table_size` = ? 	0	0	0	0	0	0	0	0	0	populated
SET SESSION `tmp_table_size` = ? 	0	0	0	0	0	0	0	0	0	populated
UPDATE `tm_t17` SET `c` = `lpad` (...) 	0	0	0	0	0	266240	0	0	0	populated
Case 18: Multiple statement support for Temp Table Space and Filesort Space Statistics
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
create table t18 (i int, c char(255));
insert into t18 values (0, lpad('a', 250, 'b'));
insert into t18 select i+1,c from t18;
insert into t18 select i+2,c from t18;
insert into t18 select i+4,c from t18;
insert into t18 select i+8,c from t18;
insert into t18 select i+16,c from t18;
insert into t18 select i+32,c from t18;
insert into t18 select i+64,c from t18;
insert into t18 select i+128,c from t18;
insert into t18 select i+256,c from t18;
set session tmp_table_size=16384;
set session max_heap_table_size=16384;
set global sql_stats_control = ON;
select t.sql_text, s.rows_inserted, s.rows_updated, s.rows_deleted,
s.rows_read, s.rows_sent, s.tmp_table_bytes_written, s.filesort_bytes_written,
s.tmp_table_disk_usage, s.filesort_disk_usage,
case when s.elapsed_time > 0 then "populated" else "not populated"
       end elapsed_time
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id and t.sql_text not like '%information_schema%'
order by 1,2,3,4,5,6,7,8;
sql_text	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
CREATE TABLE `t18` ( `i` INTEGER , `c` CHARACTER (?) ) 	0	0	0	0	0	0	0	0	0	populated
INSERT INTO `t18` SELECT `i` + ? , `c` FROM `t18` 	1	0	0	2	0	0	0	0	0	populated
INSERT INTO `t18` SELECT `i` + ? , `c` FROM `t18` 	510	0	0	510	0	118272	0	121344	0	populated
INSERT INTO `t18` VALUES ( ? , `lpad` (...) ) 	1	0	0	0	0	0	0	0	0	populated
SELECT @@`sql_stats_control` 	0	0	0	0	1	0	0	0	0	populated
SET GLOBAL `sql_stats_control` = ON 	0	0	0	0	0	0	0	0	0	populated
SET SESSION `max_heap_table_size` = ? 	0	0	0	0	0	0	0	0	0	populated
SET SESSION `tmp_table_size` = ? 	0	0	0	0	0	0	0	0	0	populated
insert into t18 select i+512,c from t18;
select i, substr(c, 1, 10) from t18 group by i, c;
select i, substr(c, 1, 10) from t18 order by i, c;
select i, substr(c, 1, 10) from t18 group by i, c order by i, c;
select count(*) from (select * from t18) v;
create temporary table tm_t18(i int, c char(255)) engine=myisam;
insert into tm_t18 select * from t18;
update tm_t18 set c = lpad('b', 250, 'a');
create temporary table tm2_t18(i int, c char(255)) engine=myisam;
insert into tm2_t18 select * from t18;
drop temporary table tm2_t18;
delete from tm_t18 where i < 100;
drop temporary table tm_t18;
drop table t18;
||||
select t.sql_text, s.rows_inserted, s.rows_updated, s.rows_deleted,
s.rows_read, s.rows_sent, s.tmp_table_bytes_written, s.filesort_bytes_written,
s.tmp_table_disk_usage, s.filesort_disk_usage,
case when s.elapsed_time > 0 then "populated" else "not populated"
       end elapsed_time
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id and t.sql_text not like '%information_schema%'
order by 1,2,3,4,5,6,7,8||||
sql_text	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written	tmp_table_disk_usage	filesort_disk_usage	elapsed_time
CREATE TABLE `t18` ( `i` INTEGER , `c` CHARACTER (?) ) 	0	0	0	0	0	0	0	0	0	populated
CREATE TEMPORARY TABLE `tm2_t18` ( `i` INTEGER , `c` CHARACTER (?) ) ENGINE = `myisam` 	0	0	0	0	0	0	0	1024	0	populated
CREATE TEMPORARY TABLE `tm_t18` ( `i` INTEGER , `c` CHARACTER (?) ) ENGINE = `myisam` 	0	0	0	0	0	0	0	1024	0	populated
DELETE FROM `tm_t18` WHERE `i` < ? 	0	0	0	0	0	700	0	0	0	populated
DROP TABLE `t18` 	0	0	0	0	0	0	0	0	0	populated
DROP TEMPORARY TABLE `tm2_t18` 	1024	0	0	0	0	0	0	0	0	populated
DROP TEMPORARY TABLE `tm_t18` 	1024	1024	100	2048	0	0	0	0	0	populated
INSERT INTO `t18` SELECT `i` + ? , `c` FROM `t18` 	1	0	0	2	0	0	0	0	0	populated
INSERT INTO `t18` SELECT `i` + ? , `c` FROM `t18` 	1022	0	0	1022	0	253440	0	257536	0	populated
INSERT INTO `t18` VALUES ( ? , `lpad` (...) ) 	1	0	0	0	0	0	0	0	0	populated
INSERT INTO `tm2_t18` SELECT * FROM `t18` 	0	0	0	1024	0	266240	0	266240	0	populated
INSERT INTO `tm_t18` SELECT * FROM `t18` 	0	0	0	1024	0	266240	0	266240	0	populated
SELECT @@`sql_stats_control` 	0	0	0	0	1	0	0	0	0	populated
SELECT COUNT ( * ) FROM ( SELECT * FROM `t18` ) `v` 	0	0	0	1024	1	266240	0	267264	0	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t18` GROUP BY `i` , `c` 	0	0	0	1024	1024	282624	826512	677888	808960	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t18` GROUP BY `i` , `c` ORDER BY `i` , `c` 	0	0	0	1024	1024	540672	1350848	935936	1333248	populated
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t18` ORDER BY `i` , `c` 	0	0	0	1024	1024	0	801936	0	796672	populated
SET GLOBAL `sql_stats_control` = ON 	0	0	0	0	0	0	0	0	0	populated
SET SESSION `max_heap_table_size` = ? 	0	0	0	0	0	0	0	0	0	populated
SET SESSION `tmp_table_size` = ? 	0	0	0	0	0	0	0	0	0	populated
UPDATE `tm_t18` SET `c` = `lpad` (...) 	0	0	0	0	0	266240	0	0	0	populated
set global sql_stats_control=OFF_HARD;
create table idx_dive_tbl(a1 int, a2 int, a3 int, a4 int, a5 int,
a6 int, a7 int, a8 int, a9 int, a10 int);
create procedure populate()
begin
declare i int default 0;
while i < 100 do
insert into idx_dive_tbl values(i, i+1, i+2, i+3, i+4,
i, i+1, i+2, i+3, i+4);
set i = i + 1;
end while;
end //
call populate();
create index idx_dive_tbl_idx_a1 on idx_dive_tbl(a1);
create index idx_dive_tbl_idx_a2 on idx_dive_tbl(a2);
create index idx_dive_tbl_idx_a3 on idx_dive_tbl(a3);
create index idx_dive_tbl_idx_a4 on idx_dive_tbl(a4);
create index idx_dive_tbl_idx_a5 on idx_dive_tbl(a5);
create index idx_dive_tbl_idx_a6 on idx_dive_tbl(a6);
create index idx_dive_tbl_idx_a7 on idx_dive_tbl(a7);
create index idx_dive_tbl_idx_a8 on idx_dive_tbl(a8);
create index idx_dive_tbl_idx_a9 on idx_dive_tbl(a9);
create index idx_dive_tbl_idx_a10 on idx_dive_tbl(a10);
set optimizer_trace_max_mem_size=1048576;
SET end_markers_in_json=off;
flush sql_statistics;
Case 19.1: eq_range_index_dive_limit=10
SET eq_range_index_dive_limit=10;
SET optimizer_trace="enabled=on,one_line=off";
set global sql_stats_control=ON;
set @trace_count = 0;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
count(*)
0
select round(length(trace)-
length(replace(trace, "\"index_dives_for_eq_ranges\": true", "")))
/length("\"index_dives_for_eq_ranges\": true") into @trace_count
from information_schema.optimizer_trace;
set global sql_stats_control=OFF_SOFT;
SET optimizer_trace="enabled=off";
select sql_text, index_dive_count,
cast(@trace_count as UNSIGNED) as indexes_accessed_for_dive,
case
when index_dive_count = 45 then "Success"
            else "Fail"
       end as test_status,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from (select concat(substring(sql_text, 1, 23), "...") as sql_text,
index_dive_count, index_dive_cpu, compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
and sql_text not like 'SET%'
           and sql_text not like '%round%') v;
sql_text	index_dive_count	indexes_accessed_for_dive	test_status	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	45	9	Success	populated	populated
flush sql_statistics;
Case 19.2: eq_range_index_dive_limit=5
SET eq_range_index_dive_limit=5;
SET optimizer_trace="enabled=on,one_line=off";
set global sql_stats_control=ON;
set @trace_count = 0;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
count(*)
0
select round(length(trace)-
length(replace(trace, "\"index_dives_for_eq_ranges\": true", "")))
/length("\"index_dives_for_eq_ranges\": true") into @trace_count
from information_schema.optimizer_trace;
set global sql_stats_control=OFF_SOFT;
SET optimizer_trace="enabled=off";
select sql_text, index_dive_count,
cast(@trace_count as UNSIGNED) as indexes_accessed_for_dive,
case
when index_dive_count = 10 then "Success"
            else "Fail"
       end as test_status,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from (select concat(substring(sql_text, 1, 23), "...") as sql_text,
index_dive_count, index_dive_cpu, compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
and sql_text not like 'SET%'
           and sql_text not like '%round%') v;
sql_text	index_dive_count	indexes_accessed_for_dive	test_status	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	10	4	Success	populated	populated
flush sql_statistics;
Case 19.3: eq_range_index_dive_limit=11
SET eq_range_index_dive_limit=11;
SET optimizer_trace="enabled=on,one_line=off";
set global sql_stats_control=ON;
set @trace_count = 0;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
count(*)
0
select round(length(trace)-
length(replace(trace, "\"index_dives_for_eq_ranges\": true", "")))
/length("\"index_dives_for_eq_ranges\": true") into @trace_count
from information_schema.optimizer_trace;
set global sql_stats_control=OFF_SOFT;
SET optimizer_trace="enabled=off";
select sql_text, index_dive_count,
cast(@trace_count as UNSIGNED) as indexes_accessed_for_dive,
case
when index_dive_count = 55 then "Success"
            else "Fail"
       end as test_status,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from (select concat(substring(sql_text, 1, 23), "...") as sql_text,
index_dive_count, index_dive_cpu, compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
and sql_text not like 'SET%'
           and sql_text not like '%round%') v;
sql_text	index_dive_count	indexes_accessed_for_dive	test_status	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	55	10	Success	populated	populated
flush sql_statistics;
Case 19.4: eq_range_index_dive_limit=2
SET eq_range_index_dive_limit=2;
SET optimizer_trace="enabled=on,one_line=off";
set global sql_stats_control=ON;
set @trace_count = 0;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
count(*)
0
select round(length(trace)-
length(replace(trace, "\"index_dives_for_eq_ranges\": true", "")))
/length("\"index_dives_for_eq_ranges\": true") into @trace_count
from information_schema.optimizer_trace;
set global sql_stats_control=OFF_SOFT;
SET optimizer_trace="enabled=off";
select sql_text, index_dive_count,
cast(@trace_count as UNSIGNED) as indexes_accessed_for_dive,
case
when index_dive_count = 1 then "Success"
            else "Fail"
       end as test_status,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from (select concat(substring(sql_text, 1, 23), "...") as sql_text,
index_dive_count, index_dive_cpu, compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
and sql_text not like 'SET%'
           and sql_text not like '%round%') v;
sql_text	index_dive_count	indexes_accessed_for_dive	test_status	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	1	1	Success	populated	populated
flush sql_statistics;
Case 19.5: eq_range_index_dive_limit=7
SET eq_range_index_dive_limit=7;
SET optimizer_trace="enabled=on,one_line=off";
set global sql_stats_control=ON;
set @trace_count = 0;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
count(*)
0
select round(length(trace)-
length(replace(trace, "\"index_dives_for_eq_ranges\": true", "")))
/length("\"index_dives_for_eq_ranges\": true") into @trace_count
from information_schema.optimizer_trace;
set global sql_stats_control=OFF_SOFT;
SET optimizer_trace="enabled=off";
select sql_text, index_dive_count,
cast(@trace_count as UNSIGNED) as indexes_accessed_for_dive,
case
when index_dive_count = 21 then "Success"
            else "Fail"
       end as test_status,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from (select concat(substring(sql_text, 1, 23), "...") as sql_text,
index_dive_count, index_dive_cpu, compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
and sql_text not like 'SET%'
           and sql_text not like '%round%') v;
sql_text	index_dive_count	indexes_accessed_for_dive	test_status	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	21	6	Success	populated	populated
flush sql_statistics;
Case 19.6: eq_range_index_dive_limit=11
SET eq_range_index_dive_limit=11;
set global sql_stats_control=ON;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
||||
count(*)
1
count(*)
0
count(*)
0
count(*)
0
count(*)
0
count(*)
0
count(*)
0
count(*)
0
count(*)
0
count(*)
0
select concat(substring(sql_text, 1, 23), "...") as sql_text,
length(sql_text) sql_text_len,
index_dive_count,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
order by 1,2,3,4||||
sql_text	sql_text_len	index_dive_count	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	74	1	populated	populated
SELECT COUNT ( * ) FROM...	109	3	populated	populated
SELECT COUNT ( * ) FROM...	144	6	populated	populated
SELECT COUNT ( * ) FROM...	179	10	populated	populated
SELECT COUNT ( * ) FROM...	214	15	populated	populated
SELECT COUNT ( * ) FROM...	249	21	populated	populated
SELECT COUNT ( * ) FROM...	284	28	populated	populated
SELECT COUNT ( * ) FROM...	319	36	populated	populated
SELECT COUNT ( * ) FROM...	354	45	populated	populated
SELECT COUNT ( * ) FROM...	390	55	populated	populated
drop table idx_dive_tbl;
drop procedure populate;
Cleanup
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.max_digest_sample_age=-1;
drop table t1;
drop user user_super@localhost;
Case 20: Unit test for sql_statistics.elapsed_time
create database test_db;
create user test_user@localhost;
grant all on test_db to test_user@localhost;
grant all on test to test_user@localhost;
use test_db;
set @@GLOBAL.sql_stats_control="ON";
set @start_max_running_queries= @@global.max_running_queries;
set @start_max_waiting_queries= @@global.max_waiting_queries;
set @@global.max_running_queries=2;
set @@global.max_waiting_queries=2;
create table t1(a int) engine=InnoDB;
create table t2(a int) engine=InnoDB;
lock table t2 write;
use test_db;
unlock tables;
"*** Test Succeeded!!!***"
drop database test_db;
Case 20 Cleanup
Verify there are no waiting threads.
select count(*) from information_schema.processlist where state='waiting for admission';
count(*)
0
select count(*) from information_schema.admission_control_entities where schema_name = 'test_db';
count(*)
0
set @@global.max_running_queries=@start_max_running_queries;
set @@global.max_waiting_queries=@start_max_waiting_queries;
drop user test_user@localhost;
Case 21: Unit test for access control check
set @@GLOBAL.sql_stats_control="ON";
set @@GLOBAL.mt_tables_access_control=1;
create user user211;
grant select, insert on *.* to user211;
create user user212;
grant process on *.* to user212;
select * from information_schema.sql_statistics;
ERROR 42000: Access denied; you need (at least one of) the PROCESS privilege(s) for this operation
select * from information_schema.sql_text;
ERROR 42000: Access denied; you need (at least one of) the PROCESS privilege(s) for this operation
select sql_id, table_schema, user_name from information_schema.sql_statistics order by sql_id;
sql_id	table_schema	user_name
1af4b32b409a682610ce8527f2838d2e	test	user211
1f95aa8fb1dbb039eac157f34807a296	NULL	root
380054d98c85496467dcbe17c081b1d8	NULL	root
69d2b2d0804cd6b2709fce6ccfdb3437	NULL	root
86592af769f219cd304d2d828d46b96a	test	user211
935882817c251cf7a9acedcb0ba27144	NULL	root
f8cfc530cfda60e5539e4c3b6f12c133	NULL	root
select * from information_schema.sql_text order by sql_id;
SQL_ID	SQL_TYPE	SQL_TEXT_LENGTH	SQL_TEXT
1af4b32b409a682610ce8527f2838d2e	SELECT	54	SELECT * FROM `information_schema` . `sql_statistics` 
1f95aa8fb1dbb039eac157f34807a296	CREATE	29	CREATE SYSTEM_USER `user211` 
380054d98c85496467dcbe17c081b1d8	CREATE	29	CREATE SYSTEM_USER `user212` 
69d2b2d0804cd6b2709fce6ccfdb3437	OTHER	36	GRANT PROCESS ON * . * TO `user212` 
86592af769f219cd304d2d828d46b96a	SELECT	48	SELECT * FROM `information_schema` . `sql_text` 
935882817c251cf7a9acedcb0ba27144	SET	46	SET @@GLOBAL . `mt_tables_access_control` = ? 
e69ac245ca230df5cbbaaa537a0cf4b3	SELECT	110	SELECT `sql_id` , `table_schema` , `user_name` FROM `information_schema` . `sql_statistics` ORDER BY `sql_id` 
f8cfc530cfda60e5539e4c3b6f12c133	OTHER	44	GRANT SELECT , INSERT ON * . * TO `user211` 
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.mt_tables_access_control=0;
drop user user211;
drop user user212;
Case 22: Unit test for access control check
set @@GLOBAL.sql_stats_control="ON";
set sql_stats_read_control=false;
select 1;
1
1
select * from information_schema.sql_statistics;
ERROR HY000: Reads are disabled on SQL_STATISTICS information schema table
select * from information_schema.sql_text;
ERROR HY000: Reads are disabled on SQL_TEXT information schema table
select * from information_schema.client_attributes;
ERROR HY000: Reads are disabled on CLIENT_ATTRIBUTES information schema table
set @@GLOBAL.sql_stats_control="OFF_HARD";
set sql_stats_read_control=true;
Case 23: Unit test to check protection against repeated reads
set @@GLOBAL.sql_stats_control="ON";
select 1;
1
1
select * from information_schema.sql_statistics a, information_schema.sql_statistics b;
ERROR HY000: Repeated read of information schema table SQL_STATISTICS protected by mutex global_sql_stats is not permitted
select * from information_schema.sql_text a, information_schema.sql_text b;
ERROR HY000: Repeated read of information schema table SQL_TEXT protected by mutex global_sql_stats is not permitted
select * from information_schema.client_attributes a, information_schema.client_attributes b;
ERROR HY000: Repeated read of information schema table CLIENT_ATTRIBUTES protected by mutex global_sql_stats is not permitted
set @@GLOBAL.sql_stats_control="OFF_HARD";
