drop table if exists t1,t2,t3;
select * from (select 2 from DUAL) b;
2
2
SELECT 1 as a FROM (SELECT 1 UNION SELECT a) b;
ERROR 42S22: Unknown column 'a' in 'field list'
SELECT 1 as a FROM (SELECT a UNION SELECT 1) b;
ERROR 42S22: Unknown column 'a' in 'field list'
CREATE TABLE t1 (a int not null, b char (10) not null);
insert into t1 values(1,'a'),(2,'b'),(3,'c'),(3,'c');
CREATE TABLE t2 (a int not null, b char (10) not null);
insert into t2 values (3,'c'),(4,'d'),(5,'f'),(6,'e');
select t1.a,t3.y from t1,(select a as y from t2  where b='c') as t3  where t1.a = t3.y;
a	y
3	3
3	3
select t1.a,t3.a from t1,(select * from t2  where b='c') as t3  where t1.a = t3.a;
a	a
3	3
3	3
CREATE TABLE t3 (a int not null, b char (10) not null);
insert into t3 values (3,'f'),(4,'y'),(5,'z'),(6,'c');
select t1.a,t4.y from t1,(select t2.a as y from t2,(select t3.b from t3 where t3.a>3) as t5  where t2.b=t5.b) as t4  where t1.a = t4.y;
a	y
3	3
3	3
SELECT a FROM (SELECT 1 FROM (SELECT 1) a HAVING a=1) b;
ERROR 42S22: Unknown column 'a' in 'having clause'
SELECT a,b as a FROM (SELECT '1' as a,'2' as b) b  HAVING a=1;
ERROR 23000: Column 'a' in having clause is ambiguous
SELECT a,2 as a FROM (SELECT '1' as a) b HAVING a=2;
a	a
1	2
SELECT a,2 as a FROM (SELECT '1' as a) b HAVING a=1;
a	a
SELECT 1 FROM (SELECT 1) a WHERE a=2;
ERROR 42S22: Unknown column 'a' in 'where clause'
SELECT (SELECT 1) as a FROM (SELECT 1 FROM t1  HAVING a=1) as a;
ERROR 42S22: Unknown column 'a' in 'having clause'
select * from t1 as x1, (select * from t1) as x2;
a	b	a	b
1	a	1	a
2	b	1	a
3	c	1	a
3	c	1	a
1	a	2	b
2	b	2	b
3	c	2	b
3	c	2	b
1	a	3	c
2	b	3	c
3	c	3	c
3	c	3	c
1	a	3	c
2	b	3	c
3	c	3	c
3	c	3	c
explain select * from t1 as x1, (select * from t1) as x2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	x1	ALL	NULL	NULL	NULL	NULL	4	NULL
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	4	Using join buffer (Block Nested Loop)
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	4	NULL
drop table if exists  t2,t3;
select * from (select 1) as a;
1
1
select a from (select 1 as a) as b;
a
1
select 1 from (select 1) as a;
1
1
select * from (select * from t1 union select * from t1) a;
a	b
1	a
2	b
3	c
select * from (select * from t1 union all select * from t1) a;
a	b
1	a
2	b
3	c
3	c
1	a
2	b
3	c
3	c
select * from (select * from t1 union all select * from t1 limit 2) a;
a	b
1	a
2	b
explain select * from (select * from t1 union select * from t1) a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	8	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	4	NULL
3	UNION	t1	ALL	NULL	NULL	NULL	NULL	4	NULL
NULL	UNION RESULT	<union2,3>	ALL	NULL	NULL	NULL	NULL	NULL	Using temporary
explain select * from (select * from t1 union all select * from t1) a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	8	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	4	NULL
3	UNION	t1	ALL	NULL	NULL	NULL	NULL	4	NULL
CREATE TABLE t2 (a int not null);
insert into t2 values(1);
select * from (select * from t1 where t1.a=(select a from t2 where t2.a=t1.a)) a;
a	b
1	a
select * from (select * from t1 where t1.a=(select t2.a from t2 where t2.a=t1.a) union select t1.a, t1.b from t1) a;
a	b
1	a
2	b
3	c
explain select * from (select t1.*, t2.a as t2a from t1,t2 where t1.a=t2.a) t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	4	NULL
2	DERIVED	t2	system	NULL	NULL	NULL	NULL	1	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	4	Using where
drop table t1, t2;
create table t1(a int not null, t char(8), index(a));
SELECT * FROM (SELECT * FROM t1) as b ORDER BY a  ASC LIMIT 0,20;
a	t
1	1
2	2
3	3
4	4
5	5
6	6
7	7
8	8
9	9
10	10
11	11
12	12
13	13
14	14
15	15
16	16
17	17
18	18
19	19
20	20
explain select count(*) from t1 as tt1, (select * from t1) as tt2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	tt1	index	NULL	a	4	NULL	10000	Using index
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	10000	Using join buffer (Block Nested Loop)
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	10000	NULL
drop table t1;
SELECT * FROM (SELECT (SELECT * FROM (SELECT 1 as a) as a )) as b;
(SELECT * FROM (SELECT 1 as a) as a )
1
select * from (select 1 as a) b  left join (select 2 as a) c using(a);
a
1
SELECT * FROM (SELECT 1 UNION SELECT a) b;
ERROR 42S22: Unknown column 'a' in 'field list'
SELECT 1 as a FROM (SELECT a UNION SELECT 1) b;
ERROR 42S22: Unknown column 'a' in 'field list'
SELECT 1 as a FROM (SELECT 1 UNION SELECT a) b;
ERROR 42S22: Unknown column 'a' in 'field list'
select 1 from  (select 2) a order by 0;
ERROR 42S22: Unknown column '0' in 'order clause'
create table t1 (id int);
insert into t1 values (1),(2),(3);
describe select * from (select * from t1 group by id) bar;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	3	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	3	Using temporary; Using filesort
drop table t1;
create table t1 (mat_id MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, matintnum CHAR(6) NOT NULL, test MEDIUMINT UNSIGNED NULL);
create table t2 (mat_id MEDIUMINT UNSIGNED NOT NULL, pla_id MEDIUMINT UNSIGNED NOT NULL);
insert into t1 values (NULL, 'a', 1), (NULL, 'b', 2), (NULL, 'c', 3), (NULL, 'd', 4), (NULL, 'e', 5), (NULL, 'f', 6), (NULL, 'g', 7), (NULL, 'h', 8), (NULL, 'i', 9);
insert into t2 values (1, 100), (1, 101), (1, 102), (2, 100), (2, 103), (2, 104), (3, 101), (3, 102), (3, 105);
analyze table t1, t2;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
SELECT STRAIGHT_JOIN d.pla_id, m2.mat_id FROM t1 m2 INNER JOIN (SELECT mp.pla_id, MIN(m1.matintnum) AS matintnum FROM t2 mp INNER JOIN t1 m1 ON mp.mat_id=m1.mat_id GROUP BY mp.pla_id) d ON d.matintnum=m2.matintnum;
pla_id	mat_id
100	1
101	1
102	1
103	2
104	2
105	3
SELECT STRAIGHT_JOIN d.pla_id, m2.test FROM t1 m2  INNER JOIN (SELECT mp.pla_id, MIN(m1.matintnum) AS matintnum FROM t2 mp INNER JOIN t1 m1 ON mp.mat_id=m1.mat_id GROUP BY mp.pla_id) d ON d.matintnum=m2.matintnum;
pla_id	test
100	1
101	1
102	1
103	2
104	2
105	3
explain SELECT STRAIGHT_JOIN d.pla_id, m2.mat_id FROM t1 m2 INNER JOIN (SELECT mp.pla_id, MIN(m1.matintnum) AS matintnum FROM t2 mp INNER JOIN t1 m1 ON mp.mat_id=m1.mat_id GROUP BY mp.pla_id) d ON d.matintnum=m2.matintnum;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	m2	ALL	NULL	NULL	NULL	NULL	9	NULL
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	7	test.m2.matintnum	2	NULL
2	DERIVED	mp	ALL	NULL	NULL	NULL	NULL	9	Using temporary; Using filesort
2	DERIVED	m1	eq_ref	PRIMARY	PRIMARY	3	test.mp.mat_id	1	NULL
explain SELECT STRAIGHT_JOIN d.pla_id, m2.test FROM t1 m2  INNER JOIN (SELECT mp.pla_id, MIN(m1.matintnum) AS matintnum FROM t2 mp INNER JOIN t1 m1 ON mp.mat_id=m1.mat_id GROUP BY mp.pla_id) d ON d.matintnum=m2.matintnum;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	m2	ALL	NULL	NULL	NULL	NULL	9	NULL
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	7	test.m2.matintnum	2	NULL
2	DERIVED	mp	ALL	NULL	NULL	NULL	NULL	9	Using temporary; Using filesort
2	DERIVED	m1	eq_ref	PRIMARY	PRIMARY	3	test.mp.mat_id	1	NULL
drop table t1,t2;
SELECT a.x FROM (SELECT 1 AS x) AS a HAVING a.x = 1;
x
1
create user mysqltest_1;
create table t1 select 1 as a;
select 2 as a from (select * from t1) b;
ERROR 3D000: No database selected
use test;
select 2 as a from (select * from t1) b;
a
2
drop table t1;
select mail_id,  if(folder.f_description!='', folder.f_description, folder.f_name) as folder_name,  date, address_id, phrase, address,  subject from folder, (select  mail.mail_id as mail_id,  date_format(mail.h_date, '%b %e, %Y %h:%i') as date,  mail.folder_id,  sender.address_id as address_id,  sender.phrase as phrase, sender.address as address,    mail.h_subject as subject from    mail left join mxa as mxa_sender on mail.mail_id=mxa_sender.mail_id and mxa_sender.type='from' left join address as sender on mxa_sender.address_id=sender.address_id  mxa as mxa_recipient,   address as recipient, where 1     and mail.mail_id=mxa_recipient.mail_id   and mxa_recipient.address_id=recipient.address_id   and mxa_recipient.type='to'  and  match(sender.phrase, sender.address, sender.comment) against ('jeremy' in boolean mode)   and  match(recipient.phrase, recipient.address, recipient.comment) against ('monty' in boolean mode) order by mail.h_date desc limit 0, 25 ) as query where query.folder_id=folder.folder_id;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'mxa as mxa_recipient,   address as recipient, where 1     and mail.mail_id=mxa_r' at line 1
create table t1 (a int);
insert into t1 values (1),(2),(3);
update (select * from t1) as t1 set a = 5;
ERROR HY000: The target table t1 of the UPDATE is not updatable
delete from (select * from t1);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(select * from t1)' at line 1
insert into  (select * from t1) values (5);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(select * from t1) values (5)' at line 1
drop table t1;
create table t1 (E1 INTEGER UNSIGNED NOT NULL, E2 INTEGER UNSIGNED NOT NULL, E3 INTEGER UNSIGNED NOT NULL, PRIMARY KEY(E1)
);
insert into t1 VALUES(1,1,1), (2,2,1);
select count(*) from t1 INNER JOIN (SELECT A.E1, A.E2, A.E3 FROM t1 AS A WHERE A.E3 = (SELECT MAX(B.E3) FROM t1 AS B WHERE A.E2 = B.E2)) AS THEMAX ON t1.E1 = THEMAX.E2 AND t1.E1 = t1.E2;
count(*)
2
explain select count(*) from t1 INNER JOIN (SELECT A.E1, A.E2, A.E3 FROM t1 AS A WHERE A.E3 = (SELECT MAX(B.E3) FROM t1 AS B WHERE A.E2 = B.E2)) AS THEMAX ON t1.E1 = THEMAX.E2 AND t1.E1 = t1.E2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t1	ALL	PRIMARY	NULL	NULL	NULL	2	Using where
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	4	test.t1.E1	2	NULL
2	DERIVED	A	ALL	NULL	NULL	NULL	NULL	2	Using where
3	DEPENDENT SUBQUERY	B	ALL	NULL	NULL	NULL	NULL	2	Using where
drop table t1;
create table t1 (a int);
insert into t1 values (1),(2);
select * from ( select * from t1 union select * from t1) a,(select * from t1 union select * from t1) b;
a	a
1	1
2	1
1	2
2	2
explain select * from ( select * from t1 union select * from t1) a,(select * from t1 union select * from t1) b;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	4	NULL
1	PRIMARY	<derived4>	ALL	NULL	NULL	NULL	NULL	4	Using join buffer (Block Nested Loop)
4	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	2	NULL
5	UNION	t1	ALL	NULL	NULL	NULL	NULL	2	NULL
NULL	UNION RESULT	<union4,5>	ALL	NULL	NULL	NULL	NULL	NULL	Using temporary
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	2	NULL
3	UNION	t1	ALL	NULL	NULL	NULL	NULL	2	NULL
NULL	UNION RESULT	<union2,3>	ALL	NULL	NULL	NULL	NULL	NULL	Using temporary
drop table t1;
CREATE TABLE `t1` (
`N` int(11) unsigned NOT NULL default '0',
`M` tinyint(1) default '0'
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
INSERT INTO `t1` (N, M) VALUES (1, 0),(1, 0),(1, 0),(2, 0),(2, 0),(3, 0);
UPDATE `t1` AS P1 INNER JOIN (SELECT N FROM `t1` GROUP BY N HAVING Count(M) > 1) AS P2 ON P1.N = P2.N SET P1.M = 2;
select * from t1;
N	M
1	2
1	2
1	2
2	2
2	2
3	0
UPDATE `t1` AS P1 INNER JOIN (SELECT N FROM `t1` GROUP BY N HAVING Count(M) > 1) AS P2 ON P1.N = P2.N SET P1.M = 2, P2.N = 2;
ERROR HY000: The target table P2 of the UPDATE is not updatable
UPDATE `t1` AS P1 INNER JOIN (SELECT aaaa FROM `t1` GROUP BY N HAVING Count(M) > 1) AS P2 ON P1.N = P2.N SET P1.M = 2;
ERROR 42S22: Unknown column 'aaaa' in 'field list'
delete P1.* from `t1` AS P1 INNER JOIN (SELECT N FROM `t1` GROUP BY N HAVING Count(M) > 1) AS P2 ON P1.N = P2.N;
select * from t1;
N	M
3	0
delete P1.*,p2.* from `t1` AS P1 INNER JOIN (SELECT N FROM `t1` GROUP BY N HAVING Count(M) > 1) AS p2 ON P1.N = p2.N;
ERROR HY000: The target table p2 of the DELETE is not updatable
delete P1.* from `t1` AS P1 INNER JOIN (SELECT aaa FROM `t1` GROUP BY N HAVING Count(M) > 1) AS P2 ON P1.N = P2.N;
ERROR 42S22: Unknown column 'aaa' in 'field list'
drop table t1;
CREATE TABLE t1 (
OBJECTID int(11) NOT NULL default '0',
SORTORDER int(11) NOT NULL auto_increment,
KEY t1_SortIndex (SORTORDER),
KEY t1_IdIndex (OBJECTID)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
CREATE TABLE t2 (
ID int(11) default NULL,
PARID int(11) default NULL,
UNIQUE KEY t2_ID_IDX (ID),
KEY t2_PARID_IDX (PARID)
) engine=MyISAM DEFAULT CHARSET=latin1;
INSERT INTO t2 VALUES (1000,0),(1001,0),(1002,0),(1003,0),(1008,1),(1009,1),(1010,1),(1011,1),(1016,2);
CREATE TABLE t3 (
ID int(11) default NULL,
DATA decimal(10,2) default NULL,
UNIQUE KEY t3_ID_IDX (ID)
) engine=MyISAM DEFAULT CHARSET=latin1;
INSERT INTO t3 VALUES (1000,0.00),(1001,0.25),(1002,0.50),(1003,0.75),(1008,1.00),(1009,1.25),(1010,1.50),(1011,1.75);
select 497, TMP.ID, NULL from (select 497 as ID, MAX(t3.DATA) as DATA      from t1 join t2 on (t1.ObjectID = t2.ID) join t3 on (t1.ObjectID = t3.ID) group by t2.ParID order by DATA DESC) as TMP;
497	ID	NULL
drop table t1, t2, t3;
CREATE TABLE t1 (name char(1) default NULL, val int(5) default NULL);
INSERT INTO t1 VALUES ('a',1),  ('a',2),  ('a',2),  ('a',2),  ('a',3),  ('a',6), ('a',7), ('a',11), ('a',11), ('a',12), ('a',13), ('a',13), ('a',20), ('b',2), ('b',3), ('b',4), ('b',5);
SELECT s.name, AVG(s.val) AS median FROM (SELECT x.name, x.val FROM t1 x, t1 y WHERE x.name=y.name GROUP BY x.name, x.val HAVING SUM(y.val <= x.val) >= COUNT(*)/2 AND SUM(y.val >= x.val) >= COUNT(*)/2) AS s GROUP BY s.name;
name	median
a	7.0000
b	3.5000
explain SELECT s.name, AVG(s.val) AS median FROM (SELECT x.name, x.val FROM t1 x, t1 y WHERE x.name=y.name GROUP BY x.name, x.val HAVING SUM(y.val <= x.val) >= COUNT(*)/2 AND SUM(y.val >= x.val) >= COUNT(*)/2) AS s GROUP BY s.name;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	289	Using temporary; Using filesort
2	DERIVED	x	ALL	NULL	NULL	NULL	NULL	17	Using temporary; Using filesort
2	DERIVED	y	ALL	NULL	NULL	NULL	NULL	17	Using where; Using join buffer (Block Nested Loop)
drop table t1;
create table t2 (a int, b int, primary key (a));
insert into t2 values (1,7),(2,7);
explain select a from t2 where a>1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	index	PRIMARY	PRIMARY	4	NULL	2	Using where; Using index
explain select a from (select a from t2 where a>1) tt;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	2	NULL
2	DERIVED	t2	index	PRIMARY	PRIMARY	4	NULL	2	Using where; Using index
drop table t2;
CREATE TABLE `t1` ( `itemid` int(11) NOT NULL default '0', `grpid` varchar(15) NOT NULL default '', `vendor` int(11) NOT NULL default '0', `date_` date NOT NULL default '0000-00-00', `price` decimal(12,2) NOT NULL default '0.00', PRIMARY KEY  (`itemid`,`grpid`,`vendor`,`date_`), KEY `itemid` (`itemid`,`vendor`), KEY `itemid_2` (`itemid`,`date_`));
insert into t1 values (128, 'rozn', 2, curdate(), 10),
(128, 'rozn', 1, curdate(), 10);
SELECT MIN(price) min, MAX(price) max, AVG(price) avg FROM (SELECT SUBSTRING( MAX(concat(date_,";",price)), 12) price FROM t1 WHERE itemid=128 AND  grpid='rozn' GROUP BY itemid, grpid, vendor) lastprices;
min	max	avg
10.00	10.00	10
DROP TABLE t1;
create table t1 (a integer, b integer);
insert into t1 values (1,4), (2,2),(2,2), (4,1),(4,1),(4,1),(4,1);
select distinct sum(b) from t1 group by a;
sum(b)
4
select distinct sum(b) from (select a,b from t1) y group by a;
sum(b)
4
drop table t1;
CREATE TABLE t1 (a char(10), b char(10));
INSERT INTO t1 VALUES ('root','localhost'), ('root','%');
SELECT * FROM (SELECT (SELECT a.a FROM t1 AS a WHERE a.a = b.a) FROM t1 AS b) AS c;
ERROR 21000: Subquery returns more than 1 row
DROP TABLE t1;
create table t1(a int);
create table t2(a int);
create table t3(a int);
insert into t1 values(1),(1);
insert into t2 values(2),(2);
insert into t3 values(3),(3);
select * from t1 union distinct select * from t2 union all select * from t3;
a
1
2
3
3
select * from (select * from t1 union distinct select * from t2 union all select * from t3) X;
a
1
2
3
3
drop table t1, t2, t3;
create table t1 (a int);
create table t2 (a int);
select * from (select * from t1,t2) foo;
ERROR 42S21: Duplicate column name 'a'
drop table t1,t2;
create table t1 (ID int unsigned not null auto_increment,
DATA varchar(5) not null, primary key (ID));
create table t2 (ID int unsigned not null auto_increment,
DATA varchar(5) not null, FID int unsigned not null,
primary key (ID));
select A.* from (t1 inner join (select * from t2) as A on t1.ID = A.FID);
ID	DATA	FID
select t2.* from ((select * from t1) as A inner join t2 on A.ID = t2.FID);
ID	DATA	FID
select t2.* from (select * from t1) as A inner join t2 on A.ID = t2.FID;
ID	DATA	FID
drop table t1, t2;
drop user mysqltest_1;
# End of 4.1 tests
SELECT 0 FROM
(SELECT 0) t01, (SELECT 0) t02, (SELECT 0) t03, (SELECT 0) t04, (SELECT 0) t05,
(SELECT 0) t06, (SELECT 0) t07, (SELECT 0) t08, (SELECT 0) t09, (SELECT 0) t10,
(SELECT 0) t11, (SELECT 0) t12, (SELECT 0) t13, (SELECT 0) t14, (SELECT 0) t15,
(SELECT 0) t16, (SELECT 0) t17, (SELECT 0) t18, (SELECT 0) t19, (SELECT 0) t20,
(SELECT 0) t21, (SELECT 0) t22, (SELECT 0) t23, (SELECT 0) t24, (SELECT 0) t25,
(SELECT 0) t26, (SELECT 0) t27, (SELECT 0) t28, (SELECT 0) t29, (SELECT 0) t30,
(SELECT 0) t31, (SELECT 0) t32, (SELECT 0) t33, (SELECT 0) t34, (SELECT 0) t35,
(SELECT 0) t36, (SELECT 0) t37, (SELECT 0) t38, (SELECT 0) t39, (SELECT 0) t40,
(SELECT 0) t41, (SELECT 0) t42, (SELECT 0) t43, (SELECT 0) t44, (SELECT 0) t45,
(SELECT 0) t46, (SELECT 0) t47, (SELECT 0) t48, (SELECT 0) t49, (SELECT 0) t50,
(SELECT 0) t51, (SELECT 0) t52, (SELECT 0) t53, (SELECT 0) t54, (SELECT 0) t55,
(SELECT 0) t56, (SELECT 0) t57, (SELECT 0) t58, (SELECT 0) t59, (SELECT 0) t60,
(SELECT 0) t61;
0
0
#
#  A nested materialized derived table is used before being populated.
#  (addon for bug#19077)
#
CREATE TABLE t1 (i INT, j BIGINT);
INSERT INTO t1 VALUES (1, 2), (2, 2), (3, 2);
SELECT * FROM (SELECT MIN(i) FROM t1
WHERE j = SUBSTRING('12', (SELECT * FROM (SELECT MIN(j) FROM t1) t2))) t3;
MIN(i)
1
DROP TABLE t1;
# End of 5.0 tests
#
# Bug#55586: Crash JOIN of two subqueries in FROM + ORDER BY and GROUP BY
#
CREATE TABLE C (
`col_int_key` int(11) DEFAULT NULL,
`col_varchar_key` varchar(1) DEFAULT NULL,
`col_varchar_nokey` varchar(1) DEFAULT NULL,
KEY `col_varchar_key` (`col_varchar_key`,`col_int_key`)
);
INSERT INTO C VALUES (2,'w','w');
INSERT INTO C VALUES (2,'d','d');
SELECT SUM(DISTINCT table2.col_int_key) field1, 
table1.col_varchar_key field2 
FROM 
(SELECT * FROM C  ) table1
JOIN (SELECT * FROM C  ) table2
ON table2 .`col_varchar_key` = table1 .`col_varchar_nokey` 
GROUP  BY field2
ORDER  BY field1;
field1	field2
2	d
2	w
DROP TABLE C;
# End of test for bug#55586
#
# Bug#55561: Crash on JOIN with 2 FROM subqueries
#
CREATE TABLE C (
col_int int DEFAULT NULL,
col_varchar varchar(1) DEFAULT NULL
);
INSERT INTO `C` VALUES (0,NULL);
INSERT INTO `C` VALUES (5,'y');
SELECT table1.col_varchar
FROM 
( SELECT * FROM C  ) table1  
JOIN ( SELECT * FROM C  ) table2  ON table2.col_varchar = table1.col_varchar
WHERE 
table2.col_varchar < table2.col_varchar
AND table1.col_varchar != 'k' 
LIMIT  1;
col_varchar
DROP TABLE C;
# End on bug#55561
#
# Bug#56233: Hang during key generation for derived tables
#
CREATE TABLE C (
col_varchar_10_key varchar(10) DEFAULT NULL,
col_int_key int DEFAULT NULL,
pk int NOT NULL AUTO_INCREMENT,
col_date_key date DEFAULT NULL,
PRIMARY KEY (`pk`),
KEY `col_varchar_10_key` (`col_varchar_10_key`),
KEY `col_int_key` (`col_int_key`),
KEY `col_date_key` (`col_date_key`)
);
INSERT INTO C VALUES ('ok',3,1,'2003-04-02');
CREATE ALGORITHM=TEMPTABLE VIEW viewC AS SELECT * FROM C;
SELECT  table1.col_date_key AS field1 
FROM
C AS table1
WHERE 
(table1.col_int_key <=ANY 
( SELECT SUBQUERY1_t1.col_int_key 
FROM viewC AS SUBQUERY1_t1 
WHERE SUBQUERY1_t1.col_varchar_10_key <= table1.col_varchar_10_key 
) 
)
;
field1
2003-04-02
DROP TABLE C;
DROP VIEW viewC;
#
#
# Bug#55950: FROM Subquery joined by 2 varchar fields returns empty
#            set
#
CREATE TABLE `CC` (
`i1` varchar(1) DEFAULT NULL,
`i2` varchar(1) DEFAULT NULL
);
INSERT INTO `CC` VALUES ('m','m');
INSERT INTO `CC` VALUES ('c','c');
CREATE TABLE `C` (
`o1` varchar(1) DEFAULT NULL
);
INSERT INTO `C` VALUES ('m');
SELECT table1 . o1 
FROM C table1  
JOIN ( C table2  
JOIN ( SELECT * FROM CC ) table3  
ON table3 .`i1`  = table2 .o1  
) ON table3 .`i2`  = table2 .o1   
;
o1
m
# Ref access to the derived table should be used.
EXPLAIN SELECT table1 . o1 
FROM C table1  
JOIN ( C table2  
JOIN ( SELECT * FROM CC ) table3  
ON table3 .`i1`  = table2 .o1  
) ON table3 .`i2`  = table2 .o1   
;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	table1	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	table2	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	8	const,const	0	Using index
2	DERIVED	CC	ALL	NULL	NULL	NULL	NULL	2	NULL
DROP TABLE CC;
DROP TABLE C;
# End of test for bug#55950
#
# Bug#56592: Subquery with DISTINCT in FROM clause returns only partial
# result
#
CREATE TABLE `t1` (
`pk` int(11) NOT NULL,
`col_int_key` int(11) DEFAULT NULL,
`col_datetime_key` datetime DEFAULT NULL
) ENGINE=MyISAM;
INSERT INTO t1 VALUES (2, 9, NULL), (3, 3, '1900-01-01 00:00:00'),
(8, 8, '1900-01-01 00:00:00'), (15, 0, '2007-12-15 12:39:34');
SELECT * FROM ( 
SELECT DISTINCT tableB.col_datetime_key 
FROM t1 tableA LEFT JOIN t1 tableB ON tableA.pk < tableB.col_int_key
) AS FROM_SUBQUERY;
col_datetime_key
NULL
1900-01-01 00:00:00
EXPLAIN SELECT * FROM ( 
SELECT DISTINCT tableB.col_datetime_key 
FROM t1 tableA LEFT JOIN t1 tableB ON tableA.pk < tableB.col_int_key
) AS FROM_SUBQUERY;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	16	NULL
2	DERIVED	tableA	ALL	NULL	NULL	NULL	NULL	4	Using temporary
2	DERIVED	tableB	ALL	NULL	NULL	NULL	NULL	4	Using where; Distinct; Using join buffer (Block Nested Loop)
EXPLAIN SELECT * FROM ( 
SELECT DISTINCT tableA.col_datetime_key 
FROM t1 tableA LEFT JOIN t1 tableB ON tableA.pk < tableB.col_int_key
) AS FROM_SUBQUERY;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	16	NULL
2	DERIVED	tableA	ALL	NULL	NULL	NULL	NULL	4	Using temporary
2	DERIVED	tableB	ALL	NULL	NULL	NULL	NULL	4	Using where; Distinct; Using join buffer (Block Nested Loop)
DROP TABLE t1;
#
# Bug#58730 Assertion failed: table->key_read == 0 in close_thread_table,
#           temptable views
#
CREATE TABLE t1 (a INT);
CREATE TABLE t2 (b INT, KEY (b));
INSERT INTO t1 VALUES (1),(1);
INSERT INTO t2 VALUES (1),(1);
CREATE algorithm=temptable VIEW v1 AS
SELECT 1 FROM t1 LEFT JOIN t1 t3 ON 1 > (SELECT 1 FROM t1);
CREATE algorithm=temptable VIEW v2 AS SELECT 1 FROM t2;
EXPLAIN SELECT 1 FROM t1 JOIN v1 ON 1 > (SELECT 1 FROM v2);
ERROR 21000: Subquery returns more than 1 row
DROP TABLE t1, t2;
DROP VIEW v1, v2;
#
# WL#5274: Postpone materialization of views/subqueries in FROM clause.
#          Additional tests.
#
CREATE TABLE t1(f1 int, f11 int);
CREATE TABLE t2(f2 int, f22 int);
INSERT INTO t1 VALUES(1,1),(2,2),(3,3),(5,5),(9,9),(7,7);
INSERT INTO t2 VALUES(1,1),(3,3),(2,2),(4,4),(8,8),(6,6);
for merged derived tables
explain for simple derived
EXPLAIN SELECT * FROM (SELECT * FROM t1) tt;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	NULL
SELECT * FROM (SELECT * FROM t1) tt;
f1	f11
1	1
2	2
3	3
5	5
9	9
7	7
explain for multitable derived
EXPLAIN EXTENDED SELECT * FROM (SELECT * FROM t1 JOIN t2 ON f1=f2) tt;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	36	100.00	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using join buffer (Block Nested Loop)
Warnings:
Note	1003	/* select#1 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11`,`tt`.`f2` AS `f2`,`tt`.`f22` AS `f22` from (/* select#2 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11`,`test`.`t2`.`f2` AS `f2`,`test`.`t2`.`f22` AS `f22` from `test`.`t1` join `test`.`t2` where (`test`.`t2`.`f2` = `test`.`t1`.`f1`)) `tt`
SELECT * FROM (SELECT * FROM t1 JOIN t2 ON f1=f2) tt;
f1	f11	f2	f22
1	1	1	1
3	3	3	3
2	2	2	2
explain for derived with where
FLUSH STATUS;
EXPLAIN EXTENDED 
SELECT * FROM (SELECT * FROM t1 WHERE f1 IN (2,3)) tt WHERE f11=2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	5	const	0	100.00	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#2 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where (`test`.`t1`.`f1` in (2,3))) `tt` where (`tt`.`f11` = 2)
SHOW STATUS LIKE 'Handler_read%';
Variable_name	Value
Handler_read_first	0
Handler_read_key	0
Handler_read_last	0
Handler_read_next	0
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	0
FLUSH STATUS;
SELECT * FROM (SELECT * FROM t1 WHERE f1 IN (2,3)) tt WHERE f11=2;
f1	f11
2	2
SHOW STATUS LIKE 'Handler_read%';
Variable_name	Value
Handler_read_first	0
Handler_read_key	1
Handler_read_last	0
Handler_read_next	1
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	7
join of derived
EXPLAIN EXTENDED 
SELECT * FROM (SELECT * FROM t1 WHERE f1 IN (2,3)) tt JOIN
(SELECT * FROM t1 WHERE f1 IN (1,2)) aa ON tt.f1=aa.f1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
1	PRIMARY	<derived3>	ref	<auto_key0>	<auto_key0>	5	tt.f1	2	100.00	NULL
3	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11`,`aa`.`f1` AS `f1`,`aa`.`f11` AS `f11` from (/* select#2 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where (`test`.`t1`.`f1` in (2,3))) `tt` join (/* select#3 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where (`test`.`t1`.`f1` in (1,2))) `aa` where (`aa`.`f1` = `tt`.`f1`)
SELECT * FROM (SELECT * FROM t1 WHERE f1 IN (2,3)) tt JOIN
(SELECT * FROM t1 WHERE f1 IN (1,2)) aa ON tt.f1=aa.f1;
f1	f11	f1	f11
2	2	2	2
for merged views
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE VIEW v2 AS SELECT * FROM t1 JOIN t2 ON f1=f2;
CREATE VIEW v3 AS SELECT * FROM t1 WHERE f1 IN (2,3);
CREATE VIEW v4 AS SELECT * FROM t2 WHERE f2 IN (2,3);
explain for simple views
EXPLAIN EXTENDED SELECT * FROM v1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1`
SELECT * FROM v1;
f1	f11
1	1
2	2
3	3
5	5
9	9
7	7
explain for multitable views
EXPLAIN EXTENDED SELECT * FROM v2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using join buffer (Block Nested Loop)
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11`,`test`.`t2`.`f2` AS `f2`,`test`.`t2`.`f22` AS `f22` from `test`.`t1` join `test`.`t2` where (`test`.`t2`.`f2` = `test`.`t1`.`f1`)
SELECT * FROM v2;
f1	f11	f2	f22
1	1	1	1
3	3	3	3
2	2	2	2
explain for views with where
EXPLAIN EXTENDED SELECT * FROM v3 WHERE f11 IN (1,3);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where ((`test`.`t1`.`f11` in (1,3)) and (`test`.`t1`.`f1` in (2,3)))
SELECT * FROM v3 WHERE f11 IN (1,3);
f1	f11
3	3
explain for joined views
EXPLAIN EXTENDED
SELECT * FROM v3 JOIN v4 ON f1=f2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using join buffer (Block Nested Loop)
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11`,`test`.`t2`.`f2` AS `f2`,`test`.`t2`.`f22` AS `f22` from `test`.`t1` join `test`.`t2` where ((`test`.`t2`.`f2` = `test`.`t1`.`f1`) and (`test`.`t1`.`f1` in (2,3)) and (`test`.`t1`.`f1` in (2,3)))
SELECT * FROM v3 JOIN v4 ON f1=f2;
f1	f11	f2	f22
3	3	3	3
2	2	2	2
FLUSH STATUS;
EXPLAIN EXTENDED SELECT * FROM v4 WHERE f2 IN (1,3);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `test`.`t2`.`f2` AS `f2`,`test`.`t2`.`f22` AS `f22` from `test`.`t2` where ((`test`.`t2`.`f2` in (1,3)) and (`test`.`t2`.`f2` in (2,3)))
SHOW STATUS LIKE 'Handler_read%';
Variable_name	Value
Handler_read_first	0
Handler_read_key	0
Handler_read_last	0
Handler_read_next	0
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	0
FLUSH STATUS;
SELECT * FROM v4 WHERE f2 IN (1,3);
f2	f22
3	3
SHOW STATUS LIKE 'Handler_read%';
Variable_name	Value
Handler_read_first	0
Handler_read_key	0
Handler_read_last	0
Handler_read_next	0
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	7
for materialized derived tables
explain for simple derived
EXPLAIN EXTENDED SELECT * FROM (SELECT * FROM t1 GROUP BY f1) tt;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#2 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` group by `test`.`t1`.`f1`) `tt`
SELECT * FROM (SELECT * FROM t1 HAVING f1=f1) tt;
f1	f11
1	1
2	2
3	3
5	5
9	9
7	7
explain showing created indexes and late materialization
FLUSH STATUS;
EXPLAIN EXTENDED
SELECT * FROM t1 JOIN (SELECT * FROM t2 GROUP BY f2) tt ON f1=f2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	5	test.t1.f1	2	100.00	NULL
2	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11`,`tt`.`f2` AS `f2`,`tt`.`f22` AS `f22` from `test`.`t1` join (/* select#2 */ select `test`.`t2`.`f2` AS `f2`,`test`.`t2`.`f22` AS `f22` from `test`.`t2` group by `test`.`t2`.`f2`) `tt` where (`tt`.`f2` = `test`.`t1`.`f1`)
SHOW STATUS LIKE 'Handler_read%';
Variable_name	Value
Handler_read_first	0
Handler_read_key	0
Handler_read_last	0
Handler_read_next	0
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	0
FLUSH STATUS;
SELECT * FROM t1 JOIN (SELECT * FROM t2 GROUP BY f2) tt ON f1=f2;
f1	f11	f2	f22
1	1	1	1
2	2	2	2
3	3	3	3
SHOW STATUS LIKE 'Handler_read%';
Variable_name	Value
Handler_read_first	0
Handler_read_key	6
Handler_read_last	0
Handler_read_next	3
Handler_read_prev	0
Handler_read_rnd	6
Handler_read_rnd_next	21
for materialized views
DROP VIEW v1,v2,v3;
CREATE VIEW v1 AS SELECT * FROM t1 GROUP BY f1;
CREATE VIEW v2 AS SELECT * FROM t2 GROUP BY f2;
CREATE VIEW v3 AS SELECT t1.f1,t1.f11 FROM t1 JOIN t1 AS t11 HAVING t1.f1<100;
explain for simple derived
EXPLAIN EXTENDED SELECT * FROM v1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `v1`.`f1` AS `f1`,`v1`.`f11` AS `f11` from `test`.`v1`
SELECT * FROM v1;
f1	f11
1	1
2	2
3	3
5	5
7	7
9	9
explain showing created indexes and late materialization for views
FLUSH STATUS;
EXPLAIN EXTENDED SELECT * FROM t1 JOIN v2 ON f1=f2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	5	test.t1.f1	2	100.00	NULL
2	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11`,`v2`.`f2` AS `f2`,`v2`.`f22` AS `f22` from `test`.`t1` join `test`.`v2` where (`v2`.`f2` = `test`.`t1`.`f1`)
SHOW STATUS LIKE 'Handler_read%';
Variable_name	Value
Handler_read_first	0
Handler_read_key	0
Handler_read_last	0
Handler_read_next	0
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	0
FLUSH STATUS;
SELECT * FROM t1 JOIN v2 ON f1=f2;
f1	f11	f2	f22
1	1	1	1
2	2	2	2
3	3	3	3
SHOW STATUS LIKE 'Handler_read%';
Variable_name	Value
Handler_read_first	0
Handler_read_key	6
Handler_read_last	0
Handler_read_next	3
Handler_read_prev	0
Handler_read_rnd	6
Handler_read_rnd_next	21
EXPLAIN EXTENDED
SELECT * FROM t1,v3 AS v31,v3 WHERE t1.f1=v31.f1 and t1.f1=v3.f1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	5	test.t1.f1	3	100.00	NULL
1	PRIMARY	<derived3>	ref	<auto_key0>	<auto_key0>	5	test.t1.f1	3	100.00	NULL
3	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
3	DERIVED	t11	ALL	NULL	NULL	NULL	NULL	6	100.00	Using join buffer (Block Nested Loop)
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	t11	ALL	NULL	NULL	NULL	NULL	6	100.00	Using join buffer (Block Nested Loop)
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11`,`v31`.`f1` AS `f1`,`v31`.`f11` AS `f11`,`v3`.`f1` AS `f1`,`v3`.`f11` AS `f11` from `test`.`t1` join `test`.`v3` `v31` join `test`.`v3` where ((`v31`.`f1` = `test`.`t1`.`f1`) and (`v3`.`f1` = `test`.`t1`.`f1`))
FLUSH STATUS;
SELECT * FROM t1,v3 AS v31,v3 WHERE t1.f1=v31.f1 and t1.f1=v3.f1;
f1	f11	f1	f11	f1	f11
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
1	1	1	1	1	1
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
2	2	2	2	2	2
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
3	3	3	3	3	3
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
5	5	5	5	5	5
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
9	9	9	9	9	9
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
7	7	7	7	7	7
SHOW STATUS LIKE 'Handler_read%';
Variable_name	Value
Handler_read_first	0
Handler_read_key	42
Handler_read_last	0
Handler_read_next	252
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	35
explain showing late materialization for views
EXPLAIN EXTENDED SELECT * FROM v1 JOIN v4 ON f1=f2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	5	test.t2.f2	2	100.00	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `v1`.`f1` AS `f1`,`v1`.`f11` AS `f11`,`test`.`t2`.`f2` AS `f2`,`test`.`t2`.`f22` AS `f22` from `test`.`v1` join `test`.`t2` where ((`v1`.`f1` = `test`.`t2`.`f2`) and (`test`.`t2`.`f2` in (2,3)))
SELECT * FROM v1 JOIN v4 ON f1=f2;
f1	f11	f2	f22
3	3	3	3
2	2	2	2
merged derived in merged derived
EXPLAIN EXTENDED SELECT * FROM (SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7) tt WHERE f1 > 2) zz;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	<derived3>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
3	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `zz`.`f1` AS `f1`,`zz`.`f11` AS `f11` from (/* select#2 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#3 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where (`test`.`t1`.`f1` < 7)) `tt` where (`tt`.`f1` > 2)) `zz`
SELECT * FROM (SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7) tt WHERE f1 > 2) zz;
f1	f11
3	3
5	5
materialized derived in merged derived
EXPLAIN EXTENDED  SELECT * FROM (SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2) zz;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	<derived3>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
3	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `zz`.`f1` AS `f1`,`zz`.`f11` AS `f11` from (/* select#2 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#3 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where (`test`.`t1`.`f1` < 7) group by `test`.`t1`.`f1`) `tt` where (`tt`.`f1` > 2)) `zz`
SELECT * FROM (SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2) zz;
f1	f11
3	3
5	5
merged derived in materialized derived
EXPLAIN  extended SELECT * FROM (SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7) tt WHERE f1 > 2 GROUP BY f1) zz;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	<derived3>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
3	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `zz`.`f1` AS `f1`,`zz`.`f11` AS `f11` from (/* select#2 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#3 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where (`test`.`t1`.`f1` < 7)) `tt` where (`tt`.`f1` > 2) group by `tt`.`f1`) `zz`
SELECT * FROM (SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7) tt WHERE f1 > 2 GROUP BY f1) zz;
f1	f11
3	3
5	5
materialized derived in materialized derived
EXPLAIN EXTENDED  SELECT * FROM (SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2 GROUP BY f1) zz;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	<derived3>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
3	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `zz`.`f1` AS `f1`,`zz`.`f11` AS `f11` from (/* select#2 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#3 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where (`test`.`t1`.`f1` < 7) group by `test`.`t1`.`f1`) `tt` where (`tt`.`f1` > 2) group by `tt`.`f1`) `zz`
SELECT * FROM (SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2 GROUP BY f1) zz;
f1	f11
3	3
5	5
mat in merged derived join mat in merged derived
EXPLAIN EXTENDED  SELECT * FROM 
(SELECT * FROM (SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2) x
JOIN 
(SELECT * FROM (SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2) z
ON x.f1 = z.f1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
1	PRIMARY	<derived4>	ref	<auto_key0>	<auto_key0>	5	x.f1	2	100.00	NULL
4	DERIVED	<derived5>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
5	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
2	DERIVED	<derived3>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
3	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `x`.`f1` AS `f1`,`x`.`f11` AS `f11`,`z`.`f1` AS `f1`,`z`.`f11` AS `f11` from (/* select#2 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#3 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where (`test`.`t1`.`f1` < 7) group by `test`.`t1`.`f1`) `tt` where (`tt`.`f1` > 2)) `x` join (/* select#4 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#5 */ select `t1`.`f1` AS `f1`,`t1`.`f11` AS `f11` from `test`.`t1` where (`t1`.`f1` < 7) group by `t1`.`f1`) `tt` where (`tt`.`f1` > 2)) `z` where (`z`.`f1` = `x`.`f1`)
FLUSH STATUS;
SELECT * FROM 
(SELECT * FROM (SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2) x
JOIN 
(SELECT * FROM (SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2) z
ON x.f1 = z.f1;
f1	f11	f1	f11
3	3	3	3
5	5	5	5
SHOW STATUS LIKE 'Handler_read%';
Variable_name	Value
Handler_read_first	0
Handler_read_key	2
Handler_read_last	0
Handler_read_next	2
Handler_read_prev	0
Handler_read_rnd	8
Handler_read_rnd_next	37
FLUSH STATUS;
merged in merged derived join merged in merged derived
EXPLAIN EXTENDED  SELECT * FROM 
(SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 ) tt WHERE f1 > 2 ) x
JOIN 
(SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 ) tt WHERE f1 > 2 ) z
ON x.f1 = z.f1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
1	PRIMARY	<derived4>	ref	<auto_key0>	<auto_key0>	5	x.f1	2	100.00	NULL
4	DERIVED	<derived5>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
5	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
2	DERIVED	<derived3>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
3	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `x`.`f1` AS `f1`,`x`.`f11` AS `f11`,`z`.`f1` AS `f1`,`z`.`f11` AS `f11` from (/* select#2 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#3 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where (`test`.`t1`.`f1` < 7)) `tt` where (`tt`.`f1` > 2)) `x` join (/* select#4 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#5 */ select `t1`.`f1` AS `f1`,`t1`.`f11` AS `f11` from `test`.`t1` where (`t1`.`f1` < 7)) `tt` where (`tt`.`f1` > 2)) `z` where (`z`.`f1` = `x`.`f1`)
SELECT * FROM 
(SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 ) tt WHERE f1 > 2 ) x
JOIN 
(SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 ) tt WHERE f1 > 2 ) z
ON x.f1 = z.f1;
f1	f11	f1	f11
3	3	3	3
5	5	5	5
materialized in materialized derived join 
materialized in materialized derived
EXPLAIN EXTENDED  SELECT * FROM 
(SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2 GROUP BY f1) x
JOIN 
(SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2 GROUP BY f1) z
ON x.f1 = z.f1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
1	PRIMARY	<derived4>	ref	<auto_key0>	<auto_key0>	5	x.f1	2	100.00	NULL
4	DERIVED	<derived5>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
5	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
2	DERIVED	<derived3>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
3	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `x`.`f1` AS `f1`,`x`.`f11` AS `f11`,`z`.`f1` AS `f1`,`z`.`f11` AS `f11` from (/* select#2 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#3 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11` from `test`.`t1` where (`test`.`t1`.`f1` < 7) group by `test`.`t1`.`f1`) `tt` where (`tt`.`f1` > 2) group by `tt`.`f1`) `x` join (/* select#4 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#5 */ select `t1`.`f1` AS `f1`,`t1`.`f11` AS `f11` from `test`.`t1` where (`t1`.`f1` < 7) group by `t1`.`f1`) `tt` where (`tt`.`f1` > 2) group by `tt`.`f1`) `z` where (`z`.`f1` = `x`.`f1`)
SELECT * FROM 
(SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2 GROUP BY f1) x
JOIN 
(SELECT * FROM 
(SELECT * FROM t1 WHERE f1 < 7 GROUP BY f1) tt WHERE f1 > 2 GROUP BY f1) z
ON x.f1 = z.f1;
f1	f11	f1	f11
3	3	3	3
5	5	5	5
merged view in materialized derived
EXPLAIN EXTENDED
SELECT * FROM (SELECT * FROM v4 GROUP BY 1) tt;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where; Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `tt`.`f2` AS `f2`,`tt`.`f22` AS `f22` from (/* select#2 */ select `test`.`t2`.`f2` AS `f2`,`test`.`t2`.`f22` AS `f22` from `test`.`t2` where (`test`.`t2`.`f2` in (2,3)) group by 1) `tt`
SELECT * FROM (SELECT * FROM v4 GROUP BY 1) tt;
f2	f22
2	2
3	3
materialized view in merged derived
EXPLAIN EXTENDED 
SELECT * FROM ( SELECT * FROM v1 WHERE f1 < 7) tt;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	<derived3>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
3	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#2 */ select `v1`.`f1` AS `f1`,`v1`.`f11` AS `f11` from `test`.`v1` where (`v1`.`f1` < 7)) `tt`
SELECT * FROM ( SELECT * FROM v1 WHERE f1 < 7) tt;
f1	f11
1	1
2	2
3	3
5	5
merged view in a merged view in a merged derived
CREATE VIEW v6 AS SELECT * FROM v4 WHERE f2 < 7;
EXPLAIN EXTENDED SELECT * FROM (SELECT * FROM v6) tt;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `tt`.`f2` AS `f2`,`tt`.`f22` AS `f22` from (/* select#2 */ select `test`.`t2`.`f2` AS `f2`,`test`.`t2`.`f22` AS `f22` from `test`.`t2` where ((`test`.`t2`.`f2` in (2,3)) and (`test`.`t2`.`f2` < 7))) `tt`
SELECT * FROM (SELECT * FROM v6) tt;
f2	f22
3	3
2	2
materialized view in a merged view in a materialized derived
CREATE VIEW v7 AS SELECT * FROM v1;
EXPLAIN EXTENDED SELECT * FROM (SELECT * FROM v7 GROUP BY 1) tt;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
2	DERIVED	<derived4>	ALL	NULL	NULL	NULL	NULL	6	100.00	Using temporary; Using filesort
4	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `tt`.`f1` AS `f1`,`tt`.`f11` AS `f11` from (/* select#2 */ select `v1`.`f1` AS `f1`,`v1`.`f11` AS `f11` from `test`.`v1` group by 1) `tt`
SELECT * FROM (SELECT * FROM v7 GROUP BY 1) tt;
f1	f11
1	1
2	2
3	3
5	5
7	7
9	9
JOIN of above two
EXPLAIN EXTENDED SELECT * FROM v6 JOIN v7 ON f2=f1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	Using where
1	PRIMARY	<derived5>	ref	<auto_key0>	<auto_key0>	5	test.t2.f2	2	100.00	NULL
5	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	6	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `test`.`t2`.`f2` AS `f2`,`test`.`t2`.`f22` AS `f22`,`v1`.`f1` AS `f1`,`v1`.`f11` AS `f11` from `test`.`t2` join `test`.`v1` where ((`v1`.`f1` = `test`.`t2`.`f2`) and (`test`.`t2`.`f2` in (2,3)) and (`test`.`t2`.`f2` < 7))
SELECT * FROM v6 JOIN v7 ON f2=f1;
f2	f22	f1	f11
3	3	3	3
2	2	2	2
test two keys
CREATE TABLE t3(f3 INT, f33 INT);
INSERT INTO t1 VALUES(6,6),(8,8);
INSERT INTO t3 VALUES(1,1),(2,2),(3,3),(5,5);
EXPLAIN EXTENDED SELECT * FROM t1 JOIN (SELECT * FROM t2) tt ON t1.f1=tt.f2
JOIN t3 ON tt.f22=t3.f3;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t3	ALL	NULL	NULL	NULL	NULL	4	100.00	Using where
1	PRIMARY	<derived2>	ref	<auto_key2>	<auto_key2>	5	test.t3.f3	2	100.00	NULL
1	PRIMARY	t1	ALL	NULL	NULL	NULL	NULL	8	100.00	Using where; Using join buffer (Block Nested Loop)
2	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	6	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1`,`test`.`t1`.`f11` AS `f11`,`tt`.`f2` AS `f2`,`tt`.`f22` AS `f22`,`test`.`t3`.`f3` AS `f3`,`test`.`t3`.`f33` AS `f33` from `test`.`t1` join (/* select#2 */ select `test`.`t2`.`f2` AS `f2`,`test`.`t2`.`f22` AS `f22` from `test`.`t2`) `tt` join `test`.`t3` where ((`test`.`t1`.`f1` = `tt`.`f2`) and (`tt`.`f22` = `test`.`t3`.`f3`))
SELECT * FROM t1 JOIN (SELECT * FROM t2) tt ON t1.f1=tt.f2
JOIN t3 ON tt.f22=t3.f3;
f1	f11	f2	f22	f3	f33
1	1	1	1	1	1
2	2	2	2	2	2
3	3	3	3	3	3
DROP TABLE t1,t2,t3;
DROP VIEW v1,v2,v3,v4,v6,v7;
#
#
# BUG#11783262: CRASH IN ITEM_FIELD::ITEM_FIELD IN ITEM.CC ON SUBQUERY
#               IN FROM WITH WL5274 
#
CREATE TABLE t1 (
col_int_key INT,
col_time_key time,
col_varchar_key VARCHAR(1),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
) ENGINE=INNODB;
SELECT alias1.col_time_key AS field1
FROM ( ( SELECT SQ1_alias1.* FROM t1 AS SQ1_alias1 ) AS alias1
INNER JOIN t1 AS alias2
ON (alias2.col_int_key = alias1.col_int_key)
)
WHERE alias1.col_int_key = 207
ORDER BY alias1.col_varchar_key, field1;
field1
DROP TABLE t1;
#
# Bug#11807437: VALGRIND WARNING IN MYSQL_DERIVED_OPTIMIZE() LINE 293
#
CREATE TABLE t1 (
f1 int(11) DEFAULT NULL
);
SELECT 1
FROM (
SELECT 1, 2 FROM DUAL
WHERE EXISTS  (
SELECT f1
FROM  t1
)) AS tt
;
1
DROP TABLE t1;
#
#
# Bug#11808582: VALGRIND ON WL#5274: INVALID WRITE IN MC_REPLACE_STRMEM.C:493) 
#
CREATE TABLE t1 (
pk INT NOT NULL AUTO_INCREMENT,
col_int_key INT,
col_time_key time,
col_varchar_key VARCHAR(1),
PRIMARY KEY (pk),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
) ENGINE=InnoDB;
SELECT tt.col_time_key
FROM ( ( SELECT * FROM t1 ) AS tt
INNER JOIN t1
ON (t1.col_int_key = tt.col_int_key)
)
WHERE tt.col_int_key = 207
ORDER BY tt.col_varchar_key, tt.pk ASC, 1;
col_time_key
DROP TABLE t1;
#
# Bug#11791677 - ASSERTION FAILED IN JOIN_MATERIALIZE_TABLE IN
#                SQL_SELECT.CC ON NESTED SUBQUERY 
#
CREATE TABLE t1 (
pk int(11) NOT NULL AUTO_INCREMENT,
col_int_key int(11) DEFAULT NULL,
col_varchar_key varchar(1) DEFAULT NULL,
PRIMARY KEY (pk),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t1 VALUES (10,8,'v'), (29,4,'c');
CREATE TABLE t2 (  
pk int(11) NOT NULL AUTO_INCREMENT,
col_int_nokey int(11) DEFAULT NULL,
col_varchar_key varchar(1) DEFAULT NULL,
PRIMARY KEY (pk)
);
INSERT INTO t2 VALUES (16,1,'c'), (20,4,'d');
CREATE TABLE t3 (
`field1` varchar(1) DEFAULT NULL,
`field2` int(11) DEFAULT NULL
);
INSERT INTO t3 VALUES ('m',6),('c',4);
SELECT *
FROM t3
WHERE (field1, field2) IN (
SELECT t1.col_varchar_key AS field1,
t1.col_int_key AS field2
FROM ( t1 INNER JOIN (
SELECT t2.*
FROM t2
WHERE t2.col_int_nokey < t2.pk ) AS alias2
ON (alias2.col_varchar_key = t1.col_varchar_key ) )
GROUP BY field1, field2
ORDER BY t1.col_int_key, t1 .pk DESC )
;
field1	field2
c	4
DROP TABLE t1,t2,t3;
#
#
# Bug#11791705 - CRASH IN JOIN_MATERIALIZE_TABLE OR ASSERTION FAIL:
#                !TAB->SAVE_READ_FIRST_RECORD
#
CREATE TABLE t1 (a INTEGER);
INSERT INTO t1 VALUES (NULL),(NULL);
SELECT * FROM t1
WHERE (a, a) NOT IN
(SELECT * FROM (SELECT 8, 4 UNION SELECT 2, 3) tt) ;
a
DROP TABLE t1;
#
# Bug#11791649 - ASSERT: FIXED == 0, IN ITEM.CC ON EXPLAIN WITH VIEW
#                IN SUBQUERY 
#
CREATE TABLE t1 (pk int);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 (col_varchar_nokey varchar(1));
INSERT INTO t2 VALUES ('m'), ('f');
EXPLAIN SELECT pk
FROM t1
WHERE (2) IN
( SELECT *
FROM (SELECT COUNT(col_varchar_nokey) FROM t2) d
)
;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t1	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	<derived3>	ALL	NULL	NULL	NULL	NULL	1	Using where; FirstMatch(t1)
3	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	2	NULL
DROP TABLE t1,t2;
#
#
# Bug#12735934 - Lost LIMIT clause caused wrong result.
#
CREATE TABLE t1 (f1 VARCHAR(1), key(f1));
INSERT INTO t1 VALUES ('a');
CREATE VIEW v1 AS SELECT f1 FROM t1 ORDER BY 1 LIMIT 0;
SELECT * FROM v1;
f1
DROP VIEW v1;
DROP TABLE t1;
#
#
# Bug#12726927: An outdated assertion caused server failure.
#
CREATE TABLE t1 (
pk int(11) NOT NULL AUTO_INCREMENT,
col_int_nokey int(11) NOT NULL,
col_varchar_key varchar(1) NOT NULL,
PRIMARY KEY (pk),
KEY col_varchar_key (col_varchar_key)
) ENGINE=MyISAM;
INSERT INTO t1 VALUES (10,1,'v'), (24,18,'h');
CREATE TABLE t2 (
pk int(11) NOT NULL AUTO_INCREMENT,
col_date_key date NOT NULL,
col_date_nokey date NOT NULL,
col_time_nokey time NOT NULL,
col_varchar_key varchar(1) NOT NULL,
col_varchar_nokey varchar(1) NOT NULL,
PRIMARY KEY (pk),
KEY col_date_key (col_date_key),
KEY col_varchar_key (col_varchar_key)
) ENGINE=MyISAM;
INSERT INTO t2 VALUES (1,'1900-01-01','1900-01-01','00:00:00','k','k');
SELECT OUTR.col_date_key
FROM t2 AS OUTR2
LEFT JOIN t2 AS OUTR ON OUTR2.pk < OUTR.pk
WHERE ( OUTR.col_varchar_nokey , OUTR.col_varchar_key )
IN (
SELECT DISTINCT col_varchar_key , col_varchar_key
FROM t1
WHERE col_int_nokey XOR OUTR.col_time_nokey
)
XOR OUTR.col_date_nokey IS NULL
;
col_date_key
NULL
DROP TABLE t1,t2;
#
#
# Bug#12799731 - CRASH IN END_READ_RECORD.
#
create table t1(f1 char(255) charset utf8);
insert into t1 values('1'),('2'),('3'),('4'),('5'),('6'),('7'),('8'),('9'),('0');
set @save_heap_size= @@max_heap_table_size;
set @@max_heap_table_size= 1;
Warnings:
Warning	1292	Truncated incorrect max_heap_table_size value: '1'
flush status;
select count(*) from t1 join (
select t1.f1 from t1 join t1 as t2 join t1 as t3) tt on t1.f1 = tt.f1;
count(*)
1000
Should be greater than 1000 as it also includes records dumped from
heap to myisam.
show status like 'Handler_write';
Variable_name	Value
Handler_write	1021
set @@max_heap_table_size= @save_heap_size;
drop table t1;
#
#
# Bug#12896124: Crash on rqg_mdl_stability test
#
CREATE TABLE t1(f1 INT);
INSERT INTO t1 VALUES (1),(2),(3);
CREATE FUNCTION func1 (param1 INTEGER) RETURNS INT NOT DETERMINISTIC
return param1;
CREATE FUNCTION func2 (param1 INTEGER) RETURNS INT 
return param1;
SELECT * FROM (SELECT * FROM t1) tt WHERE f1 = func1(f1);
f1
1
2
3
EXPLAIN SELECT * FROM (SELECT * FROM t1) tt WHERE f1 = func1(f1);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	3	Using where
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	3	NULL
SELECT * FROM (SELECT * FROM t1) tt WHERE f1 = func2(f1);
f1
1
2
3
EXPLAIN SELECT * FROM (SELECT * FROM t1) tt WHERE f1 = func2(f1);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	3	Using where
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	3	NULL
DROP FUNCTION func1;
DROP FUNCTION func2;
DROP TABLE t1;
#
#
# Bug#12909844: Missing type cast caused false assertion
#
CREATE TABLE t1 ( fk INT) ENGINE=INNODB;
CREATE TABLE t2 (
f1 INT,  f2 INT,  f3 INT,  f4 INT,  f5 INT,  f6 INT,
f7 INT,  f8 INT,  f9 INT,  f10 INT, f11 INT, f12 INT,
f13 INT, f14 INT, f15 INT, f16 INT, f17 INT, f18 INT,
f19 INT, f20 INT, f21 INT, f22 INT, f23 INT, f24 INT,
f25 INT, f26 INT, f27 INT, f28 INT, f29 INT, f30 INT,
f31 INT, f32 TEXT, fk INT) ENGINE=INNODB;
SELECT alias2.fk AS field1 FROM t1 AS alias1 JOIN
(SELECT * FROM t2 ) AS alias2 ON alias1.fk = alias2.fk;
field1
EXPLAIN 
SELECT alias2.fk AS field1 FROM t1 AS alias1 JOIN
(SELECT * FROM t2 ) AS alias2 ON alias1.fk = alias2.fk;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	alias1	ALL	NULL	NULL	NULL	NULL	1	Using where
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	5	test.alias1.fk	2	NULL
2	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	1	NULL
DROP TABLE t1, t2;
#
#
# Bug#12910039: Incorrect merge caused segmentation fault.
#
CREATE TABLE t1 (f1 int) ENGINE=myisam;
CREATE TABLE t2 (f1 text) ENGINE=innodb;
SELECT 1 FROM (
( SELECT * FROM ( SELECT * FROM t2 ) AS alias1 ) AS alias1,
( SELECT * FROM t1 ) AS alias2 );
1
DROP TABLE t1,t2;
#
#
# Bug#12910006: MRR initialization on a derived table caused crash.
#
SET @save_switch= @@SESSION.optimizer_switch;
SET @@SESSION.optimizer_switch="batched_key_access=on";
CREATE TABLE t1 ( pk integer auto_increment,
col_blob_key blob, primary key (pk)) ENGINE=innodb;
CREATE TABLE t2 (col_tinytext tinytext null,
pk integer auto_increment, col_text text,
col_blob blob, primary key (pk)) ENGINE=innodb;
SELECT alias1.col_text AS field1 ,
alias1.col_tinytext AS field2
FROM t2 AS alias1
LEFT OUTER JOIN ( SELECT * FROM t1 ) AS alias2 ON alias1.pk = alias2.pk
WHERE alias2.pk >=1  AND alias2.pk < 3
ORDER BY field1,field2 ASC;
field1	field2
SET @@SESSION.optimizer_switch= @save_switch;
DROP TABLE t1, t2;
#
# Bug#13106350: MRR initialization on a derived table caused crash.
#
CREATE TABLE t1 (pk INTEGER PRIMARY KEY, vc VARCHAR(20));
INSERT INTO t1 VALUES(7, 'seven'), (13, 'thirteen');
CREATE TABLE t2 (pk INTEGER PRIMARY KEY, vc1 VARCHAR(20), vc2 VARCHAR(20));
INSERT INTO t2 VALUES(7, 'seven', 's'), (14, 'fourteen', 'f');
CREATE TABLE t3 (pk INTEGER PRIMARY KEY, vc VARCHAR(20));
INSERT INTO t3 VALUES(5, 'f'), (6, 's'), (7, 's');
explain SELECT derived.vc
FROM (SELECT * FROM t1) AS derived
WHERE derived.vc IN (
SELECT t2.vc1
FROM t2 JOIN t3 ON t2.vc2=t3.vc);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<subquery3>	ALL	NULL	NULL	NULL	NULL	NULL	Using where
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	23	<subquery3>.vc1	2	NULL
3	MATERIALIZED	t2	ALL	NULL	NULL	NULL	NULL	2	NULL
3	MATERIALIZED	t3	ALL	NULL	NULL	NULL	NULL	3	Using where; Using join buffer (Block Nested Loop)
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	2	NULL
SELECT derived.vc
FROM (SELECT * FROM t1) AS derived
WHERE derived.vc IN (
SELECT t2.vc1
FROM t2 JOIN t3 ON t2.vc2=t3.vc);
vc
seven
DROP TABLE t1, t2, t3;
#
#
# Bug#13107577: Derived table in a semi-join caused failed assertion. 
#
CREATE TABLE t1 (
`col_int_key` int(11) NOT NULL,
`col_varchar_nokey` varchar(1) NOT NULL
) ENGINE=MyISAM;
INSERT INTO t1 VALUES (8,'m'), (4,'b'), (4,'x'), (7,'g'), (4,'p');
CREATE VIEW v1 AS SELECT * FROM t1;
SELECT col_int_key
FROM t1
WHERE ( NOT EXISTS (
SELECT col_varchar_nokey
FROM t1 
WHERE ( 7 ) IN (
SELECT v1.col_int_key
FROM ( v1 JOIN ( SELECT * FROM t1 ) AS d1
ON ( d1.col_varchar_nokey = v1.col_varchar_nokey ) )
)
) )
;
col_int_key
DROP VIEW v1;
DROP TABLE t1;
#
#
# Bug#13105833: Crash when using LooseScan sj-strategy for a view.
#
CREATE TABLE t1 (pk int(11)) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 (pk int(11)) ENGINE=InnoDB;
INSERT INTO t2 VALUES (1), (2), (3);
CREATE VIEW v1 AS SELECT DISTINCT pk FROM t1;
SELECT pk 
FROM t2
WHERE pk IN ( SELECT * FROM v1 ) ;
pk
1
DROP TABLE t1,t2;
DROP VIEW v1;
#
#
# Bug#13261277: Unchecked key length caused missing records.
#
CREATE TABLE t1 (  
col_varchar varchar(1024) CHARACTER SET utf8 DEFAULT NULL,
stub1 varchar(1024) CHARACTER SET utf8 DEFAULT NULL,
stub2 varchar(1024) CHARACTER SET utf8 DEFAULT NULL,
stub3 varchar(1024) CHARACTER SET utf8 DEFAULT NULL
);
INSERT INTO t1 VALUES
('d','d','l','ther'),
(NULL,'s','NJBIQ','trzetuchv'),
(-715390976,'coul','MYWFB','cfhtrzetu'),
(1696792576,'f','i\'s','c'),
  (1,'i','ltpemcfhtr','gsltpemcf'),
  (-663027712,'mgsltpemcf','sa','amgsltpem'),
  (-1686700032,'JPRVK','i','vamgsltpe'),
  (NULL,'STUNB','UNVJV','u'),
  (5,'oka','qyihvamgsl','AXSMD'),
  (NULL,'tqwmqyihva','h','yntqwmqyi'),
  (3,'EGMJN','e','e');
CREATE TABLE t2 (
col_varchar varchar(10) DEFAULT NULL,
col_int INT DEFAULT NULL
);
INSERT INTO t2 VALUES ('d',9);
SET @save_heap_size= @@max_heap_table_size;
SET @@max_heap_table_size= 16384;
SELECT t2.col_int
FROM t2
RIGHT JOIN ( SELECT * FROM t1 ) AS dt 
ON t2.col_varchar = dt.col_varchar
WHERE t2.col_int IS NOT NULL ;
col_int
9
# Shouldn't use auto_key0 for derived table
EXPLAIN 
SELECT t2.col_int
FROM t2
RIGHT JOIN ( SELECT * FROM t1 ) AS dt
ON t2.col_varchar = dt.col_varchar
WHERE t2.col_int IS NOT NULL ;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t2	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	11	Using where
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	11	NULL
SET @@max_heap_table_size= @save_heap_size;
DROP TABLE t1,t2;
#
#
# Bug#13383857: Another crash in memcpy from
#               join_cache::write_record_data with semijoin
#
CREATE TABLE t1 (
col_int_key INT DEFAULT NULL,
col_time_nokey TIME DEFAULT NULL,
col_varchar_key VARCHAR(1) DEFAULT NULL,
col_varchar_nokey VARCHAR(1) DEFAULT NULL,
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t1 VALUES
(8,'22:55:23','x','x'),
(7,'10:19:31','d','d'),
(1,'14:40:36','r','r'),
(7,'04:37:47','f','f'),
(9,'19:34:06','y','y'),
(NULL,'20:35:33','u','u'),
(1,NULL,'m','m'),
(9,'14:43:37',NULL,NULL),
(2,'02:23:09','o','o'),
(9,'01:22:45','w','w'),
(2,'00:00:00','m','m'),
(4,'00:13:25','q','q'),
(0,'03:47:16',NULL,NULL),
(4,'01:41:48','d','d'),
(8,'00:00:00','g','g'),
(NULL,'22:32:04','x','x'),
(NULL,'16:44:14','f','f'),
(0,'17:38:37','p','p'),
(NULL,'08:46:48','j','j'),
(8,'14:11:27','c','c');
CREATE TABLE t2 (
col_int_key INT DEFAULT NULL,
col_time_nokey TIME DEFAULT NULL,
col_varchar_key VARCHAR(1) DEFAULT NULL,
col_varchar_nokey VARCHAR(1) DEFAULT NULL,
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t2 VALUES
(4,'22:34:09','v','v'),
(62,'14:26:02','v','v'),
(7,'14:03:03','c','c'),
(1,'01:46:09',NULL,NULL),
(0,'16:21:18','x','x'),
(7,'18:56:33','i','i'),
(7,NULL,'e','e'),
(1,'09:29:08','p','p'),
(7,'19:11:10','s','s'),
(1,'11:57:26','j','j'),
(5,'00:39:46','z','z'),
(2,'03:28:15','c','c'),
(0,'06:44:18','a','a'),
(1,'14:36:39','q','q'),
(8,'18:42:45','y','y'),
(1,'02:57:29',NULL,NULL),
(1,'16:46:13','r','r'),
(9,'19:39:02','v','v'),
(1,NULL,NULL,NULL),
(5,'20:58:33','r','r');
CREATE TABLE t3 (
col_int_key INT DEFAULT NULL,
col_time_nokey TIME DEFAULT NULL,
col_varchar_key VARCHAR(1) DEFAULT NULL,
col_varchar_nokey VARCHAR(1) DEFAULT NULL,
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t3 VALUES (8,'04:07:22','g','g');
explain SELECT col_time_nokey AS x
FROM (SELECT * FROM t2) AS outr
WHERE col_varchar_nokey IN (
SELECT innr.col_varchar_key
FROM (SELECT * FROM t3) AS innr2
LEFT JOIN (SELECT * FROM t1) AS innr
ON innr2.col_varchar_key >= innr.col_varchar_key
WHERE outr.col_varchar_nokey = 'e'
  )
AND outr.col_varchar_key <> 'r'
;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived4>	ALL	NULL	NULL	NULL	NULL	1	Using where; Start temporary
1	PRIMARY	<derived5>	ref	<auto_key0>	<auto_key0>	4	const	2	Using where
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	20	Using where; End temporary; Using join buffer (Block Nested Loop)
5	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	20	NULL
4	DERIVED	t3	system	NULL	NULL	NULL	NULL	1	NULL
2	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	20	NULL
SELECT col_time_nokey AS x
FROM (SELECT * FROM t2) AS outr
WHERE col_varchar_nokey IN (
SELECT innr.col_varchar_key
FROM (SELECT * FROM t3) AS innr2
LEFT JOIN (SELECT * FROM t1) AS innr
ON innr2.col_varchar_key >= innr.col_varchar_key
WHERE outr.col_varchar_nokey = 'e'
  )
AND outr.col_varchar_key <> 'r'
;
x
DROP TABLE t1, t2, t3;
#
# Bug#13354889: Crash on a derived table with more than 64 fields.
#
create table t1 (
field00 int, field01 int, field02 int, field03 int,
field04 int, field05 int, field06 int, field07 int,
field10 int, field11 int, field12 int, field13 int,
field14 int, field15 int, field16 int, field17 int,
field20 int, field21 int, field22 int, field23 int,
field24 int, field25 int, field26 int, field27 int,
field30 int, field31 int, field32 int, field33 int,
field34 int, field35 int, field36 int, field37 int,
field40 int, field41 int, field42 int, field43 int,
field44 int, field45 int, field46 int, field47 int,
field50 int, field51 int, field52 int, field53 int,
field54 int, field55 int, field56 int, field57 int,
field60 int, field61 int, field62 int, field63 int,
field64 int, field65 int, field66 int, field67 int,
field70 int, field71 int, field72 int, field73 int,
field74 int, field75 int, field76 int, field77 int,
field100 int
);
insert into t1(field100) values (1),(2),(3),(4),(5),(6),(7),(8),(9),(0);
insert into t1 select * from t1;
insert into t1 select * from t1;
insert into t1 select * from t1;
select tt.field100 from t1 join (select * from t1) tt where t1.field100=tt.field100
limit 1;
field100
1
Should use auto_key0 and ref access.
explain 
select tt.field100 from t1 join (select * from t1) tt where t1.field100=tt.field100
limit 1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t1	ALL	NULL	NULL	NULL	NULL	80	Using where
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	5	test.t1.field100	8	NULL
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	80	NULL
drop table t1;
#
#
# Bug#13390138: crash in memcpy from join_cache::write_record_data
#
CREATE TABLE t1 (
col_varchar_key varchar(1),
col_varchar_nokey varchar(1),
KEY col_varchar_key (col_varchar_key)
) ENGINE=MyISAM;
INSERT INTO t1 VALUES ('r','r');
CREATE TABLE t2 (
col_varchar_key varchar(1),
col_varchar_nokey varchar(1),
KEY col_varchar_key (col_varchar_key)
);
INSERT INTO t2 VALUES
(NULL,NULL),
('r','r');
CREATE TABLE t3 (
col_int_key int,
col_varchar_key varchar(1),
col_varchar_nokey varchar(1),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key, col_int_key)
);
INSERT INTO t3 VALUES
(9,'f','f'),
(4,'y','y'),
(3,'u','u'),
(2,'m','m'),
(NULL,NULL,NULL),
(2,'o','o'),
(NULL,'r','r'),
(6,'m','m'),
(7,'q','q'),
(6,'c','c');
explain SELECT grandparent.col_varchar_nokey AS g1
FROM (SELECT * FROM t3) AS grandparent
WHERE grandparent.col_varchar_nokey IN
(SELECT parent.col_varchar_key AS p1
FROM (SELECT * FROM t2) AS parent
WHERE grandparent.col_varchar_key IN (
SELECT child1.col_varchar_key AS c1
FROM (SELECT * FROM t1) AS child1
LEFT JOIN (SELECT * FROM t2) AS child2
ON child1.col_varchar_nokey <> child2.col_varchar_key
)
AND grandparent.col_int_key IS UNKNOWN
)
ORDER BY grandparent.col_varchar_nokey;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	ref	<auto_key0>	<auto_key0>	5	const	2	Using where; Using index; Using temporary; Using filesort; Start temporary
1	PRIMARY	<derived6>	ALL	NULL	NULL	NULL	NULL	1	Using where; Using join buffer (Block Nested Loop)
1	PRIMARY	<derived4>	ref	<auto_key0>	<auto_key0>	4	grandparent.col_varchar_nokey	2	NULL
1	PRIMARY	<derived7>	ALL	NULL	NULL	NULL	NULL	2	Using where; End temporary; Using join buffer (Block Nested Loop)
7	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	2	NULL
6	DERIVED	t1	system	NULL	NULL	NULL	NULL	1	NULL
4	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	2	NULL
2	DERIVED	t3	ALL	NULL	NULL	NULL	NULL	10	NULL
SELECT grandparent.col_varchar_nokey AS g1
FROM (SELECT * FROM t3) AS grandparent
WHERE grandparent.col_varchar_nokey IN
(SELECT parent.col_varchar_key AS p1
FROM (SELECT * FROM t2) AS parent
WHERE grandparent.col_varchar_key IN (
SELECT child1.col_varchar_key AS c1
FROM (SELECT * FROM t1) AS child1
LEFT JOIN (SELECT * FROM t2) AS child2
ON child1.col_varchar_nokey <> child2.col_varchar_key
)
AND grandparent.col_int_key IS UNKNOWN
)
ORDER BY grandparent.col_varchar_nokey;
g1
r
DROP TABLE t1, t2, t3;
#
# Bug#13457552: Crash on instantiating a derived table in a query with
#               empty result.
#
CREATE TABLE t1 ( pk INT, col_blob BLOB ) ENGINE = MyISAM;
CREATE TABLE t2 ( pk INT, col_blob BLOB ) ENGINE = InnoDB;
SELECT pk FROM ( SELECT col_blob, pk FROM t2 ) AS A NATURAL JOIN t1;
pk
EXPLAIN SELECT pk FROM ( SELECT col_blob, pk FROM t2 ) AS A NATURAL JOIN t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Impossible WHERE noticed after reading const tables
2	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	1	NULL
DROP TABLE t1,t2;
#
# Bug #13801019 ASSERTION `0' FAILED IN CREATE_MYISAM_TMP_TABLE
#
CREATE TABLE t1 (a INT, b BLOB) ENGINE=InnoDB;
CREATE TABLE t2 (c INT);
CREATE TABLE t3 (d INT);
INSERT INTO t3 VALUES (0);
SELECT * FROM (SELECT * FROM t1) AS a1 RIGHT JOIN t3 LEFT JOIN t2 ON d=c ON a=c;
a	b	d	c
NULL	NULL	0	NULL
DROP TABLE t1, t2, t3;
#
# Bug #17814492 - INVALID RESULTS FROM SUBQUERY WITH IN CLAUSE
#
CREATE TABLE t1 (
a INTEGER NOT NULL,
b VARCHAR(1000) NOT NULL,
c TEXT NOT NULL
)ENGINE=InnoDB;
INSERT INTO t1 VALUES (1, 'xxx', 'abc');
INSERT INTO t1 VALUES (2, 'yyy', 'abc');
INSERT INTO t1 SELECT a, b, c FROM t1 WHERE b='yyy';
INSERT INTO t1 SELECT a, b, c FROM t1 WHERE b='yyy';
INSERT INTO t1 SELECT a, b, c FROM t1 WHERE b='yyy';
CREATE TABLE t2 (
a INTEGER NOT NULL
)ENGINE=InnoDB;
INSERT INTO t2 VALUES (1), (2);
SET @save_optimizer_switch= @@optimizer_switch;
SET @@SESSION.optimizer_switch="index_condition_pushdown=on";
EXPLAIN SELECT a1.a, a1.b, a1.c FROM (SELECT a, b, c FROM t1 ) a1
JOIN t2 ON a1.a=t2.a WHERE a1.b='xxx';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t2	ALL	NULL	NULL	NULL	NULL	2	NULL
1	PRIMARY	<derived2>	ref	<auto_key1>	<auto_key1>	4	test.t2.a	2	Using where
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	9	NULL
SELECT a1.a, a1.b, a1.c FROM (SELECT a, b, c FROM t1 ) a1
JOIN t2 ON a1.a=t2.a WHERE a1.b='xxx';
a	b	c
1	xxx	abc
SET @@SESSION.optimizer_switch= @save_optimizer_switch;
DROP TABLE t2, t1;
# End of test for Bug #17814492
#
# Bug #18607971 : 5.5 TO 5.6 REGRESSION WITH A SUBQUERY IN THE FROM
#                 CLAUSE.
#
CREATE TABLE t(id INT PRIMARY KEY,
c1 INT, c2 INT, key(c2)) engine=InnoDB;
INSERT INTO t(id, c1, c2) VALUES(1, 2, 3), (2, 3, 4), (3, 3, 4), (4, 3, 4);
ANALYZE TABLE t;
Table	Op	Msg_type	Msg_text
test.t	analyze	status	OK
EXPLAIN SELECT * FROM
(SELECT t1.c1
FROM t t1 INNER JOIN t t2 ON t1.c1= 3
GROUP BY t1.c1) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	4	Using where
2	DERIVED	t2	index	NULL	c2	5	NULL	4	Using index; Using join buffer (Block Nested Loop)
EXPLAIN SELECT * FROM
(SELECT t1.id
FROM t t1 INNER JOIN t t2 ON t1.id=1 AND t1.c1=t2.id
GROUP BY t1.id, t2.c2) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	const	PRIMARY	PRIMARY	4	const	1	NULL
2	DERIVED	t2	const	PRIMARY	PRIMARY	4	const	1	NULL
EXPLAIN SELECT * FROM
(SELECT t1.c1
FROM t t1 INNER JOIN t t2 ON t1.c1= 3 AND t2.c2= 3
GROUP BY t1.c1) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t2	ref	c2	c2	5	const	1	Using index
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	4	Using where; Using join buffer (Block Nested Loop)
EXPLAIN SELECT * FROM
(SELECT t1.c1
FROM t t1 INNER JOIN t t2 ON t1.c1= 3 AND t2.c2= 3
GROUP BY t1.c1, t2.c2) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t2	ref	c2	c2	5	const	1	Using index
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	4	Using where; Using join buffer (Block Nested Loop)
EXPLAIN SELECT * FROM
(SELECT t1.c1
FROM t t1 INNER JOIN t t2 ON t1.c1= 3 AND t2.c2= 3
GROUP BY t1.c1, t1.id) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	4	Using join buffer (Block Nested Loop)
2	DERIVED	t2	ref	c2	c2	5	const	1	Using index; Using temporary; Using filesort
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	4	Using where; Using join buffer (Block Nested Loop)
EXPLAIN SELECT * FROM
(SELECT t1.id
FROM t t1 INNER JOIN t t2 ON t1.id=1 AND t1.c1=t2.c1
GROUP BY t2.c1, t1.id) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	const	PRIMARY	PRIMARY	4	const	1	NULL
2	DERIVED	t2	ALL	NULL	NULL	NULL	NULL	4	Using where
EXPLAIN SELECT * FROM
(SELECT t1.id
FROM t t1 INNER JOIN t t2 ON t1.id=1 AND t1.c1=t2.id
GROUP BY t2.c1, t1.id) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	const	PRIMARY	PRIMARY	4	const	1	NULL
2	DERIVED	t2	const	PRIMARY	PRIMARY	4	const	1	NULL
EXPLAIN SELECT * FROM
(SELECT t1.id
FROM t t1 INNER JOIN t t2 ON t1.id=1 AND t1.c1=t2.id
GROUP BY t2.c2, t1.id) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	const	PRIMARY	PRIMARY	4	const	1	NULL
2	DERIVED	t2	const	PRIMARY	PRIMARY	4	const	1	NULL
EXPLAIN SELECT * FROM
(SELECT t1.id
FROM t t1 INNER JOIN t t2 ON t1.id=1 AND t1.c1=t2.id
GROUP BY t1.id, t2.c2) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	const	PRIMARY	PRIMARY	4	const	1	NULL
2	DERIVED	t2	const	PRIMARY	PRIMARY	4	const	1	NULL
EXPLAIN SELECT * FROM
(SELECT t1.id
FROM t t1 INNER JOIN t t2 INNER JOIN t t3 ON t1.id=1 AND t1.c1=t2.id AND t2.c1=t3.id
GROUP BY t1.id, t2.c2, t3.c2) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	const	PRIMARY	PRIMARY	4	const	1	NULL
2	DERIVED	t2	const	PRIMARY	PRIMARY	4	const	1	NULL
2	DERIVED	t3	const	PRIMARY	PRIMARY	4	const	1	NULL
EXPLAIN SELECT * FROM
(SELECT DISTINCT t1.id
FROM t t1
WHERE t1.id= 1) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	const	PRIMARY	PRIMARY	4	const	1	Using index
EXPLAIN SELECT * FROM
(SELECT t1.id + 1
FROM t t1 INNER JOIN t t2 ON t1.id= 1
GROUP BY t1.id + 1) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	const	PRIMARY	PRIMARY	4	const	1	Using index
2	DERIVED	t2	index	NULL	c2	5	NULL	4	Using index
EXPLAIN SELECT * FROM
(SELECT t1.c1
FROM t t1 INNER JOIN t t2 ON t1.c1= 3
GROUP BY 1.5) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	ALL	NULL	NULL	NULL	NULL	4	Using where
2	DERIVED	t2	index	NULL	c2	5	NULL	4	Using index; Using join buffer (Block Nested Loop)
EXPLAIN SELECT * FROM
(SELECT t1.id
FROM t t1 INNER JOIN t t2 ON mod(t1.id,1000)= 1
GROUP BY t1.id) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	16	Using join buffer (Block Nested Loop)
2	DERIVED	t1	index	PRIMARY,c2	c2	5	NULL	4	Using where; Using index; Using temporary; Using filesort
2	DERIVED	t2	index	NULL	c2	5	NULL	4	Using index; Using join buffer (Block Nested Loop)
EXPLAIN SELECT * FROM
(SELECT t1.id + 1
FROM t t1 INNER JOIN t t2 ON t1.id + 1= 2
GROUP BY t1.id + 1) a, t b
WHERE b.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	b	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t1	index	PRIMARY,c2	c2	5	NULL	4	Using where; Using index
2	DERIVED	t2	index	NULL	c2	5	NULL	4	Using index; Using join buffer (Block Nested Loop)
CREATE VIEW v1 AS SELECT c1 a FROM t WHERE c1 = 3;
CREATE VIEW v2 AS SELECT c2 b FROM t WHERE c2 > 3;
EXPLAIN SELECT * FROM (SELECT v1.a
FROM v1 LEFT OUTER JOIN v2 ON v1.a = v2.b
GROUP BY v1.a) p, t q
WHERE q.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	q	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t	ALL	NULL	NULL	NULL	NULL	4	Using where
2	DERIVED	t	ref	c2	c2	5	const	1	Using where; Using index
DROP VIEW v1;
CREATE VIEW v1 AS SELECT c1 a FROM t;
EXPLAIN SELECT * FROM (SELECT v1.a
FROM v1 LEFT OUTER JOIN v2 ON v1.a = v2.b AND v1.a = 10
GROUP BY v1.a) p, t q
WHERE q.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	q	range	PRIMARY	PRIMARY	4	NULL	4	Using where
1	PRIMARY	<derived2>	ALL	NULL	NULL	NULL	NULL	4	Using join buffer (Block Nested Loop)
2	DERIVED	t	ALL	NULL	NULL	NULL	NULL	4	Using temporary; Using filesort
2	DERIVED	t	ref	c2	c2	5	func	1	Using where; Using index
EXPLAIN SELECT * FROM (SELECT v1.a
FROM v1 LEFT OUTER JOIN v2 ON v1.a = v2.b
WHERE v1.a = 3
GROUP BY v1.a) p, t q
WHERE q.id BETWEEN 1 AND 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	1	NULL
1	PRIMARY	q	range	PRIMARY	PRIMARY	4	NULL	4	Using where
2	DERIVED	t	ALL	NULL	NULL	NULL	NULL	4	Using where
2	DERIVED	t	ref	c2	c2	5	const	1	Using where; Using index
DROP VIEW v1, v2;
DROP TABLE t;
